// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sys-info.proto
#ifndef GRPC_sys_2dinfo_2eproto__INCLUDED
#define GRPC_sys_2dinfo_2eproto__INCLUDED

#include "sys-info.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace sysinfo {

class SysInfo final {
 public:
  static constexpr char const* service_full_name() {
    return "sysinfo.SysInfo";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status getNameAndIpInfo(::grpc::ClientContext* context, const ::sysinfo::GetNameAndIpInfoReq& request, ::sysinfo::GetNameAndIpInfoRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetNameAndIpInfoRsp>> AsyncgetNameAndIpInfo(::grpc::ClientContext* context, const ::sysinfo::GetNameAndIpInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetNameAndIpInfoRsp>>(AsyncgetNameAndIpInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetNameAndIpInfoRsp>> PrepareAsyncgetNameAndIpInfo(::grpc::ClientContext* context, const ::sysinfo::GetNameAndIpInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetNameAndIpInfoRsp>>(PrepareAsyncgetNameAndIpInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status getDeviceInfo(::grpc::ClientContext* context, const ::sysinfo::GetDeviceInfoReq& request, ::sysinfo::GetDeviceInfoRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetDeviceInfoRsp>> AsyncgetDeviceInfo(::grpc::ClientContext* context, const ::sysinfo::GetDeviceInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetDeviceInfoRsp>>(AsyncgetDeviceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetDeviceInfoRsp>> PrepareAsyncgetDeviceInfo(::grpc::ClientContext* context, const ::sysinfo::GetDeviceInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetDeviceInfoRsp>>(PrepareAsyncgetDeviceInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status getDeviceDetail(::grpc::ClientContext* context, const ::sysinfo::GetDeviceDetailReq& request, ::sysinfo::GetDeviceDetailRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetDeviceDetailRsp>> AsyncgetDeviceDetail(::grpc::ClientContext* context, const ::sysinfo::GetDeviceDetailReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetDeviceDetailRsp>>(AsyncgetDeviceDetailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetDeviceDetailRsp>> PrepareAsyncgetDeviceDetail(::grpc::ClientContext* context, const ::sysinfo::GetDeviceDetailReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetDeviceDetailRsp>>(PrepareAsyncgetDeviceDetailRaw(context, request, cq));
    }
    virtual ::grpc::Status getCpuUsage(::grpc::ClientContext* context, const ::sysinfo::GetCpuUsageReq& request, ::sysinfo::GetCpuUsageRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetCpuUsageRsp>> AsyncgetCpuUsage(::grpc::ClientContext* context, const ::sysinfo::GetCpuUsageReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetCpuUsageRsp>>(AsyncgetCpuUsageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetCpuUsageRsp>> PrepareAsyncgetCpuUsage(::grpc::ClientContext* context, const ::sysinfo::GetCpuUsageReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetCpuUsageRsp>>(PrepareAsyncgetCpuUsageRaw(context, request, cq));
    }
    virtual ::grpc::Status getCpuTemp(::grpc::ClientContext* context, const ::sysinfo::GetCpuTempReq& request, ::sysinfo::GetCpuTempRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetCpuTempRsp>> AsyncgetCpuTemp(::grpc::ClientContext* context, const ::sysinfo::GetCpuTempReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetCpuTempRsp>>(AsyncgetCpuTempRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetCpuTempRsp>> PrepareAsyncgetCpuTemp(::grpc::ClientContext* context, const ::sysinfo::GetCpuTempReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetCpuTempRsp>>(PrepareAsyncgetCpuTempRaw(context, request, cq));
    }
    virtual ::grpc::Status getMemUsage(::grpc::ClientContext* context, const ::sysinfo::GetMemUsageReq& request, ::sysinfo::GetMemUsageRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetMemUsageRsp>> AsyncgetMemUsage(::grpc::ClientContext* context, const ::sysinfo::GetMemUsageReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetMemUsageRsp>>(AsyncgetMemUsageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetMemUsageRsp>> PrepareAsyncgetMemUsage(::grpc::ClientContext* context, const ::sysinfo::GetMemUsageReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetMemUsageRsp>>(PrepareAsyncgetMemUsageRaw(context, request, cq));
    }
    virtual ::grpc::Status getNicInfo(::grpc::ClientContext* context, const ::sysinfo::GetNicInfoReq& request, ::sysinfo::GetNicInfoRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetNicInfoRsp>> AsyncgetNicInfo(::grpc::ClientContext* context, const ::sysinfo::GetNicInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetNicInfoRsp>>(AsyncgetNicInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetNicInfoRsp>> PrepareAsyncgetNicInfo(::grpc::ClientContext* context, const ::sysinfo::GetNicInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetNicInfoRsp>>(PrepareAsyncgetNicInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status getHostName(::grpc::ClientContext* context, const ::sysinfo::GetHostNameReq& request, ::sysinfo::GetHostNameRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetHostNameRsp>> AsyncgetHostName(::grpc::ClientContext* context, const ::sysinfo::GetHostNameReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetHostNameRsp>>(AsyncgetHostNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetHostNameRsp>> PrepareAsyncgetHostName(::grpc::ClientContext* context, const ::sysinfo::GetHostNameReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetHostNameRsp>>(PrepareAsyncgetHostNameRaw(context, request, cq));
    }
    virtual ::grpc::Status getIpInfo(::grpc::ClientContext* context, const ::sysinfo::GetIpInfoReq& request, ::sysinfo::GetIpInfoRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetIpInfoRsp>> AsyncgetIpInfo(::grpc::ClientContext* context, const ::sysinfo::GetIpInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetIpInfoRsp>>(AsyncgetIpInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetIpInfoRsp>> PrepareAsyncgetIpInfo(::grpc::ClientContext* context, const ::sysinfo::GetIpInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetIpInfoRsp>>(PrepareAsyncgetIpInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status getCpuModel(::grpc::ClientContext* context, const ::sysinfo::GetCpuModelReq& request, ::sysinfo::GetCpuModelRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetCpuModelRsp>> AsyncgetCpuModel(::grpc::ClientContext* context, const ::sysinfo::GetCpuModelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetCpuModelRsp>>(AsyncgetCpuModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetCpuModelRsp>> PrepareAsyncgetCpuModel(::grpc::ClientContext* context, const ::sysinfo::GetCpuModelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetCpuModelRsp>>(PrepareAsyncgetCpuModelRaw(context, request, cq));
    }
    virtual ::grpc::Status getCpuCores(::grpc::ClientContext* context, const ::sysinfo::GetCpuCoresReq& request, ::sysinfo::GetCpuCoresRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetCpuCoresRsp>> AsyncgetCpuCores(::grpc::ClientContext* context, const ::sysinfo::GetCpuCoresReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetCpuCoresRsp>>(AsyncgetCpuCoresRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetCpuCoresRsp>> PrepareAsyncgetCpuCores(::grpc::ClientContext* context, const ::sysinfo::GetCpuCoresReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetCpuCoresRsp>>(PrepareAsyncgetCpuCoresRaw(context, request, cq));
    }
    virtual ::grpc::Status getMemTotal(::grpc::ClientContext* context, const ::sysinfo::GetMemTotalReq& request, ::sysinfo::GetMemTotalRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetMemTotalRsp>> AsyncgetMemTotal(::grpc::ClientContext* context, const ::sysinfo::GetMemTotalReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetMemTotalRsp>>(AsyncgetMemTotalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetMemTotalRsp>> PrepareAsyncgetMemTotal(::grpc::ClientContext* context, const ::sysinfo::GetMemTotalReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetMemTotalRsp>>(PrepareAsyncgetMemTotalRaw(context, request, cq));
    }
    virtual ::grpc::Status getEthCtrlInfo(::grpc::ClientContext* context, const ::sysinfo::GetEthCtrlInfoReq& request, ::sysinfo::GetEthCtrlInfoRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetEthCtrlInfoRsp>> AsyncgetEthCtrlInfo(::grpc::ClientContext* context, const ::sysinfo::GetEthCtrlInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetEthCtrlInfoRsp>>(AsyncgetEthCtrlInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetEthCtrlInfoRsp>> PrepareAsyncgetEthCtrlInfo(::grpc::ClientContext* context, const ::sysinfo::GetEthCtrlInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetEthCtrlInfoRsp>>(PrepareAsyncgetEthCtrlInfoRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void getNameAndIpInfo(::grpc::ClientContext* context, const ::sysinfo::GetNameAndIpInfoReq* request, ::sysinfo::GetNameAndIpInfoRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getDeviceInfo(::grpc::ClientContext* context, const ::sysinfo::GetDeviceInfoReq* request, ::sysinfo::GetDeviceInfoRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getDeviceDetail(::grpc::ClientContext* context, const ::sysinfo::GetDeviceDetailReq* request, ::sysinfo::GetDeviceDetailRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getCpuUsage(::grpc::ClientContext* context, const ::sysinfo::GetCpuUsageReq* request, ::sysinfo::GetCpuUsageRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getCpuTemp(::grpc::ClientContext* context, const ::sysinfo::GetCpuTempReq* request, ::sysinfo::GetCpuTempRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getMemUsage(::grpc::ClientContext* context, const ::sysinfo::GetMemUsageReq* request, ::sysinfo::GetMemUsageRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getNicInfo(::grpc::ClientContext* context, const ::sysinfo::GetNicInfoReq* request, ::sysinfo::GetNicInfoRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getHostName(::grpc::ClientContext* context, const ::sysinfo::GetHostNameReq* request, ::sysinfo::GetHostNameRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getIpInfo(::grpc::ClientContext* context, const ::sysinfo::GetIpInfoReq* request, ::sysinfo::GetIpInfoRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getCpuModel(::grpc::ClientContext* context, const ::sysinfo::GetCpuModelReq* request, ::sysinfo::GetCpuModelRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getCpuCores(::grpc::ClientContext* context, const ::sysinfo::GetCpuCoresReq* request, ::sysinfo::GetCpuCoresRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getMemTotal(::grpc::ClientContext* context, const ::sysinfo::GetMemTotalReq* request, ::sysinfo::GetMemTotalRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getEthCtrlInfo(::grpc::ClientContext* context, const ::sysinfo::GetEthCtrlInfoReq* request, ::sysinfo::GetEthCtrlInfoRsp* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetNameAndIpInfoRsp>* AsyncgetNameAndIpInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetNameAndIpInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetNameAndIpInfoRsp>* PrepareAsyncgetNameAndIpInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetNameAndIpInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetDeviceInfoRsp>* AsyncgetDeviceInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetDeviceInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetDeviceInfoRsp>* PrepareAsyncgetDeviceInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetDeviceInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetDeviceDetailRsp>* AsyncgetDeviceDetailRaw(::grpc::ClientContext* context, const ::sysinfo::GetDeviceDetailReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetDeviceDetailRsp>* PrepareAsyncgetDeviceDetailRaw(::grpc::ClientContext* context, const ::sysinfo::GetDeviceDetailReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetCpuUsageRsp>* AsyncgetCpuUsageRaw(::grpc::ClientContext* context, const ::sysinfo::GetCpuUsageReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetCpuUsageRsp>* PrepareAsyncgetCpuUsageRaw(::grpc::ClientContext* context, const ::sysinfo::GetCpuUsageReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetCpuTempRsp>* AsyncgetCpuTempRaw(::grpc::ClientContext* context, const ::sysinfo::GetCpuTempReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetCpuTempRsp>* PrepareAsyncgetCpuTempRaw(::grpc::ClientContext* context, const ::sysinfo::GetCpuTempReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetMemUsageRsp>* AsyncgetMemUsageRaw(::grpc::ClientContext* context, const ::sysinfo::GetMemUsageReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetMemUsageRsp>* PrepareAsyncgetMemUsageRaw(::grpc::ClientContext* context, const ::sysinfo::GetMemUsageReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetNicInfoRsp>* AsyncgetNicInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetNicInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetNicInfoRsp>* PrepareAsyncgetNicInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetNicInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetHostNameRsp>* AsyncgetHostNameRaw(::grpc::ClientContext* context, const ::sysinfo::GetHostNameReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetHostNameRsp>* PrepareAsyncgetHostNameRaw(::grpc::ClientContext* context, const ::sysinfo::GetHostNameReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetIpInfoRsp>* AsyncgetIpInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetIpInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetIpInfoRsp>* PrepareAsyncgetIpInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetIpInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetCpuModelRsp>* AsyncgetCpuModelRaw(::grpc::ClientContext* context, const ::sysinfo::GetCpuModelReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetCpuModelRsp>* PrepareAsyncgetCpuModelRaw(::grpc::ClientContext* context, const ::sysinfo::GetCpuModelReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetCpuCoresRsp>* AsyncgetCpuCoresRaw(::grpc::ClientContext* context, const ::sysinfo::GetCpuCoresReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetCpuCoresRsp>* PrepareAsyncgetCpuCoresRaw(::grpc::ClientContext* context, const ::sysinfo::GetCpuCoresReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetMemTotalRsp>* AsyncgetMemTotalRaw(::grpc::ClientContext* context, const ::sysinfo::GetMemTotalReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetMemTotalRsp>* PrepareAsyncgetMemTotalRaw(::grpc::ClientContext* context, const ::sysinfo::GetMemTotalReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetEthCtrlInfoRsp>* AsyncgetEthCtrlInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetEthCtrlInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sysinfo::GetEthCtrlInfoRsp>* PrepareAsyncgetEthCtrlInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetEthCtrlInfoReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status getNameAndIpInfo(::grpc::ClientContext* context, const ::sysinfo::GetNameAndIpInfoReq& request, ::sysinfo::GetNameAndIpInfoRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetNameAndIpInfoRsp>> AsyncgetNameAndIpInfo(::grpc::ClientContext* context, const ::sysinfo::GetNameAndIpInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetNameAndIpInfoRsp>>(AsyncgetNameAndIpInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetNameAndIpInfoRsp>> PrepareAsyncgetNameAndIpInfo(::grpc::ClientContext* context, const ::sysinfo::GetNameAndIpInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetNameAndIpInfoRsp>>(PrepareAsyncgetNameAndIpInfoRaw(context, request, cq));
    }
    ::grpc::Status getDeviceInfo(::grpc::ClientContext* context, const ::sysinfo::GetDeviceInfoReq& request, ::sysinfo::GetDeviceInfoRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetDeviceInfoRsp>> AsyncgetDeviceInfo(::grpc::ClientContext* context, const ::sysinfo::GetDeviceInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetDeviceInfoRsp>>(AsyncgetDeviceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetDeviceInfoRsp>> PrepareAsyncgetDeviceInfo(::grpc::ClientContext* context, const ::sysinfo::GetDeviceInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetDeviceInfoRsp>>(PrepareAsyncgetDeviceInfoRaw(context, request, cq));
    }
    ::grpc::Status getDeviceDetail(::grpc::ClientContext* context, const ::sysinfo::GetDeviceDetailReq& request, ::sysinfo::GetDeviceDetailRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetDeviceDetailRsp>> AsyncgetDeviceDetail(::grpc::ClientContext* context, const ::sysinfo::GetDeviceDetailReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetDeviceDetailRsp>>(AsyncgetDeviceDetailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetDeviceDetailRsp>> PrepareAsyncgetDeviceDetail(::grpc::ClientContext* context, const ::sysinfo::GetDeviceDetailReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetDeviceDetailRsp>>(PrepareAsyncgetDeviceDetailRaw(context, request, cq));
    }
    ::grpc::Status getCpuUsage(::grpc::ClientContext* context, const ::sysinfo::GetCpuUsageReq& request, ::sysinfo::GetCpuUsageRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuUsageRsp>> AsyncgetCpuUsage(::grpc::ClientContext* context, const ::sysinfo::GetCpuUsageReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuUsageRsp>>(AsyncgetCpuUsageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuUsageRsp>> PrepareAsyncgetCpuUsage(::grpc::ClientContext* context, const ::sysinfo::GetCpuUsageReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuUsageRsp>>(PrepareAsyncgetCpuUsageRaw(context, request, cq));
    }
    ::grpc::Status getCpuTemp(::grpc::ClientContext* context, const ::sysinfo::GetCpuTempReq& request, ::sysinfo::GetCpuTempRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuTempRsp>> AsyncgetCpuTemp(::grpc::ClientContext* context, const ::sysinfo::GetCpuTempReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuTempRsp>>(AsyncgetCpuTempRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuTempRsp>> PrepareAsyncgetCpuTemp(::grpc::ClientContext* context, const ::sysinfo::GetCpuTempReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuTempRsp>>(PrepareAsyncgetCpuTempRaw(context, request, cq));
    }
    ::grpc::Status getMemUsage(::grpc::ClientContext* context, const ::sysinfo::GetMemUsageReq& request, ::sysinfo::GetMemUsageRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetMemUsageRsp>> AsyncgetMemUsage(::grpc::ClientContext* context, const ::sysinfo::GetMemUsageReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetMemUsageRsp>>(AsyncgetMemUsageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetMemUsageRsp>> PrepareAsyncgetMemUsage(::grpc::ClientContext* context, const ::sysinfo::GetMemUsageReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetMemUsageRsp>>(PrepareAsyncgetMemUsageRaw(context, request, cq));
    }
    ::grpc::Status getNicInfo(::grpc::ClientContext* context, const ::sysinfo::GetNicInfoReq& request, ::sysinfo::GetNicInfoRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetNicInfoRsp>> AsyncgetNicInfo(::grpc::ClientContext* context, const ::sysinfo::GetNicInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetNicInfoRsp>>(AsyncgetNicInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetNicInfoRsp>> PrepareAsyncgetNicInfo(::grpc::ClientContext* context, const ::sysinfo::GetNicInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetNicInfoRsp>>(PrepareAsyncgetNicInfoRaw(context, request, cq));
    }
    ::grpc::Status getHostName(::grpc::ClientContext* context, const ::sysinfo::GetHostNameReq& request, ::sysinfo::GetHostNameRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetHostNameRsp>> AsyncgetHostName(::grpc::ClientContext* context, const ::sysinfo::GetHostNameReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetHostNameRsp>>(AsyncgetHostNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetHostNameRsp>> PrepareAsyncgetHostName(::grpc::ClientContext* context, const ::sysinfo::GetHostNameReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetHostNameRsp>>(PrepareAsyncgetHostNameRaw(context, request, cq));
    }
    ::grpc::Status getIpInfo(::grpc::ClientContext* context, const ::sysinfo::GetIpInfoReq& request, ::sysinfo::GetIpInfoRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetIpInfoRsp>> AsyncgetIpInfo(::grpc::ClientContext* context, const ::sysinfo::GetIpInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetIpInfoRsp>>(AsyncgetIpInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetIpInfoRsp>> PrepareAsyncgetIpInfo(::grpc::ClientContext* context, const ::sysinfo::GetIpInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetIpInfoRsp>>(PrepareAsyncgetIpInfoRaw(context, request, cq));
    }
    ::grpc::Status getCpuModel(::grpc::ClientContext* context, const ::sysinfo::GetCpuModelReq& request, ::sysinfo::GetCpuModelRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuModelRsp>> AsyncgetCpuModel(::grpc::ClientContext* context, const ::sysinfo::GetCpuModelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuModelRsp>>(AsyncgetCpuModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuModelRsp>> PrepareAsyncgetCpuModel(::grpc::ClientContext* context, const ::sysinfo::GetCpuModelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuModelRsp>>(PrepareAsyncgetCpuModelRaw(context, request, cq));
    }
    ::grpc::Status getCpuCores(::grpc::ClientContext* context, const ::sysinfo::GetCpuCoresReq& request, ::sysinfo::GetCpuCoresRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuCoresRsp>> AsyncgetCpuCores(::grpc::ClientContext* context, const ::sysinfo::GetCpuCoresReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuCoresRsp>>(AsyncgetCpuCoresRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuCoresRsp>> PrepareAsyncgetCpuCores(::grpc::ClientContext* context, const ::sysinfo::GetCpuCoresReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuCoresRsp>>(PrepareAsyncgetCpuCoresRaw(context, request, cq));
    }
    ::grpc::Status getMemTotal(::grpc::ClientContext* context, const ::sysinfo::GetMemTotalReq& request, ::sysinfo::GetMemTotalRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetMemTotalRsp>> AsyncgetMemTotal(::grpc::ClientContext* context, const ::sysinfo::GetMemTotalReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetMemTotalRsp>>(AsyncgetMemTotalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetMemTotalRsp>> PrepareAsyncgetMemTotal(::grpc::ClientContext* context, const ::sysinfo::GetMemTotalReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetMemTotalRsp>>(PrepareAsyncgetMemTotalRaw(context, request, cq));
    }
    ::grpc::Status getEthCtrlInfo(::grpc::ClientContext* context, const ::sysinfo::GetEthCtrlInfoReq& request, ::sysinfo::GetEthCtrlInfoRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetEthCtrlInfoRsp>> AsyncgetEthCtrlInfo(::grpc::ClientContext* context, const ::sysinfo::GetEthCtrlInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetEthCtrlInfoRsp>>(AsyncgetEthCtrlInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetEthCtrlInfoRsp>> PrepareAsyncgetEthCtrlInfo(::grpc::ClientContext* context, const ::sysinfo::GetEthCtrlInfoReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sysinfo::GetEthCtrlInfoRsp>>(PrepareAsyncgetEthCtrlInfoRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void getNameAndIpInfo(::grpc::ClientContext* context, const ::sysinfo::GetNameAndIpInfoReq* request, ::sysinfo::GetNameAndIpInfoRsp* response, std::function<void(::grpc::Status)>) override;
      void getDeviceInfo(::grpc::ClientContext* context, const ::sysinfo::GetDeviceInfoReq* request, ::sysinfo::GetDeviceInfoRsp* response, std::function<void(::grpc::Status)>) override;
      void getDeviceDetail(::grpc::ClientContext* context, const ::sysinfo::GetDeviceDetailReq* request, ::sysinfo::GetDeviceDetailRsp* response, std::function<void(::grpc::Status)>) override;
      void getCpuUsage(::grpc::ClientContext* context, const ::sysinfo::GetCpuUsageReq* request, ::sysinfo::GetCpuUsageRsp* response, std::function<void(::grpc::Status)>) override;
      void getCpuTemp(::grpc::ClientContext* context, const ::sysinfo::GetCpuTempReq* request, ::sysinfo::GetCpuTempRsp* response, std::function<void(::grpc::Status)>) override;
      void getMemUsage(::grpc::ClientContext* context, const ::sysinfo::GetMemUsageReq* request, ::sysinfo::GetMemUsageRsp* response, std::function<void(::grpc::Status)>) override;
      void getNicInfo(::grpc::ClientContext* context, const ::sysinfo::GetNicInfoReq* request, ::sysinfo::GetNicInfoRsp* response, std::function<void(::grpc::Status)>) override;
      void getHostName(::grpc::ClientContext* context, const ::sysinfo::GetHostNameReq* request, ::sysinfo::GetHostNameRsp* response, std::function<void(::grpc::Status)>) override;
      void getIpInfo(::grpc::ClientContext* context, const ::sysinfo::GetIpInfoReq* request, ::sysinfo::GetIpInfoRsp* response, std::function<void(::grpc::Status)>) override;
      void getCpuModel(::grpc::ClientContext* context, const ::sysinfo::GetCpuModelReq* request, ::sysinfo::GetCpuModelRsp* response, std::function<void(::grpc::Status)>) override;
      void getCpuCores(::grpc::ClientContext* context, const ::sysinfo::GetCpuCoresReq* request, ::sysinfo::GetCpuCoresRsp* response, std::function<void(::grpc::Status)>) override;
      void getMemTotal(::grpc::ClientContext* context, const ::sysinfo::GetMemTotalReq* request, ::sysinfo::GetMemTotalRsp* response, std::function<void(::grpc::Status)>) override;
      void getEthCtrlInfo(::grpc::ClientContext* context, const ::sysinfo::GetEthCtrlInfoReq* request, ::sysinfo::GetEthCtrlInfoRsp* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::sysinfo::GetNameAndIpInfoRsp>* AsyncgetNameAndIpInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetNameAndIpInfoReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sysinfo::GetNameAndIpInfoRsp>* PrepareAsyncgetNameAndIpInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetNameAndIpInfoReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sysinfo::GetDeviceInfoRsp>* AsyncgetDeviceInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetDeviceInfoReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sysinfo::GetDeviceInfoRsp>* PrepareAsyncgetDeviceInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetDeviceInfoReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sysinfo::GetDeviceDetailRsp>* AsyncgetDeviceDetailRaw(::grpc::ClientContext* context, const ::sysinfo::GetDeviceDetailReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sysinfo::GetDeviceDetailRsp>* PrepareAsyncgetDeviceDetailRaw(::grpc::ClientContext* context, const ::sysinfo::GetDeviceDetailReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuUsageRsp>* AsyncgetCpuUsageRaw(::grpc::ClientContext* context, const ::sysinfo::GetCpuUsageReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuUsageRsp>* PrepareAsyncgetCpuUsageRaw(::grpc::ClientContext* context, const ::sysinfo::GetCpuUsageReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuTempRsp>* AsyncgetCpuTempRaw(::grpc::ClientContext* context, const ::sysinfo::GetCpuTempReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuTempRsp>* PrepareAsyncgetCpuTempRaw(::grpc::ClientContext* context, const ::sysinfo::GetCpuTempReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sysinfo::GetMemUsageRsp>* AsyncgetMemUsageRaw(::grpc::ClientContext* context, const ::sysinfo::GetMemUsageReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sysinfo::GetMemUsageRsp>* PrepareAsyncgetMemUsageRaw(::grpc::ClientContext* context, const ::sysinfo::GetMemUsageReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sysinfo::GetNicInfoRsp>* AsyncgetNicInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetNicInfoReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sysinfo::GetNicInfoRsp>* PrepareAsyncgetNicInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetNicInfoReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sysinfo::GetHostNameRsp>* AsyncgetHostNameRaw(::grpc::ClientContext* context, const ::sysinfo::GetHostNameReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sysinfo::GetHostNameRsp>* PrepareAsyncgetHostNameRaw(::grpc::ClientContext* context, const ::sysinfo::GetHostNameReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sysinfo::GetIpInfoRsp>* AsyncgetIpInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetIpInfoReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sysinfo::GetIpInfoRsp>* PrepareAsyncgetIpInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetIpInfoReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuModelRsp>* AsyncgetCpuModelRaw(::grpc::ClientContext* context, const ::sysinfo::GetCpuModelReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuModelRsp>* PrepareAsyncgetCpuModelRaw(::grpc::ClientContext* context, const ::sysinfo::GetCpuModelReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuCoresRsp>* AsyncgetCpuCoresRaw(::grpc::ClientContext* context, const ::sysinfo::GetCpuCoresReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuCoresRsp>* PrepareAsyncgetCpuCoresRaw(::grpc::ClientContext* context, const ::sysinfo::GetCpuCoresReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sysinfo::GetMemTotalRsp>* AsyncgetMemTotalRaw(::grpc::ClientContext* context, const ::sysinfo::GetMemTotalReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sysinfo::GetMemTotalRsp>* PrepareAsyncgetMemTotalRaw(::grpc::ClientContext* context, const ::sysinfo::GetMemTotalReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sysinfo::GetEthCtrlInfoRsp>* AsyncgetEthCtrlInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetEthCtrlInfoReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sysinfo::GetEthCtrlInfoRsp>* PrepareAsyncgetEthCtrlInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetEthCtrlInfoReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getNameAndIpInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_getDeviceInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_getDeviceDetail_;
    const ::grpc::internal::RpcMethod rpcmethod_getCpuUsage_;
    const ::grpc::internal::RpcMethod rpcmethod_getCpuTemp_;
    const ::grpc::internal::RpcMethod rpcmethod_getMemUsage_;
    const ::grpc::internal::RpcMethod rpcmethod_getNicInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_getHostName_;
    const ::grpc::internal::RpcMethod rpcmethod_getIpInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_getCpuModel_;
    const ::grpc::internal::RpcMethod rpcmethod_getCpuCores_;
    const ::grpc::internal::RpcMethod rpcmethod_getMemTotal_;
    const ::grpc::internal::RpcMethod rpcmethod_getEthCtrlInfo_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status getNameAndIpInfo(::grpc::ServerContext* context, const ::sysinfo::GetNameAndIpInfoReq* request, ::sysinfo::GetNameAndIpInfoRsp* response);
    virtual ::grpc::Status getDeviceInfo(::grpc::ServerContext* context, const ::sysinfo::GetDeviceInfoReq* request, ::sysinfo::GetDeviceInfoRsp* response);
    virtual ::grpc::Status getDeviceDetail(::grpc::ServerContext* context, const ::sysinfo::GetDeviceDetailReq* request, ::sysinfo::GetDeviceDetailRsp* response);
    virtual ::grpc::Status getCpuUsage(::grpc::ServerContext* context, const ::sysinfo::GetCpuUsageReq* request, ::sysinfo::GetCpuUsageRsp* response);
    virtual ::grpc::Status getCpuTemp(::grpc::ServerContext* context, const ::sysinfo::GetCpuTempReq* request, ::sysinfo::GetCpuTempRsp* response);
    virtual ::grpc::Status getMemUsage(::grpc::ServerContext* context, const ::sysinfo::GetMemUsageReq* request, ::sysinfo::GetMemUsageRsp* response);
    virtual ::grpc::Status getNicInfo(::grpc::ServerContext* context, const ::sysinfo::GetNicInfoReq* request, ::sysinfo::GetNicInfoRsp* response);
    virtual ::grpc::Status getHostName(::grpc::ServerContext* context, const ::sysinfo::GetHostNameReq* request, ::sysinfo::GetHostNameRsp* response);
    virtual ::grpc::Status getIpInfo(::grpc::ServerContext* context, const ::sysinfo::GetIpInfoReq* request, ::sysinfo::GetIpInfoRsp* response);
    virtual ::grpc::Status getCpuModel(::grpc::ServerContext* context, const ::sysinfo::GetCpuModelReq* request, ::sysinfo::GetCpuModelRsp* response);
    virtual ::grpc::Status getCpuCores(::grpc::ServerContext* context, const ::sysinfo::GetCpuCoresReq* request, ::sysinfo::GetCpuCoresRsp* response);
    virtual ::grpc::Status getMemTotal(::grpc::ServerContext* context, const ::sysinfo::GetMemTotalReq* request, ::sysinfo::GetMemTotalRsp* response);
    virtual ::grpc::Status getEthCtrlInfo(::grpc::ServerContext* context, const ::sysinfo::GetEthCtrlInfoReq* request, ::sysinfo::GetEthCtrlInfoRsp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getNameAndIpInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getNameAndIpInfo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getNameAndIpInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNameAndIpInfo(::grpc::ServerContext* context, const ::sysinfo::GetNameAndIpInfoReq* request, ::sysinfo::GetNameAndIpInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNameAndIpInfo(::grpc::ServerContext* context, ::sysinfo::GetNameAndIpInfoReq* request, ::grpc::ServerAsyncResponseWriter< ::sysinfo::GetNameAndIpInfoRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getDeviceInfo() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_getDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDeviceInfo(::grpc::ServerContext* context, const ::sysinfo::GetDeviceInfoReq* request, ::sysinfo::GetDeviceInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDeviceInfo(::grpc::ServerContext* context, ::sysinfo::GetDeviceInfoReq* request, ::grpc::ServerAsyncResponseWriter< ::sysinfo::GetDeviceInfoRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDeviceDetail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getDeviceDetail() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getDeviceDetail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDeviceDetail(::grpc::ServerContext* context, const ::sysinfo::GetDeviceDetailReq* request, ::sysinfo::GetDeviceDetailRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDeviceDetail(::grpc::ServerContext* context, ::sysinfo::GetDeviceDetailReq* request, ::grpc::ServerAsyncResponseWriter< ::sysinfo::GetDeviceDetailRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getCpuUsage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getCpuUsage() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getCpuUsage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCpuUsage(::grpc::ServerContext* context, const ::sysinfo::GetCpuUsageReq* request, ::sysinfo::GetCpuUsageRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCpuUsage(::grpc::ServerContext* context, ::sysinfo::GetCpuUsageReq* request, ::grpc::ServerAsyncResponseWriter< ::sysinfo::GetCpuUsageRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getCpuTemp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getCpuTemp() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_getCpuTemp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCpuTemp(::grpc::ServerContext* context, const ::sysinfo::GetCpuTempReq* request, ::sysinfo::GetCpuTempRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCpuTemp(::grpc::ServerContext* context, ::sysinfo::GetCpuTempReq* request, ::grpc::ServerAsyncResponseWriter< ::sysinfo::GetCpuTempRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getMemUsage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getMemUsage() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_getMemUsage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMemUsage(::grpc::ServerContext* context, const ::sysinfo::GetMemUsageReq* request, ::sysinfo::GetMemUsageRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMemUsage(::grpc::ServerContext* context, ::sysinfo::GetMemUsageReq* request, ::grpc::ServerAsyncResponseWriter< ::sysinfo::GetMemUsageRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getNicInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getNicInfo() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_getNicInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNicInfo(::grpc::ServerContext* context, const ::sysinfo::GetNicInfoReq* request, ::sysinfo::GetNicInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNicInfo(::grpc::ServerContext* context, ::sysinfo::GetNicInfoReq* request, ::grpc::ServerAsyncResponseWriter< ::sysinfo::GetNicInfoRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getHostName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getHostName() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_getHostName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHostName(::grpc::ServerContext* context, const ::sysinfo::GetHostNameReq* request, ::sysinfo::GetHostNameRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetHostName(::grpc::ServerContext* context, ::sysinfo::GetHostNameReq* request, ::grpc::ServerAsyncResponseWriter< ::sysinfo::GetHostNameRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getIpInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getIpInfo() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_getIpInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getIpInfo(::grpc::ServerContext* context, const ::sysinfo::GetIpInfoReq* request, ::sysinfo::GetIpInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetIpInfo(::grpc::ServerContext* context, ::sysinfo::GetIpInfoReq* request, ::grpc::ServerAsyncResponseWriter< ::sysinfo::GetIpInfoRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getCpuModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getCpuModel() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_getCpuModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCpuModel(::grpc::ServerContext* context, const ::sysinfo::GetCpuModelReq* request, ::sysinfo::GetCpuModelRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCpuModel(::grpc::ServerContext* context, ::sysinfo::GetCpuModelReq* request, ::grpc::ServerAsyncResponseWriter< ::sysinfo::GetCpuModelRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getCpuCores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getCpuCores() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_getCpuCores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCpuCores(::grpc::ServerContext* context, const ::sysinfo::GetCpuCoresReq* request, ::sysinfo::GetCpuCoresRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCpuCores(::grpc::ServerContext* context, ::sysinfo::GetCpuCoresReq* request, ::grpc::ServerAsyncResponseWriter< ::sysinfo::GetCpuCoresRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getMemTotal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getMemTotal() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_getMemTotal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMemTotal(::grpc::ServerContext* context, const ::sysinfo::GetMemTotalReq* request, ::sysinfo::GetMemTotalRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMemTotal(::grpc::ServerContext* context, ::sysinfo::GetMemTotalReq* request, ::grpc::ServerAsyncResponseWriter< ::sysinfo::GetMemTotalRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getEthCtrlInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getEthCtrlInfo() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_getEthCtrlInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEthCtrlInfo(::grpc::ServerContext* context, const ::sysinfo::GetEthCtrlInfoReq* request, ::sysinfo::GetEthCtrlInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetEthCtrlInfo(::grpc::ServerContext* context, ::sysinfo::GetEthCtrlInfoReq* request, ::grpc::ServerAsyncResponseWriter< ::sysinfo::GetEthCtrlInfoRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getNameAndIpInfo<WithAsyncMethod_getDeviceInfo<WithAsyncMethod_getDeviceDetail<WithAsyncMethod_getCpuUsage<WithAsyncMethod_getCpuTemp<WithAsyncMethod_getMemUsage<WithAsyncMethod_getNicInfo<WithAsyncMethod_getHostName<WithAsyncMethod_getIpInfo<WithAsyncMethod_getCpuModel<WithAsyncMethod_getCpuCores<WithAsyncMethod_getMemTotal<WithAsyncMethod_getEthCtrlInfo<Service > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getNameAndIpInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getNameAndIpInfo() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_getNameAndIpInfo<BaseClass>, ::sysinfo::GetNameAndIpInfoReq, ::sysinfo::GetNameAndIpInfoRsp>(
          [this](::grpc::ServerContext* context,
                 const ::sysinfo::GetNameAndIpInfoReq* request,
                 ::sysinfo::GetNameAndIpInfoRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getNameAndIpInfo(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_getNameAndIpInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNameAndIpInfo(::grpc::ServerContext* context, const ::sysinfo::GetNameAndIpInfoReq* request, ::sysinfo::GetNameAndIpInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getNameAndIpInfo(::grpc::ServerContext* context, const ::sysinfo::GetNameAndIpInfoReq* request, ::sysinfo::GetNameAndIpInfoRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getDeviceInfo() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_getDeviceInfo<BaseClass>, ::sysinfo::GetDeviceInfoReq, ::sysinfo::GetDeviceInfoRsp>(
          [this](::grpc::ServerContext* context,
                 const ::sysinfo::GetDeviceInfoReq* request,
                 ::sysinfo::GetDeviceInfoRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getDeviceInfo(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_getDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDeviceInfo(::grpc::ServerContext* context, const ::sysinfo::GetDeviceInfoReq* request, ::sysinfo::GetDeviceInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getDeviceInfo(::grpc::ServerContext* context, const ::sysinfo::GetDeviceInfoReq* request, ::sysinfo::GetDeviceInfoRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getDeviceDetail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getDeviceDetail() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_getDeviceDetail<BaseClass>, ::sysinfo::GetDeviceDetailReq, ::sysinfo::GetDeviceDetailRsp>(
          [this](::grpc::ServerContext* context,
                 const ::sysinfo::GetDeviceDetailReq* request,
                 ::sysinfo::GetDeviceDetailRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getDeviceDetail(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_getDeviceDetail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDeviceDetail(::grpc::ServerContext* context, const ::sysinfo::GetDeviceDetailReq* request, ::sysinfo::GetDeviceDetailRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getDeviceDetail(::grpc::ServerContext* context, const ::sysinfo::GetDeviceDetailReq* request, ::sysinfo::GetDeviceDetailRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getCpuUsage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getCpuUsage() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_getCpuUsage<BaseClass>, ::sysinfo::GetCpuUsageReq, ::sysinfo::GetCpuUsageRsp>(
          [this](::grpc::ServerContext* context,
                 const ::sysinfo::GetCpuUsageReq* request,
                 ::sysinfo::GetCpuUsageRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getCpuUsage(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_getCpuUsage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCpuUsage(::grpc::ServerContext* context, const ::sysinfo::GetCpuUsageReq* request, ::sysinfo::GetCpuUsageRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getCpuUsage(::grpc::ServerContext* context, const ::sysinfo::GetCpuUsageReq* request, ::sysinfo::GetCpuUsageRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getCpuTemp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getCpuTemp() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_getCpuTemp<BaseClass>, ::sysinfo::GetCpuTempReq, ::sysinfo::GetCpuTempRsp>(
          [this](::grpc::ServerContext* context,
                 const ::sysinfo::GetCpuTempReq* request,
                 ::sysinfo::GetCpuTempRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getCpuTemp(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_getCpuTemp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCpuTemp(::grpc::ServerContext* context, const ::sysinfo::GetCpuTempReq* request, ::sysinfo::GetCpuTempRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getCpuTemp(::grpc::ServerContext* context, const ::sysinfo::GetCpuTempReq* request, ::sysinfo::GetCpuTempRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getMemUsage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getMemUsage() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_getMemUsage<BaseClass>, ::sysinfo::GetMemUsageReq, ::sysinfo::GetMemUsageRsp>(
          [this](::grpc::ServerContext* context,
                 const ::sysinfo::GetMemUsageReq* request,
                 ::sysinfo::GetMemUsageRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getMemUsage(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_getMemUsage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMemUsage(::grpc::ServerContext* context, const ::sysinfo::GetMemUsageReq* request, ::sysinfo::GetMemUsageRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getMemUsage(::grpc::ServerContext* context, const ::sysinfo::GetMemUsageReq* request, ::sysinfo::GetMemUsageRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getNicInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getNicInfo() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_getNicInfo<BaseClass>, ::sysinfo::GetNicInfoReq, ::sysinfo::GetNicInfoRsp>(
          [this](::grpc::ServerContext* context,
                 const ::sysinfo::GetNicInfoReq* request,
                 ::sysinfo::GetNicInfoRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getNicInfo(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_getNicInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNicInfo(::grpc::ServerContext* context, const ::sysinfo::GetNicInfoReq* request, ::sysinfo::GetNicInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getNicInfo(::grpc::ServerContext* context, const ::sysinfo::GetNicInfoReq* request, ::sysinfo::GetNicInfoRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getHostName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getHostName() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_getHostName<BaseClass>, ::sysinfo::GetHostNameReq, ::sysinfo::GetHostNameRsp>(
          [this](::grpc::ServerContext* context,
                 const ::sysinfo::GetHostNameReq* request,
                 ::sysinfo::GetHostNameRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getHostName(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_getHostName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHostName(::grpc::ServerContext* context, const ::sysinfo::GetHostNameReq* request, ::sysinfo::GetHostNameRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getHostName(::grpc::ServerContext* context, const ::sysinfo::GetHostNameReq* request, ::sysinfo::GetHostNameRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getIpInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getIpInfo() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_getIpInfo<BaseClass>, ::sysinfo::GetIpInfoReq, ::sysinfo::GetIpInfoRsp>(
          [this](::grpc::ServerContext* context,
                 const ::sysinfo::GetIpInfoReq* request,
                 ::sysinfo::GetIpInfoRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getIpInfo(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_getIpInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getIpInfo(::grpc::ServerContext* context, const ::sysinfo::GetIpInfoReq* request, ::sysinfo::GetIpInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getIpInfo(::grpc::ServerContext* context, const ::sysinfo::GetIpInfoReq* request, ::sysinfo::GetIpInfoRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getCpuModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getCpuModel() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_getCpuModel<BaseClass>, ::sysinfo::GetCpuModelReq, ::sysinfo::GetCpuModelRsp>(
          [this](::grpc::ServerContext* context,
                 const ::sysinfo::GetCpuModelReq* request,
                 ::sysinfo::GetCpuModelRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getCpuModel(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_getCpuModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCpuModel(::grpc::ServerContext* context, const ::sysinfo::GetCpuModelReq* request, ::sysinfo::GetCpuModelRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getCpuModel(::grpc::ServerContext* context, const ::sysinfo::GetCpuModelReq* request, ::sysinfo::GetCpuModelRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getCpuCores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getCpuCores() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_getCpuCores<BaseClass>, ::sysinfo::GetCpuCoresReq, ::sysinfo::GetCpuCoresRsp>(
          [this](::grpc::ServerContext* context,
                 const ::sysinfo::GetCpuCoresReq* request,
                 ::sysinfo::GetCpuCoresRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getCpuCores(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_getCpuCores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCpuCores(::grpc::ServerContext* context, const ::sysinfo::GetCpuCoresReq* request, ::sysinfo::GetCpuCoresRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getCpuCores(::grpc::ServerContext* context, const ::sysinfo::GetCpuCoresReq* request, ::sysinfo::GetCpuCoresRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getMemTotal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getMemTotal() {
      ::grpc::Service::experimental().MarkMethodCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_getMemTotal<BaseClass>, ::sysinfo::GetMemTotalReq, ::sysinfo::GetMemTotalRsp>(
          [this](::grpc::ServerContext* context,
                 const ::sysinfo::GetMemTotalReq* request,
                 ::sysinfo::GetMemTotalRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getMemTotal(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_getMemTotal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMemTotal(::grpc::ServerContext* context, const ::sysinfo::GetMemTotalReq* request, ::sysinfo::GetMemTotalRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getMemTotal(::grpc::ServerContext* context, const ::sysinfo::GetMemTotalReq* request, ::sysinfo::GetMemTotalRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getEthCtrlInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getEthCtrlInfo() {
      ::grpc::Service::experimental().MarkMethodCallback(12,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_getEthCtrlInfo<BaseClass>, ::sysinfo::GetEthCtrlInfoReq, ::sysinfo::GetEthCtrlInfoRsp>(
          [this](::grpc::ServerContext* context,
                 const ::sysinfo::GetEthCtrlInfoReq* request,
                 ::sysinfo::GetEthCtrlInfoRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getEthCtrlInfo(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_getEthCtrlInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEthCtrlInfo(::grpc::ServerContext* context, const ::sysinfo::GetEthCtrlInfoReq* request, ::sysinfo::GetEthCtrlInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getEthCtrlInfo(::grpc::ServerContext* context, const ::sysinfo::GetEthCtrlInfoReq* request, ::sysinfo::GetEthCtrlInfoRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_getNameAndIpInfo<ExperimentalWithCallbackMethod_getDeviceInfo<ExperimentalWithCallbackMethod_getDeviceDetail<ExperimentalWithCallbackMethod_getCpuUsage<ExperimentalWithCallbackMethod_getCpuTemp<ExperimentalWithCallbackMethod_getMemUsage<ExperimentalWithCallbackMethod_getNicInfo<ExperimentalWithCallbackMethod_getHostName<ExperimentalWithCallbackMethod_getIpInfo<ExperimentalWithCallbackMethod_getCpuModel<ExperimentalWithCallbackMethod_getCpuCores<ExperimentalWithCallbackMethod_getMemTotal<ExperimentalWithCallbackMethod_getEthCtrlInfo<Service > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getNameAndIpInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getNameAndIpInfo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getNameAndIpInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNameAndIpInfo(::grpc::ServerContext* context, const ::sysinfo::GetNameAndIpInfoReq* request, ::sysinfo::GetNameAndIpInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getDeviceInfo() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_getDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDeviceInfo(::grpc::ServerContext* context, const ::sysinfo::GetDeviceInfoReq* request, ::sysinfo::GetDeviceInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDeviceDetail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getDeviceDetail() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getDeviceDetail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDeviceDetail(::grpc::ServerContext* context, const ::sysinfo::GetDeviceDetailReq* request, ::sysinfo::GetDeviceDetailRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getCpuUsage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getCpuUsage() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getCpuUsage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCpuUsage(::grpc::ServerContext* context, const ::sysinfo::GetCpuUsageReq* request, ::sysinfo::GetCpuUsageRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getCpuTemp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getCpuTemp() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_getCpuTemp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCpuTemp(::grpc::ServerContext* context, const ::sysinfo::GetCpuTempReq* request, ::sysinfo::GetCpuTempRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getMemUsage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getMemUsage() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_getMemUsage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMemUsage(::grpc::ServerContext* context, const ::sysinfo::GetMemUsageReq* request, ::sysinfo::GetMemUsageRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getNicInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getNicInfo() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_getNicInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNicInfo(::grpc::ServerContext* context, const ::sysinfo::GetNicInfoReq* request, ::sysinfo::GetNicInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getHostName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getHostName() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_getHostName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHostName(::grpc::ServerContext* context, const ::sysinfo::GetHostNameReq* request, ::sysinfo::GetHostNameRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getIpInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getIpInfo() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_getIpInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getIpInfo(::grpc::ServerContext* context, const ::sysinfo::GetIpInfoReq* request, ::sysinfo::GetIpInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getCpuModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getCpuModel() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_getCpuModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCpuModel(::grpc::ServerContext* context, const ::sysinfo::GetCpuModelReq* request, ::sysinfo::GetCpuModelRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getCpuCores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getCpuCores() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_getCpuCores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCpuCores(::grpc::ServerContext* context, const ::sysinfo::GetCpuCoresReq* request, ::sysinfo::GetCpuCoresRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getMemTotal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getMemTotal() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_getMemTotal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMemTotal(::grpc::ServerContext* context, const ::sysinfo::GetMemTotalReq* request, ::sysinfo::GetMemTotalRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getEthCtrlInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getEthCtrlInfo() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_getEthCtrlInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEthCtrlInfo(::grpc::ServerContext* context, const ::sysinfo::GetEthCtrlInfoReq* request, ::sysinfo::GetEthCtrlInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getNameAndIpInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getNameAndIpInfo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getNameAndIpInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNameAndIpInfo(::grpc::ServerContext* context, const ::sysinfo::GetNameAndIpInfoReq* request, ::sysinfo::GetNameAndIpInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNameAndIpInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getDeviceInfo() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_getDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDeviceInfo(::grpc::ServerContext* context, const ::sysinfo::GetDeviceInfoReq* request, ::sysinfo::GetDeviceInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDeviceInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDeviceDetail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getDeviceDetail() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getDeviceDetail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDeviceDetail(::grpc::ServerContext* context, const ::sysinfo::GetDeviceDetailReq* request, ::sysinfo::GetDeviceDetailRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDeviceDetail(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getCpuUsage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getCpuUsage() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getCpuUsage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCpuUsage(::grpc::ServerContext* context, const ::sysinfo::GetCpuUsageReq* request, ::sysinfo::GetCpuUsageRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCpuUsage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getCpuTemp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getCpuTemp() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_getCpuTemp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCpuTemp(::grpc::ServerContext* context, const ::sysinfo::GetCpuTempReq* request, ::sysinfo::GetCpuTempRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCpuTemp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getMemUsage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getMemUsage() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_getMemUsage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMemUsage(::grpc::ServerContext* context, const ::sysinfo::GetMemUsageReq* request, ::sysinfo::GetMemUsageRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMemUsage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getNicInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getNicInfo() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_getNicInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNicInfo(::grpc::ServerContext* context, const ::sysinfo::GetNicInfoReq* request, ::sysinfo::GetNicInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNicInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getHostName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getHostName() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_getHostName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHostName(::grpc::ServerContext* context, const ::sysinfo::GetHostNameReq* request, ::sysinfo::GetHostNameRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetHostName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getIpInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getIpInfo() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_getIpInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getIpInfo(::grpc::ServerContext* context, const ::sysinfo::GetIpInfoReq* request, ::sysinfo::GetIpInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetIpInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getCpuModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getCpuModel() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_getCpuModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCpuModel(::grpc::ServerContext* context, const ::sysinfo::GetCpuModelReq* request, ::sysinfo::GetCpuModelRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCpuModel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getCpuCores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getCpuCores() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_getCpuCores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCpuCores(::grpc::ServerContext* context, const ::sysinfo::GetCpuCoresReq* request, ::sysinfo::GetCpuCoresRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCpuCores(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getMemTotal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getMemTotal() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_getMemTotal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMemTotal(::grpc::ServerContext* context, const ::sysinfo::GetMemTotalReq* request, ::sysinfo::GetMemTotalRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMemTotal(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getEthCtrlInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getEthCtrlInfo() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_getEthCtrlInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEthCtrlInfo(::grpc::ServerContext* context, const ::sysinfo::GetEthCtrlInfoReq* request, ::sysinfo::GetEthCtrlInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetEthCtrlInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getNameAndIpInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getNameAndIpInfo() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_getNameAndIpInfo<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getNameAndIpInfo(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_getNameAndIpInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNameAndIpInfo(::grpc::ServerContext* context, const ::sysinfo::GetNameAndIpInfoReq* request, ::sysinfo::GetNameAndIpInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getNameAndIpInfo(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getDeviceInfo() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_getDeviceInfo<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getDeviceInfo(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_getDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDeviceInfo(::grpc::ServerContext* context, const ::sysinfo::GetDeviceInfoReq* request, ::sysinfo::GetDeviceInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getDeviceInfo(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getDeviceDetail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getDeviceDetail() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_getDeviceDetail<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getDeviceDetail(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_getDeviceDetail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDeviceDetail(::grpc::ServerContext* context, const ::sysinfo::GetDeviceDetailReq* request, ::sysinfo::GetDeviceDetailRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getDeviceDetail(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getCpuUsage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getCpuUsage() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_getCpuUsage<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getCpuUsage(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_getCpuUsage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCpuUsage(::grpc::ServerContext* context, const ::sysinfo::GetCpuUsageReq* request, ::sysinfo::GetCpuUsageRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getCpuUsage(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getCpuTemp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getCpuTemp() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_getCpuTemp<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getCpuTemp(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_getCpuTemp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCpuTemp(::grpc::ServerContext* context, const ::sysinfo::GetCpuTempReq* request, ::sysinfo::GetCpuTempRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getCpuTemp(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getMemUsage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getMemUsage() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_getMemUsage<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getMemUsage(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_getMemUsage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMemUsage(::grpc::ServerContext* context, const ::sysinfo::GetMemUsageReq* request, ::sysinfo::GetMemUsageRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getMemUsage(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getNicInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getNicInfo() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_getNicInfo<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getNicInfo(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_getNicInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNicInfo(::grpc::ServerContext* context, const ::sysinfo::GetNicInfoReq* request, ::sysinfo::GetNicInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getNicInfo(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getHostName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getHostName() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_getHostName<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getHostName(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_getHostName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHostName(::grpc::ServerContext* context, const ::sysinfo::GetHostNameReq* request, ::sysinfo::GetHostNameRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getHostName(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getIpInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getIpInfo() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_getIpInfo<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getIpInfo(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_getIpInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getIpInfo(::grpc::ServerContext* context, const ::sysinfo::GetIpInfoReq* request, ::sysinfo::GetIpInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getIpInfo(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getCpuModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getCpuModel() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_getCpuModel<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getCpuModel(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_getCpuModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCpuModel(::grpc::ServerContext* context, const ::sysinfo::GetCpuModelReq* request, ::sysinfo::GetCpuModelRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getCpuModel(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getCpuCores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getCpuCores() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_getCpuCores<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getCpuCores(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_getCpuCores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCpuCores(::grpc::ServerContext* context, const ::sysinfo::GetCpuCoresReq* request, ::sysinfo::GetCpuCoresRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getCpuCores(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getMemTotal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getMemTotal() {
      ::grpc::Service::experimental().MarkMethodRawCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_getMemTotal<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getMemTotal(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_getMemTotal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMemTotal(::grpc::ServerContext* context, const ::sysinfo::GetMemTotalReq* request, ::sysinfo::GetMemTotalRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getMemTotal(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getEthCtrlInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getEthCtrlInfo() {
      ::grpc::Service::experimental().MarkMethodRawCallback(12,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_getEthCtrlInfo<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getEthCtrlInfo(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_getEthCtrlInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEthCtrlInfo(::grpc::ServerContext* context, const ::sysinfo::GetEthCtrlInfoReq* request, ::sysinfo::GetEthCtrlInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getEthCtrlInfo(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getNameAndIpInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getNameAndIpInfo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::sysinfo::GetNameAndIpInfoReq, ::sysinfo::GetNameAndIpInfoRsp>(std::bind(&WithStreamedUnaryMethod_getNameAndIpInfo<BaseClass>::StreamedgetNameAndIpInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getNameAndIpInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getNameAndIpInfo(::grpc::ServerContext* context, const ::sysinfo::GetNameAndIpInfoReq* request, ::sysinfo::GetNameAndIpInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetNameAndIpInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sysinfo::GetNameAndIpInfoReq,::sysinfo::GetNameAndIpInfoRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getDeviceInfo() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::sysinfo::GetDeviceInfoReq, ::sysinfo::GetDeviceInfoRsp>(std::bind(&WithStreamedUnaryMethod_getDeviceInfo<BaseClass>::StreamedgetDeviceInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDeviceInfo(::grpc::ServerContext* context, const ::sysinfo::GetDeviceInfoReq* request, ::sysinfo::GetDeviceInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDeviceInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sysinfo::GetDeviceInfoReq,::sysinfo::GetDeviceInfoRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDeviceDetail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getDeviceDetail() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::sysinfo::GetDeviceDetailReq, ::sysinfo::GetDeviceDetailRsp>(std::bind(&WithStreamedUnaryMethod_getDeviceDetail<BaseClass>::StreamedgetDeviceDetail, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getDeviceDetail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDeviceDetail(::grpc::ServerContext* context, const ::sysinfo::GetDeviceDetailReq* request, ::sysinfo::GetDeviceDetailRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDeviceDetail(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sysinfo::GetDeviceDetailReq,::sysinfo::GetDeviceDetailRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getCpuUsage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getCpuUsage() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::sysinfo::GetCpuUsageReq, ::sysinfo::GetCpuUsageRsp>(std::bind(&WithStreamedUnaryMethod_getCpuUsage<BaseClass>::StreamedgetCpuUsage, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getCpuUsage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getCpuUsage(::grpc::ServerContext* context, const ::sysinfo::GetCpuUsageReq* request, ::sysinfo::GetCpuUsageRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetCpuUsage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sysinfo::GetCpuUsageReq,::sysinfo::GetCpuUsageRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getCpuTemp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getCpuTemp() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::sysinfo::GetCpuTempReq, ::sysinfo::GetCpuTempRsp>(std::bind(&WithStreamedUnaryMethod_getCpuTemp<BaseClass>::StreamedgetCpuTemp, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getCpuTemp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getCpuTemp(::grpc::ServerContext* context, const ::sysinfo::GetCpuTempReq* request, ::sysinfo::GetCpuTempRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetCpuTemp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sysinfo::GetCpuTempReq,::sysinfo::GetCpuTempRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getMemUsage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getMemUsage() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::sysinfo::GetMemUsageReq, ::sysinfo::GetMemUsageRsp>(std::bind(&WithStreamedUnaryMethod_getMemUsage<BaseClass>::StreamedgetMemUsage, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getMemUsage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getMemUsage(::grpc::ServerContext* context, const ::sysinfo::GetMemUsageReq* request, ::sysinfo::GetMemUsageRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetMemUsage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sysinfo::GetMemUsageReq,::sysinfo::GetMemUsageRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getNicInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getNicInfo() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::sysinfo::GetNicInfoReq, ::sysinfo::GetNicInfoRsp>(std::bind(&WithStreamedUnaryMethod_getNicInfo<BaseClass>::StreamedgetNicInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getNicInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getNicInfo(::grpc::ServerContext* context, const ::sysinfo::GetNicInfoReq* request, ::sysinfo::GetNicInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetNicInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sysinfo::GetNicInfoReq,::sysinfo::GetNicInfoRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getHostName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getHostName() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::sysinfo::GetHostNameReq, ::sysinfo::GetHostNameRsp>(std::bind(&WithStreamedUnaryMethod_getHostName<BaseClass>::StreamedgetHostName, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getHostName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getHostName(::grpc::ServerContext* context, const ::sysinfo::GetHostNameReq* request, ::sysinfo::GetHostNameRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetHostName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sysinfo::GetHostNameReq,::sysinfo::GetHostNameRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getIpInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getIpInfo() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::sysinfo::GetIpInfoReq, ::sysinfo::GetIpInfoRsp>(std::bind(&WithStreamedUnaryMethod_getIpInfo<BaseClass>::StreamedgetIpInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getIpInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getIpInfo(::grpc::ServerContext* context, const ::sysinfo::GetIpInfoReq* request, ::sysinfo::GetIpInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetIpInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sysinfo::GetIpInfoReq,::sysinfo::GetIpInfoRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getCpuModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getCpuModel() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::sysinfo::GetCpuModelReq, ::sysinfo::GetCpuModelRsp>(std::bind(&WithStreamedUnaryMethod_getCpuModel<BaseClass>::StreamedgetCpuModel, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getCpuModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getCpuModel(::grpc::ServerContext* context, const ::sysinfo::GetCpuModelReq* request, ::sysinfo::GetCpuModelRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetCpuModel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sysinfo::GetCpuModelReq,::sysinfo::GetCpuModelRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getCpuCores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getCpuCores() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::sysinfo::GetCpuCoresReq, ::sysinfo::GetCpuCoresRsp>(std::bind(&WithStreamedUnaryMethod_getCpuCores<BaseClass>::StreamedgetCpuCores, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getCpuCores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getCpuCores(::grpc::ServerContext* context, const ::sysinfo::GetCpuCoresReq* request, ::sysinfo::GetCpuCoresRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetCpuCores(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sysinfo::GetCpuCoresReq,::sysinfo::GetCpuCoresRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getMemTotal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getMemTotal() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::sysinfo::GetMemTotalReq, ::sysinfo::GetMemTotalRsp>(std::bind(&WithStreamedUnaryMethod_getMemTotal<BaseClass>::StreamedgetMemTotal, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getMemTotal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getMemTotal(::grpc::ServerContext* context, const ::sysinfo::GetMemTotalReq* request, ::sysinfo::GetMemTotalRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetMemTotal(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sysinfo::GetMemTotalReq,::sysinfo::GetMemTotalRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getEthCtrlInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getEthCtrlInfo() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::sysinfo::GetEthCtrlInfoReq, ::sysinfo::GetEthCtrlInfoRsp>(std::bind(&WithStreamedUnaryMethod_getEthCtrlInfo<BaseClass>::StreamedgetEthCtrlInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getEthCtrlInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getEthCtrlInfo(::grpc::ServerContext* context, const ::sysinfo::GetEthCtrlInfoReq* request, ::sysinfo::GetEthCtrlInfoRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetEthCtrlInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sysinfo::GetEthCtrlInfoReq,::sysinfo::GetEthCtrlInfoRsp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getNameAndIpInfo<WithStreamedUnaryMethod_getDeviceInfo<WithStreamedUnaryMethod_getDeviceDetail<WithStreamedUnaryMethod_getCpuUsage<WithStreamedUnaryMethod_getCpuTemp<WithStreamedUnaryMethod_getMemUsage<WithStreamedUnaryMethod_getNicInfo<WithStreamedUnaryMethod_getHostName<WithStreamedUnaryMethod_getIpInfo<WithStreamedUnaryMethod_getCpuModel<WithStreamedUnaryMethod_getCpuCores<WithStreamedUnaryMethod_getMemTotal<WithStreamedUnaryMethod_getEthCtrlInfo<Service > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_getNameAndIpInfo<WithStreamedUnaryMethod_getDeviceInfo<WithStreamedUnaryMethod_getDeviceDetail<WithStreamedUnaryMethod_getCpuUsage<WithStreamedUnaryMethod_getCpuTemp<WithStreamedUnaryMethod_getMemUsage<WithStreamedUnaryMethod_getNicInfo<WithStreamedUnaryMethod_getHostName<WithStreamedUnaryMethod_getIpInfo<WithStreamedUnaryMethod_getCpuModel<WithStreamedUnaryMethod_getCpuCores<WithStreamedUnaryMethod_getMemTotal<WithStreamedUnaryMethod_getEthCtrlInfo<Service > > > > > > > > > > > > > StreamedService;
};

}  // namespace sysinfo


#endif  // GRPC_sys_2dinfo_2eproto__INCLUDED
