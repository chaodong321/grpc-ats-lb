// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ralt-service.proto
#ifndef GRPC_ralt_2dservice_2eproto__INCLUDED
#define GRPC_ralt_2dservice_2eproto__INCLUDED

#include "ralt-service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace raltservice {

class RaltService final {
 public:
  static constexpr char const* service_full_name() {
    return "raltservice.RaltService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // statistics
    virtual ::grpc::Status getRaltStats(::grpc::ClientContext* context, const ::raltservice::GetRaltStatsReq& request, ::raltservice::GetRaltStatsRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetRaltStatsRsp>> AsyncgetRaltStats(::grpc::ClientContext* context, const ::raltservice::GetRaltStatsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetRaltStatsRsp>>(AsyncgetRaltStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetRaltStatsRsp>> PrepareAsyncgetRaltStats(::grpc::ClientContext* context, const ::raltservice::GetRaltStatsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetRaltStatsRsp>>(PrepareAsyncgetRaltStatsRaw(context, request, cq));
    }
    virtual ::grpc::Status getStatsField(::grpc::ClientContext* context, const ::raltservice::GetStatsFieldReq& request, ::raltservice::GetStatsFieldRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetStatsFieldRsp>> AsyncgetStatsField(::grpc::ClientContext* context, const ::raltservice::GetStatsFieldReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetStatsFieldRsp>>(AsyncgetStatsFieldRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetStatsFieldRsp>> PrepareAsyncgetStatsField(::grpc::ClientContext* context, const ::raltservice::GetStatsFieldReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetStatsFieldRsp>>(PrepareAsyncgetStatsFieldRaw(context, request, cq));
    }
    virtual ::grpc::Status getHomePageData(::grpc::ClientContext* context, const ::raltservice::HomePageReq& request, ::raltservice::HomePageRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::HomePageRsp>> AsyncgetHomePageData(::grpc::ClientContext* context, const ::raltservice::HomePageReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::HomePageRsp>>(AsyncgetHomePageDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::HomePageRsp>> PrepareAsyncgetHomePageData(::grpc::ClientContext* context, const ::raltservice::HomePageReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::HomePageRsp>>(PrepareAsyncgetHomePageDataRaw(context, request, cq));
    }
    // cache
    virtual ::grpc::Status showCacheData(::grpc::ClientContext* context, const ::raltservice::CacheLookUpReq& request, ::raltservice::CacheResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::CacheResult>> AsyncshowCacheData(::grpc::ClientContext* context, const ::raltservice::CacheLookUpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::CacheResult>>(AsyncshowCacheDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::CacheResult>> PrepareAsyncshowCacheData(::grpc::ClientContext* context, const ::raltservice::CacheLookUpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::CacheResult>>(PrepareAsyncshowCacheDataRaw(context, request, cq));
    }
    // flow
    virtual ::grpc::Status showFlowStatData(::grpc::ClientContext* context, const ::raltservice::FlowStatLookUpReq& request, ::raltservice::FlowResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::FlowResult>> AsyncshowFlowStatData(::grpc::ClientContext* context, const ::raltservice::FlowStatLookUpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::FlowResult>>(AsyncshowFlowStatDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::FlowResult>> PrepareAsyncshowFlowStatData(::grpc::ClientContext* context, const ::raltservice::FlowStatLookUpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::FlowResult>>(PrepareAsyncshowFlowStatDataRaw(context, request, cq));
    }
    // logs
    virtual ::grpc::Status showLogInfoData(::grpc::ClientContext* context, const ::raltservice::LogInfoLookUpReq& request, ::raltservice::LogResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::LogResult>> AsyncshowLogInfoData(::grpc::ClientContext* context, const ::raltservice::LogInfoLookUpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::LogResult>>(AsyncshowLogInfoDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::LogResult>> PrepareAsyncshowLogInfoData(::grpc::ClientContext* context, const ::raltservice::LogInfoLookUpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::LogResult>>(PrepareAsyncshowLogInfoDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::raltservice::RaltLogs>> getRaltLogs(::grpc::ClientContext* context, const ::raltservice::GetRaltLogsReq& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::raltservice::RaltLogs>>(getRaltLogsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::raltservice::RaltLogs>> AsyncgetRaltLogs(::grpc::ClientContext* context, const ::raltservice::GetRaltLogsReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::raltservice::RaltLogs>>(AsyncgetRaltLogsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::raltservice::RaltLogs>> PrepareAsyncgetRaltLogs(::grpc::ClientContext* context, const ::raltservice::GetRaltLogsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::raltservice::RaltLogs>>(PrepareAsyncgetRaltLogsRaw(context, request, cq));
    }
    // configuration
    // basic config, main for record.config
    virtual ::grpc::Status getBasicConfig(::grpc::ClientContext* context, const ::raltservice::GetBasicConfigReq& request, ::raltservice::GetBasicConfigRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetBasicConfigRsp>> AsyncgetBasicConfig(::grpc::ClientContext* context, const ::raltservice::GetBasicConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetBasicConfigRsp>>(AsyncgetBasicConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetBasicConfigRsp>> PrepareAsyncgetBasicConfig(::grpc::ClientContext* context, const ::raltservice::GetBasicConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetBasicConfigRsp>>(PrepareAsyncgetBasicConfigRaw(context, request, cq));
    }
    virtual ::grpc::Status setBasicConfig(::grpc::ClientContext* context, const ::raltservice::SetBasicConfigReq& request, ::raltservice::SetBasicConfigRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::SetBasicConfigRsp>> AsyncsetBasicConfig(::grpc::ClientContext* context, const ::raltservice::SetBasicConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::SetBasicConfigRsp>>(AsyncsetBasicConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::SetBasicConfigRsp>> PrepareAsyncsetBasicConfig(::grpc::ClientContext* context, const ::raltservice::SetBasicConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::SetBasicConfigRsp>>(PrepareAsyncsetBasicConfigRaw(context, request, cq));
    }
    // ralt.domain.conf
    virtual ::grpc::Status getAllDomain(::grpc::ClientContext* context, const ::raltservice::GetAllDomainReq& request, ::raltservice::GetAllDomainRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetAllDomainRsp>> AsyncgetAllDomain(::grpc::ClientContext* context, const ::raltservice::GetAllDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetAllDomainRsp>>(AsyncgetAllDomainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetAllDomainRsp>> PrepareAsyncgetAllDomain(::grpc::ClientContext* context, const ::raltservice::GetAllDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetAllDomainRsp>>(PrepareAsyncgetAllDomainRaw(context, request, cq));
    }
    virtual ::grpc::Status updateDomain(::grpc::ClientContext* context, const ::raltservice::UpdateDomainReq& request, ::raltservice::UpdateDomainRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::UpdateDomainRsp>> AsyncupdateDomain(::grpc::ClientContext* context, const ::raltservice::UpdateDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::UpdateDomainRsp>>(AsyncupdateDomainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::UpdateDomainRsp>> PrepareAsyncupdateDomain(::grpc::ClientContext* context, const ::raltservice::UpdateDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::UpdateDomainRsp>>(PrepareAsyncupdateDomainRaw(context, request, cq));
    }
    virtual ::grpc::Status getDomain(::grpc::ClientContext* context, const ::raltservice::GetDomainReq& request, ::raltservice::GetDomainRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetDomainRsp>> AsyncgetDomain(::grpc::ClientContext* context, const ::raltservice::GetDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetDomainRsp>>(AsyncgetDomainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetDomainRsp>> PrepareAsyncgetDomain(::grpc::ClientContext* context, const ::raltservice::GetDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetDomainRsp>>(PrepareAsyncgetDomainRaw(context, request, cq));
    }
    virtual ::grpc::Status addDomain(::grpc::ClientContext* context, const ::raltservice::AddDomainReq& request, ::raltservice::AddDomainRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::AddDomainRsp>> AsyncaddDomain(::grpc::ClientContext* context, const ::raltservice::AddDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::AddDomainRsp>>(AsyncaddDomainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::AddDomainRsp>> PrepareAsyncaddDomain(::grpc::ClientContext* context, const ::raltservice::AddDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::AddDomainRsp>>(PrepareAsyncaddDomainRaw(context, request, cq));
    }
    virtual ::grpc::Status deleteDomain(::grpc::ClientContext* context, const ::raltservice::DeleteDomainReq& request, ::raltservice::DeleteDomainRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::DeleteDomainRsp>> AsyncdeleteDomain(::grpc::ClientContext* context, const ::raltservice::DeleteDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::DeleteDomainRsp>>(AsyncdeleteDomainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::DeleteDomainRsp>> PrepareAsyncdeleteDomain(::grpc::ClientContext* context, const ::raltservice::DeleteDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::DeleteDomainRsp>>(PrepareAsyncdeleteDomainRaw(context, request, cq));
    }
    // ralt.miscellaneous.conf
    virtual ::grpc::Status getMisc(::grpc::ClientContext* context, const ::raltservice::GetMiscReq& request, ::raltservice::GetMiscRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetMiscRsp>> AsyncgetMisc(::grpc::ClientContext* context, const ::raltservice::GetMiscReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetMiscRsp>>(AsyncgetMiscRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetMiscRsp>> PrepareAsyncgetMisc(::grpc::ClientContext* context, const ::raltservice::GetMiscReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetMiscRsp>>(PrepareAsyncgetMiscRaw(context, request, cq));
    }
    virtual ::grpc::Status modMisc(::grpc::ClientContext* context, const ::raltservice::ModMiscOpReq& request, ::raltservice::ModMiscOpRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::ModMiscOpRsp>> AsyncmodMisc(::grpc::ClientContext* context, const ::raltservice::ModMiscOpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::ModMiscOpRsp>>(AsyncmodMiscRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::ModMiscOpRsp>> PrepareAsyncmodMisc(::grpc::ClientContext* context, const ::raltservice::ModMiscOpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::ModMiscOpRsp>>(PrepareAsyncmodMiscRaw(context, request, cq));
    }
    // ralt.rule.conf
    virtual ::grpc::Status getRule(::grpc::ClientContext* context, const ::raltservice::GetRuleReq& request, ::raltservice::GetRuleRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetRuleRsp>> AsyncgetRule(::grpc::ClientContext* context, const ::raltservice::GetRuleReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetRuleRsp>>(AsyncgetRuleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetRuleRsp>> PrepareAsyncgetRule(::grpc::ClientContext* context, const ::raltservice::GetRuleReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetRuleRsp>>(PrepareAsyncgetRuleRaw(context, request, cq));
    }
    virtual ::grpc::Status updateRule(::grpc::ClientContext* context, const ::raltservice::UpdateRuleReq& request, ::raltservice::UpdateRuleRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::UpdateRuleRsp>> AsyncupdateRule(::grpc::ClientContext* context, const ::raltservice::UpdateRuleReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::UpdateRuleRsp>>(AsyncupdateRuleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::UpdateRuleRsp>> PrepareAsyncupdateRule(::grpc::ClientContext* context, const ::raltservice::UpdateRuleReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::UpdateRuleRsp>>(PrepareAsyncupdateRuleRaw(context, request, cq));
    }
    // cache operate
    virtual ::grpc::Status getCacheUrl(::grpc::ClientContext* context, const ::raltservice::GetCacheUrlReq& request, ::raltservice::GetCacheUrlRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetCacheUrlRsp>> AsyncgetCacheUrl(::grpc::ClientContext* context, const ::raltservice::GetCacheUrlReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetCacheUrlRsp>>(AsyncgetCacheUrlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetCacheUrlRsp>> PrepareAsyncgetCacheUrl(::grpc::ClientContext* context, const ::raltservice::GetCacheUrlReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetCacheUrlRsp>>(PrepareAsyncgetCacheUrlRaw(context, request, cq));
    }
    virtual ::grpc::Status isUrlInCache(::grpc::ClientContext* context, const ::raltservice::IsUrlInCacheReq& request, ::raltservice::IsUrlInCacheRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::IsUrlInCacheRsp>> AsyncisUrlInCache(::grpc::ClientContext* context, const ::raltservice::IsUrlInCacheReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::IsUrlInCacheRsp>>(AsyncisUrlInCacheRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::IsUrlInCacheRsp>> PrepareAsyncisUrlInCache(::grpc::ClientContext* context, const ::raltservice::IsUrlInCacheReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::IsUrlInCacheRsp>>(PrepareAsyncisUrlInCacheRaw(context, request, cq));
    }
    // command
    std::unique_ptr< ::grpc::ClientReaderInterface< ::raltservice::RaltStatus>> getRaltStatus(::grpc::ClientContext* context, const ::raltservice::RaltStatusReq& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::raltservice::RaltStatus>>(getRaltStatusRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::raltservice::RaltStatus>> AsyncgetRaltStatus(::grpc::ClientContext* context, const ::raltservice::RaltStatusReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::raltservice::RaltStatus>>(AsyncgetRaltStatusRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::raltservice::RaltStatus>> PrepareAsyncgetRaltStatus(::grpc::ClientContext* context, const ::raltservice::RaltStatusReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::raltservice::RaltStatus>>(PrepareAsyncgetRaltStatusRaw(context, request, cq));
    }
    // exec cmd
    virtual ::grpc::Status execCmd(::grpc::ClientContext* context, const ::raltservice::ExecCmdReq& request, ::raltservice::ExecCmdRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::ExecCmdRsp>> AsyncexecCmd(::grpc::ClientContext* context, const ::raltservice::ExecCmdReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::ExecCmdRsp>>(AsyncexecCmdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::ExecCmdRsp>> PrepareAsyncexecCmd(::grpc::ClientContext* context, const ::raltservice::ExecCmdReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::ExecCmdRsp>>(PrepareAsyncexecCmdRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // statistics
      virtual void getRaltStats(::grpc::ClientContext* context, const ::raltservice::GetRaltStatsReq* request, ::raltservice::GetRaltStatsRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getStatsField(::grpc::ClientContext* context, const ::raltservice::GetStatsFieldReq* request, ::raltservice::GetStatsFieldRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getHomePageData(::grpc::ClientContext* context, const ::raltservice::HomePageReq* request, ::raltservice::HomePageRsp* response, std::function<void(::grpc::Status)>) = 0;
      // cache
      virtual void showCacheData(::grpc::ClientContext* context, const ::raltservice::CacheLookUpReq* request, ::raltservice::CacheResult* response, std::function<void(::grpc::Status)>) = 0;
      // flow
      virtual void showFlowStatData(::grpc::ClientContext* context, const ::raltservice::FlowStatLookUpReq* request, ::raltservice::FlowResult* response, std::function<void(::grpc::Status)>) = 0;
      // logs
      virtual void showLogInfoData(::grpc::ClientContext* context, const ::raltservice::LogInfoLookUpReq* request, ::raltservice::LogResult* response, std::function<void(::grpc::Status)>) = 0;
      // configuration
      // basic config, main for record.config
      virtual void getBasicConfig(::grpc::ClientContext* context, const ::raltservice::GetBasicConfigReq* request, ::raltservice::GetBasicConfigRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setBasicConfig(::grpc::ClientContext* context, const ::raltservice::SetBasicConfigReq* request, ::raltservice::SetBasicConfigRsp* response, std::function<void(::grpc::Status)>) = 0;
      // ralt.domain.conf
      virtual void getAllDomain(::grpc::ClientContext* context, const ::raltservice::GetAllDomainReq* request, ::raltservice::GetAllDomainRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void updateDomain(::grpc::ClientContext* context, const ::raltservice::UpdateDomainReq* request, ::raltservice::UpdateDomainRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getDomain(::grpc::ClientContext* context, const ::raltservice::GetDomainReq* request, ::raltservice::GetDomainRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void addDomain(::grpc::ClientContext* context, const ::raltservice::AddDomainReq* request, ::raltservice::AddDomainRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deleteDomain(::grpc::ClientContext* context, const ::raltservice::DeleteDomainReq* request, ::raltservice::DeleteDomainRsp* response, std::function<void(::grpc::Status)>) = 0;
      // ralt.miscellaneous.conf
      virtual void getMisc(::grpc::ClientContext* context, const ::raltservice::GetMiscReq* request, ::raltservice::GetMiscRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void modMisc(::grpc::ClientContext* context, const ::raltservice::ModMiscOpReq* request, ::raltservice::ModMiscOpRsp* response, std::function<void(::grpc::Status)>) = 0;
      // ralt.rule.conf
      virtual void getRule(::grpc::ClientContext* context, const ::raltservice::GetRuleReq* request, ::raltservice::GetRuleRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void updateRule(::grpc::ClientContext* context, const ::raltservice::UpdateRuleReq* request, ::raltservice::UpdateRuleRsp* response, std::function<void(::grpc::Status)>) = 0;
      // cache operate
      virtual void getCacheUrl(::grpc::ClientContext* context, const ::raltservice::GetCacheUrlReq* request, ::raltservice::GetCacheUrlRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void isUrlInCache(::grpc::ClientContext* context, const ::raltservice::IsUrlInCacheReq* request, ::raltservice::IsUrlInCacheRsp* response, std::function<void(::grpc::Status)>) = 0;
      // command
      // exec cmd
      virtual void execCmd(::grpc::ClientContext* context, const ::raltservice::ExecCmdReq* request, ::raltservice::ExecCmdRsp* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetRaltStatsRsp>* AsyncgetRaltStatsRaw(::grpc::ClientContext* context, const ::raltservice::GetRaltStatsReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetRaltStatsRsp>* PrepareAsyncgetRaltStatsRaw(::grpc::ClientContext* context, const ::raltservice::GetRaltStatsReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetStatsFieldRsp>* AsyncgetStatsFieldRaw(::grpc::ClientContext* context, const ::raltservice::GetStatsFieldReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetStatsFieldRsp>* PrepareAsyncgetStatsFieldRaw(::grpc::ClientContext* context, const ::raltservice::GetStatsFieldReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::HomePageRsp>* AsyncgetHomePageDataRaw(::grpc::ClientContext* context, const ::raltservice::HomePageReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::HomePageRsp>* PrepareAsyncgetHomePageDataRaw(::grpc::ClientContext* context, const ::raltservice::HomePageReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::CacheResult>* AsyncshowCacheDataRaw(::grpc::ClientContext* context, const ::raltservice::CacheLookUpReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::CacheResult>* PrepareAsyncshowCacheDataRaw(::grpc::ClientContext* context, const ::raltservice::CacheLookUpReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::FlowResult>* AsyncshowFlowStatDataRaw(::grpc::ClientContext* context, const ::raltservice::FlowStatLookUpReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::FlowResult>* PrepareAsyncshowFlowStatDataRaw(::grpc::ClientContext* context, const ::raltservice::FlowStatLookUpReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::LogResult>* AsyncshowLogInfoDataRaw(::grpc::ClientContext* context, const ::raltservice::LogInfoLookUpReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::LogResult>* PrepareAsyncshowLogInfoDataRaw(::grpc::ClientContext* context, const ::raltservice::LogInfoLookUpReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::raltservice::RaltLogs>* getRaltLogsRaw(::grpc::ClientContext* context, const ::raltservice::GetRaltLogsReq& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::raltservice::RaltLogs>* AsyncgetRaltLogsRaw(::grpc::ClientContext* context, const ::raltservice::GetRaltLogsReq& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::raltservice::RaltLogs>* PrepareAsyncgetRaltLogsRaw(::grpc::ClientContext* context, const ::raltservice::GetRaltLogsReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetBasicConfigRsp>* AsyncgetBasicConfigRaw(::grpc::ClientContext* context, const ::raltservice::GetBasicConfigReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetBasicConfigRsp>* PrepareAsyncgetBasicConfigRaw(::grpc::ClientContext* context, const ::raltservice::GetBasicConfigReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::SetBasicConfigRsp>* AsyncsetBasicConfigRaw(::grpc::ClientContext* context, const ::raltservice::SetBasicConfigReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::SetBasicConfigRsp>* PrepareAsyncsetBasicConfigRaw(::grpc::ClientContext* context, const ::raltservice::SetBasicConfigReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetAllDomainRsp>* AsyncgetAllDomainRaw(::grpc::ClientContext* context, const ::raltservice::GetAllDomainReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetAllDomainRsp>* PrepareAsyncgetAllDomainRaw(::grpc::ClientContext* context, const ::raltservice::GetAllDomainReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::UpdateDomainRsp>* AsyncupdateDomainRaw(::grpc::ClientContext* context, const ::raltservice::UpdateDomainReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::UpdateDomainRsp>* PrepareAsyncupdateDomainRaw(::grpc::ClientContext* context, const ::raltservice::UpdateDomainReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetDomainRsp>* AsyncgetDomainRaw(::grpc::ClientContext* context, const ::raltservice::GetDomainReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetDomainRsp>* PrepareAsyncgetDomainRaw(::grpc::ClientContext* context, const ::raltservice::GetDomainReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::AddDomainRsp>* AsyncaddDomainRaw(::grpc::ClientContext* context, const ::raltservice::AddDomainReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::AddDomainRsp>* PrepareAsyncaddDomainRaw(::grpc::ClientContext* context, const ::raltservice::AddDomainReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::DeleteDomainRsp>* AsyncdeleteDomainRaw(::grpc::ClientContext* context, const ::raltservice::DeleteDomainReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::DeleteDomainRsp>* PrepareAsyncdeleteDomainRaw(::grpc::ClientContext* context, const ::raltservice::DeleteDomainReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetMiscRsp>* AsyncgetMiscRaw(::grpc::ClientContext* context, const ::raltservice::GetMiscReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetMiscRsp>* PrepareAsyncgetMiscRaw(::grpc::ClientContext* context, const ::raltservice::GetMiscReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::ModMiscOpRsp>* AsyncmodMiscRaw(::grpc::ClientContext* context, const ::raltservice::ModMiscOpReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::ModMiscOpRsp>* PrepareAsyncmodMiscRaw(::grpc::ClientContext* context, const ::raltservice::ModMiscOpReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetRuleRsp>* AsyncgetRuleRaw(::grpc::ClientContext* context, const ::raltservice::GetRuleReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetRuleRsp>* PrepareAsyncgetRuleRaw(::grpc::ClientContext* context, const ::raltservice::GetRuleReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::UpdateRuleRsp>* AsyncupdateRuleRaw(::grpc::ClientContext* context, const ::raltservice::UpdateRuleReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::UpdateRuleRsp>* PrepareAsyncupdateRuleRaw(::grpc::ClientContext* context, const ::raltservice::UpdateRuleReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetCacheUrlRsp>* AsyncgetCacheUrlRaw(::grpc::ClientContext* context, const ::raltservice::GetCacheUrlReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetCacheUrlRsp>* PrepareAsyncgetCacheUrlRaw(::grpc::ClientContext* context, const ::raltservice::GetCacheUrlReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::IsUrlInCacheRsp>* AsyncisUrlInCacheRaw(::grpc::ClientContext* context, const ::raltservice::IsUrlInCacheReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::IsUrlInCacheRsp>* PrepareAsyncisUrlInCacheRaw(::grpc::ClientContext* context, const ::raltservice::IsUrlInCacheReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::raltservice::RaltStatus>* getRaltStatusRaw(::grpc::ClientContext* context, const ::raltservice::RaltStatusReq& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::raltservice::RaltStatus>* AsyncgetRaltStatusRaw(::grpc::ClientContext* context, const ::raltservice::RaltStatusReq& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::raltservice::RaltStatus>* PrepareAsyncgetRaltStatusRaw(::grpc::ClientContext* context, const ::raltservice::RaltStatusReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::ExecCmdRsp>* AsyncexecCmdRaw(::grpc::ClientContext* context, const ::raltservice::ExecCmdReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::ExecCmdRsp>* PrepareAsyncexecCmdRaw(::grpc::ClientContext* context, const ::raltservice::ExecCmdReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status getRaltStats(::grpc::ClientContext* context, const ::raltservice::GetRaltStatsReq& request, ::raltservice::GetRaltStatsRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetRaltStatsRsp>> AsyncgetRaltStats(::grpc::ClientContext* context, const ::raltservice::GetRaltStatsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetRaltStatsRsp>>(AsyncgetRaltStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetRaltStatsRsp>> PrepareAsyncgetRaltStats(::grpc::ClientContext* context, const ::raltservice::GetRaltStatsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetRaltStatsRsp>>(PrepareAsyncgetRaltStatsRaw(context, request, cq));
    }
    ::grpc::Status getStatsField(::grpc::ClientContext* context, const ::raltservice::GetStatsFieldReq& request, ::raltservice::GetStatsFieldRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetStatsFieldRsp>> AsyncgetStatsField(::grpc::ClientContext* context, const ::raltservice::GetStatsFieldReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetStatsFieldRsp>>(AsyncgetStatsFieldRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetStatsFieldRsp>> PrepareAsyncgetStatsField(::grpc::ClientContext* context, const ::raltservice::GetStatsFieldReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetStatsFieldRsp>>(PrepareAsyncgetStatsFieldRaw(context, request, cq));
    }
    ::grpc::Status getHomePageData(::grpc::ClientContext* context, const ::raltservice::HomePageReq& request, ::raltservice::HomePageRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::HomePageRsp>> AsyncgetHomePageData(::grpc::ClientContext* context, const ::raltservice::HomePageReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::HomePageRsp>>(AsyncgetHomePageDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::HomePageRsp>> PrepareAsyncgetHomePageData(::grpc::ClientContext* context, const ::raltservice::HomePageReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::HomePageRsp>>(PrepareAsyncgetHomePageDataRaw(context, request, cq));
    }
    ::grpc::Status showCacheData(::grpc::ClientContext* context, const ::raltservice::CacheLookUpReq& request, ::raltservice::CacheResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::CacheResult>> AsyncshowCacheData(::grpc::ClientContext* context, const ::raltservice::CacheLookUpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::CacheResult>>(AsyncshowCacheDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::CacheResult>> PrepareAsyncshowCacheData(::grpc::ClientContext* context, const ::raltservice::CacheLookUpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::CacheResult>>(PrepareAsyncshowCacheDataRaw(context, request, cq));
    }
    ::grpc::Status showFlowStatData(::grpc::ClientContext* context, const ::raltservice::FlowStatLookUpReq& request, ::raltservice::FlowResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::FlowResult>> AsyncshowFlowStatData(::grpc::ClientContext* context, const ::raltservice::FlowStatLookUpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::FlowResult>>(AsyncshowFlowStatDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::FlowResult>> PrepareAsyncshowFlowStatData(::grpc::ClientContext* context, const ::raltservice::FlowStatLookUpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::FlowResult>>(PrepareAsyncshowFlowStatDataRaw(context, request, cq));
    }
    ::grpc::Status showLogInfoData(::grpc::ClientContext* context, const ::raltservice::LogInfoLookUpReq& request, ::raltservice::LogResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::LogResult>> AsyncshowLogInfoData(::grpc::ClientContext* context, const ::raltservice::LogInfoLookUpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::LogResult>>(AsyncshowLogInfoDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::LogResult>> PrepareAsyncshowLogInfoData(::grpc::ClientContext* context, const ::raltservice::LogInfoLookUpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::LogResult>>(PrepareAsyncshowLogInfoDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::raltservice::RaltLogs>> getRaltLogs(::grpc::ClientContext* context, const ::raltservice::GetRaltLogsReq& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::raltservice::RaltLogs>>(getRaltLogsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::raltservice::RaltLogs>> AsyncgetRaltLogs(::grpc::ClientContext* context, const ::raltservice::GetRaltLogsReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::raltservice::RaltLogs>>(AsyncgetRaltLogsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::raltservice::RaltLogs>> PrepareAsyncgetRaltLogs(::grpc::ClientContext* context, const ::raltservice::GetRaltLogsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::raltservice::RaltLogs>>(PrepareAsyncgetRaltLogsRaw(context, request, cq));
    }
    ::grpc::Status getBasicConfig(::grpc::ClientContext* context, const ::raltservice::GetBasicConfigReq& request, ::raltservice::GetBasicConfigRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetBasicConfigRsp>> AsyncgetBasicConfig(::grpc::ClientContext* context, const ::raltservice::GetBasicConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetBasicConfigRsp>>(AsyncgetBasicConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetBasicConfigRsp>> PrepareAsyncgetBasicConfig(::grpc::ClientContext* context, const ::raltservice::GetBasicConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetBasicConfigRsp>>(PrepareAsyncgetBasicConfigRaw(context, request, cq));
    }
    ::grpc::Status setBasicConfig(::grpc::ClientContext* context, const ::raltservice::SetBasicConfigReq& request, ::raltservice::SetBasicConfigRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::SetBasicConfigRsp>> AsyncsetBasicConfig(::grpc::ClientContext* context, const ::raltservice::SetBasicConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::SetBasicConfigRsp>>(AsyncsetBasicConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::SetBasicConfigRsp>> PrepareAsyncsetBasicConfig(::grpc::ClientContext* context, const ::raltservice::SetBasicConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::SetBasicConfigRsp>>(PrepareAsyncsetBasicConfigRaw(context, request, cq));
    }
    ::grpc::Status getAllDomain(::grpc::ClientContext* context, const ::raltservice::GetAllDomainReq& request, ::raltservice::GetAllDomainRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetAllDomainRsp>> AsyncgetAllDomain(::grpc::ClientContext* context, const ::raltservice::GetAllDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetAllDomainRsp>>(AsyncgetAllDomainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetAllDomainRsp>> PrepareAsyncgetAllDomain(::grpc::ClientContext* context, const ::raltservice::GetAllDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetAllDomainRsp>>(PrepareAsyncgetAllDomainRaw(context, request, cq));
    }
    ::grpc::Status updateDomain(::grpc::ClientContext* context, const ::raltservice::UpdateDomainReq& request, ::raltservice::UpdateDomainRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::UpdateDomainRsp>> AsyncupdateDomain(::grpc::ClientContext* context, const ::raltservice::UpdateDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::UpdateDomainRsp>>(AsyncupdateDomainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::UpdateDomainRsp>> PrepareAsyncupdateDomain(::grpc::ClientContext* context, const ::raltservice::UpdateDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::UpdateDomainRsp>>(PrepareAsyncupdateDomainRaw(context, request, cq));
    }
    ::grpc::Status getDomain(::grpc::ClientContext* context, const ::raltservice::GetDomainReq& request, ::raltservice::GetDomainRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetDomainRsp>> AsyncgetDomain(::grpc::ClientContext* context, const ::raltservice::GetDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetDomainRsp>>(AsyncgetDomainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetDomainRsp>> PrepareAsyncgetDomain(::grpc::ClientContext* context, const ::raltservice::GetDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetDomainRsp>>(PrepareAsyncgetDomainRaw(context, request, cq));
    }
    ::grpc::Status addDomain(::grpc::ClientContext* context, const ::raltservice::AddDomainReq& request, ::raltservice::AddDomainRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::AddDomainRsp>> AsyncaddDomain(::grpc::ClientContext* context, const ::raltservice::AddDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::AddDomainRsp>>(AsyncaddDomainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::AddDomainRsp>> PrepareAsyncaddDomain(::grpc::ClientContext* context, const ::raltservice::AddDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::AddDomainRsp>>(PrepareAsyncaddDomainRaw(context, request, cq));
    }
    ::grpc::Status deleteDomain(::grpc::ClientContext* context, const ::raltservice::DeleteDomainReq& request, ::raltservice::DeleteDomainRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::DeleteDomainRsp>> AsyncdeleteDomain(::grpc::ClientContext* context, const ::raltservice::DeleteDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::DeleteDomainRsp>>(AsyncdeleteDomainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::DeleteDomainRsp>> PrepareAsyncdeleteDomain(::grpc::ClientContext* context, const ::raltservice::DeleteDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::DeleteDomainRsp>>(PrepareAsyncdeleteDomainRaw(context, request, cq));
    }
    ::grpc::Status getMisc(::grpc::ClientContext* context, const ::raltservice::GetMiscReq& request, ::raltservice::GetMiscRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetMiscRsp>> AsyncgetMisc(::grpc::ClientContext* context, const ::raltservice::GetMiscReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetMiscRsp>>(AsyncgetMiscRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetMiscRsp>> PrepareAsyncgetMisc(::grpc::ClientContext* context, const ::raltservice::GetMiscReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetMiscRsp>>(PrepareAsyncgetMiscRaw(context, request, cq));
    }
    ::grpc::Status modMisc(::grpc::ClientContext* context, const ::raltservice::ModMiscOpReq& request, ::raltservice::ModMiscOpRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::ModMiscOpRsp>> AsyncmodMisc(::grpc::ClientContext* context, const ::raltservice::ModMiscOpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::ModMiscOpRsp>>(AsyncmodMiscRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::ModMiscOpRsp>> PrepareAsyncmodMisc(::grpc::ClientContext* context, const ::raltservice::ModMiscOpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::ModMiscOpRsp>>(PrepareAsyncmodMiscRaw(context, request, cq));
    }
    ::grpc::Status getRule(::grpc::ClientContext* context, const ::raltservice::GetRuleReq& request, ::raltservice::GetRuleRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetRuleRsp>> AsyncgetRule(::grpc::ClientContext* context, const ::raltservice::GetRuleReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetRuleRsp>>(AsyncgetRuleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetRuleRsp>> PrepareAsyncgetRule(::grpc::ClientContext* context, const ::raltservice::GetRuleReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetRuleRsp>>(PrepareAsyncgetRuleRaw(context, request, cq));
    }
    ::grpc::Status updateRule(::grpc::ClientContext* context, const ::raltservice::UpdateRuleReq& request, ::raltservice::UpdateRuleRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::UpdateRuleRsp>> AsyncupdateRule(::grpc::ClientContext* context, const ::raltservice::UpdateRuleReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::UpdateRuleRsp>>(AsyncupdateRuleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::UpdateRuleRsp>> PrepareAsyncupdateRule(::grpc::ClientContext* context, const ::raltservice::UpdateRuleReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::UpdateRuleRsp>>(PrepareAsyncupdateRuleRaw(context, request, cq));
    }
    ::grpc::Status getCacheUrl(::grpc::ClientContext* context, const ::raltservice::GetCacheUrlReq& request, ::raltservice::GetCacheUrlRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetCacheUrlRsp>> AsyncgetCacheUrl(::grpc::ClientContext* context, const ::raltservice::GetCacheUrlReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetCacheUrlRsp>>(AsyncgetCacheUrlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetCacheUrlRsp>> PrepareAsyncgetCacheUrl(::grpc::ClientContext* context, const ::raltservice::GetCacheUrlReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetCacheUrlRsp>>(PrepareAsyncgetCacheUrlRaw(context, request, cq));
    }
    ::grpc::Status isUrlInCache(::grpc::ClientContext* context, const ::raltservice::IsUrlInCacheReq& request, ::raltservice::IsUrlInCacheRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::IsUrlInCacheRsp>> AsyncisUrlInCache(::grpc::ClientContext* context, const ::raltservice::IsUrlInCacheReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::IsUrlInCacheRsp>>(AsyncisUrlInCacheRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::IsUrlInCacheRsp>> PrepareAsyncisUrlInCache(::grpc::ClientContext* context, const ::raltservice::IsUrlInCacheReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::IsUrlInCacheRsp>>(PrepareAsyncisUrlInCacheRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::raltservice::RaltStatus>> getRaltStatus(::grpc::ClientContext* context, const ::raltservice::RaltStatusReq& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::raltservice::RaltStatus>>(getRaltStatusRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::raltservice::RaltStatus>> AsyncgetRaltStatus(::grpc::ClientContext* context, const ::raltservice::RaltStatusReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::raltservice::RaltStatus>>(AsyncgetRaltStatusRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::raltservice::RaltStatus>> PrepareAsyncgetRaltStatus(::grpc::ClientContext* context, const ::raltservice::RaltStatusReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::raltservice::RaltStatus>>(PrepareAsyncgetRaltStatusRaw(context, request, cq));
    }
    ::grpc::Status execCmd(::grpc::ClientContext* context, const ::raltservice::ExecCmdReq& request, ::raltservice::ExecCmdRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::ExecCmdRsp>> AsyncexecCmd(::grpc::ClientContext* context, const ::raltservice::ExecCmdReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::ExecCmdRsp>>(AsyncexecCmdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::ExecCmdRsp>> PrepareAsyncexecCmd(::grpc::ClientContext* context, const ::raltservice::ExecCmdReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::ExecCmdRsp>>(PrepareAsyncexecCmdRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void getRaltStats(::grpc::ClientContext* context, const ::raltservice::GetRaltStatsReq* request, ::raltservice::GetRaltStatsRsp* response, std::function<void(::grpc::Status)>) override;
      void getStatsField(::grpc::ClientContext* context, const ::raltservice::GetStatsFieldReq* request, ::raltservice::GetStatsFieldRsp* response, std::function<void(::grpc::Status)>) override;
      void getHomePageData(::grpc::ClientContext* context, const ::raltservice::HomePageReq* request, ::raltservice::HomePageRsp* response, std::function<void(::grpc::Status)>) override;
      void showCacheData(::grpc::ClientContext* context, const ::raltservice::CacheLookUpReq* request, ::raltservice::CacheResult* response, std::function<void(::grpc::Status)>) override;
      void showFlowStatData(::grpc::ClientContext* context, const ::raltservice::FlowStatLookUpReq* request, ::raltservice::FlowResult* response, std::function<void(::grpc::Status)>) override;
      void showLogInfoData(::grpc::ClientContext* context, const ::raltservice::LogInfoLookUpReq* request, ::raltservice::LogResult* response, std::function<void(::grpc::Status)>) override;
      void getBasicConfig(::grpc::ClientContext* context, const ::raltservice::GetBasicConfigReq* request, ::raltservice::GetBasicConfigRsp* response, std::function<void(::grpc::Status)>) override;
      void setBasicConfig(::grpc::ClientContext* context, const ::raltservice::SetBasicConfigReq* request, ::raltservice::SetBasicConfigRsp* response, std::function<void(::grpc::Status)>) override;
      void getAllDomain(::grpc::ClientContext* context, const ::raltservice::GetAllDomainReq* request, ::raltservice::GetAllDomainRsp* response, std::function<void(::grpc::Status)>) override;
      void updateDomain(::grpc::ClientContext* context, const ::raltservice::UpdateDomainReq* request, ::raltservice::UpdateDomainRsp* response, std::function<void(::grpc::Status)>) override;
      void getDomain(::grpc::ClientContext* context, const ::raltservice::GetDomainReq* request, ::raltservice::GetDomainRsp* response, std::function<void(::grpc::Status)>) override;
      void addDomain(::grpc::ClientContext* context, const ::raltservice::AddDomainReq* request, ::raltservice::AddDomainRsp* response, std::function<void(::grpc::Status)>) override;
      void deleteDomain(::grpc::ClientContext* context, const ::raltservice::DeleteDomainReq* request, ::raltservice::DeleteDomainRsp* response, std::function<void(::grpc::Status)>) override;
      void getMisc(::grpc::ClientContext* context, const ::raltservice::GetMiscReq* request, ::raltservice::GetMiscRsp* response, std::function<void(::grpc::Status)>) override;
      void modMisc(::grpc::ClientContext* context, const ::raltservice::ModMiscOpReq* request, ::raltservice::ModMiscOpRsp* response, std::function<void(::grpc::Status)>) override;
      void getRule(::grpc::ClientContext* context, const ::raltservice::GetRuleReq* request, ::raltservice::GetRuleRsp* response, std::function<void(::grpc::Status)>) override;
      void updateRule(::grpc::ClientContext* context, const ::raltservice::UpdateRuleReq* request, ::raltservice::UpdateRuleRsp* response, std::function<void(::grpc::Status)>) override;
      void getCacheUrl(::grpc::ClientContext* context, const ::raltservice::GetCacheUrlReq* request, ::raltservice::GetCacheUrlRsp* response, std::function<void(::grpc::Status)>) override;
      void isUrlInCache(::grpc::ClientContext* context, const ::raltservice::IsUrlInCacheReq* request, ::raltservice::IsUrlInCacheRsp* response, std::function<void(::grpc::Status)>) override;
      void execCmd(::grpc::ClientContext* context, const ::raltservice::ExecCmdReq* request, ::raltservice::ExecCmdRsp* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::raltservice::GetRaltStatsRsp>* AsyncgetRaltStatsRaw(::grpc::ClientContext* context, const ::raltservice::GetRaltStatsReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::GetRaltStatsRsp>* PrepareAsyncgetRaltStatsRaw(::grpc::ClientContext* context, const ::raltservice::GetRaltStatsReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::GetStatsFieldRsp>* AsyncgetStatsFieldRaw(::grpc::ClientContext* context, const ::raltservice::GetStatsFieldReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::GetStatsFieldRsp>* PrepareAsyncgetStatsFieldRaw(::grpc::ClientContext* context, const ::raltservice::GetStatsFieldReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::HomePageRsp>* AsyncgetHomePageDataRaw(::grpc::ClientContext* context, const ::raltservice::HomePageReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::HomePageRsp>* PrepareAsyncgetHomePageDataRaw(::grpc::ClientContext* context, const ::raltservice::HomePageReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::CacheResult>* AsyncshowCacheDataRaw(::grpc::ClientContext* context, const ::raltservice::CacheLookUpReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::CacheResult>* PrepareAsyncshowCacheDataRaw(::grpc::ClientContext* context, const ::raltservice::CacheLookUpReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::FlowResult>* AsyncshowFlowStatDataRaw(::grpc::ClientContext* context, const ::raltservice::FlowStatLookUpReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::FlowResult>* PrepareAsyncshowFlowStatDataRaw(::grpc::ClientContext* context, const ::raltservice::FlowStatLookUpReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::LogResult>* AsyncshowLogInfoDataRaw(::grpc::ClientContext* context, const ::raltservice::LogInfoLookUpReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::LogResult>* PrepareAsyncshowLogInfoDataRaw(::grpc::ClientContext* context, const ::raltservice::LogInfoLookUpReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::raltservice::RaltLogs>* getRaltLogsRaw(::grpc::ClientContext* context, const ::raltservice::GetRaltLogsReq& request) override;
    ::grpc::ClientAsyncReader< ::raltservice::RaltLogs>* AsyncgetRaltLogsRaw(::grpc::ClientContext* context, const ::raltservice::GetRaltLogsReq& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::raltservice::RaltLogs>* PrepareAsyncgetRaltLogsRaw(::grpc::ClientContext* context, const ::raltservice::GetRaltLogsReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::GetBasicConfigRsp>* AsyncgetBasicConfigRaw(::grpc::ClientContext* context, const ::raltservice::GetBasicConfigReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::GetBasicConfigRsp>* PrepareAsyncgetBasicConfigRaw(::grpc::ClientContext* context, const ::raltservice::GetBasicConfigReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::SetBasicConfigRsp>* AsyncsetBasicConfigRaw(::grpc::ClientContext* context, const ::raltservice::SetBasicConfigReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::SetBasicConfigRsp>* PrepareAsyncsetBasicConfigRaw(::grpc::ClientContext* context, const ::raltservice::SetBasicConfigReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::GetAllDomainRsp>* AsyncgetAllDomainRaw(::grpc::ClientContext* context, const ::raltservice::GetAllDomainReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::GetAllDomainRsp>* PrepareAsyncgetAllDomainRaw(::grpc::ClientContext* context, const ::raltservice::GetAllDomainReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::UpdateDomainRsp>* AsyncupdateDomainRaw(::grpc::ClientContext* context, const ::raltservice::UpdateDomainReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::UpdateDomainRsp>* PrepareAsyncupdateDomainRaw(::grpc::ClientContext* context, const ::raltservice::UpdateDomainReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::GetDomainRsp>* AsyncgetDomainRaw(::grpc::ClientContext* context, const ::raltservice::GetDomainReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::GetDomainRsp>* PrepareAsyncgetDomainRaw(::grpc::ClientContext* context, const ::raltservice::GetDomainReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::AddDomainRsp>* AsyncaddDomainRaw(::grpc::ClientContext* context, const ::raltservice::AddDomainReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::AddDomainRsp>* PrepareAsyncaddDomainRaw(::grpc::ClientContext* context, const ::raltservice::AddDomainReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::DeleteDomainRsp>* AsyncdeleteDomainRaw(::grpc::ClientContext* context, const ::raltservice::DeleteDomainReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::DeleteDomainRsp>* PrepareAsyncdeleteDomainRaw(::grpc::ClientContext* context, const ::raltservice::DeleteDomainReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::GetMiscRsp>* AsyncgetMiscRaw(::grpc::ClientContext* context, const ::raltservice::GetMiscReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::GetMiscRsp>* PrepareAsyncgetMiscRaw(::grpc::ClientContext* context, const ::raltservice::GetMiscReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::ModMiscOpRsp>* AsyncmodMiscRaw(::grpc::ClientContext* context, const ::raltservice::ModMiscOpReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::ModMiscOpRsp>* PrepareAsyncmodMiscRaw(::grpc::ClientContext* context, const ::raltservice::ModMiscOpReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::GetRuleRsp>* AsyncgetRuleRaw(::grpc::ClientContext* context, const ::raltservice::GetRuleReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::GetRuleRsp>* PrepareAsyncgetRuleRaw(::grpc::ClientContext* context, const ::raltservice::GetRuleReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::UpdateRuleRsp>* AsyncupdateRuleRaw(::grpc::ClientContext* context, const ::raltservice::UpdateRuleReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::UpdateRuleRsp>* PrepareAsyncupdateRuleRaw(::grpc::ClientContext* context, const ::raltservice::UpdateRuleReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::GetCacheUrlRsp>* AsyncgetCacheUrlRaw(::grpc::ClientContext* context, const ::raltservice::GetCacheUrlReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::GetCacheUrlRsp>* PrepareAsyncgetCacheUrlRaw(::grpc::ClientContext* context, const ::raltservice::GetCacheUrlReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::IsUrlInCacheRsp>* AsyncisUrlInCacheRaw(::grpc::ClientContext* context, const ::raltservice::IsUrlInCacheReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::IsUrlInCacheRsp>* PrepareAsyncisUrlInCacheRaw(::grpc::ClientContext* context, const ::raltservice::IsUrlInCacheReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::raltservice::RaltStatus>* getRaltStatusRaw(::grpc::ClientContext* context, const ::raltservice::RaltStatusReq& request) override;
    ::grpc::ClientAsyncReader< ::raltservice::RaltStatus>* AsyncgetRaltStatusRaw(::grpc::ClientContext* context, const ::raltservice::RaltStatusReq& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::raltservice::RaltStatus>* PrepareAsyncgetRaltStatusRaw(::grpc::ClientContext* context, const ::raltservice::RaltStatusReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::ExecCmdRsp>* AsyncexecCmdRaw(::grpc::ClientContext* context, const ::raltservice::ExecCmdReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::ExecCmdRsp>* PrepareAsyncexecCmdRaw(::grpc::ClientContext* context, const ::raltservice::ExecCmdReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getRaltStats_;
    const ::grpc::internal::RpcMethod rpcmethod_getStatsField_;
    const ::grpc::internal::RpcMethod rpcmethod_getHomePageData_;
    const ::grpc::internal::RpcMethod rpcmethod_showCacheData_;
    const ::grpc::internal::RpcMethod rpcmethod_showFlowStatData_;
    const ::grpc::internal::RpcMethod rpcmethod_showLogInfoData_;
    const ::grpc::internal::RpcMethod rpcmethod_getRaltLogs_;
    const ::grpc::internal::RpcMethod rpcmethod_getBasicConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_setBasicConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_getAllDomain_;
    const ::grpc::internal::RpcMethod rpcmethod_updateDomain_;
    const ::grpc::internal::RpcMethod rpcmethod_getDomain_;
    const ::grpc::internal::RpcMethod rpcmethod_addDomain_;
    const ::grpc::internal::RpcMethod rpcmethod_deleteDomain_;
    const ::grpc::internal::RpcMethod rpcmethod_getMisc_;
    const ::grpc::internal::RpcMethod rpcmethod_modMisc_;
    const ::grpc::internal::RpcMethod rpcmethod_getRule_;
    const ::grpc::internal::RpcMethod rpcmethod_updateRule_;
    const ::grpc::internal::RpcMethod rpcmethod_getCacheUrl_;
    const ::grpc::internal::RpcMethod rpcmethod_isUrlInCache_;
    const ::grpc::internal::RpcMethod rpcmethod_getRaltStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_execCmd_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // statistics
    virtual ::grpc::Status getRaltStats(::grpc::ServerContext* context, const ::raltservice::GetRaltStatsReq* request, ::raltservice::GetRaltStatsRsp* response);
    virtual ::grpc::Status getStatsField(::grpc::ServerContext* context, const ::raltservice::GetStatsFieldReq* request, ::raltservice::GetStatsFieldRsp* response);
    virtual ::grpc::Status getHomePageData(::grpc::ServerContext* context, const ::raltservice::HomePageReq* request, ::raltservice::HomePageRsp* response);
    // cache
    virtual ::grpc::Status showCacheData(::grpc::ServerContext* context, const ::raltservice::CacheLookUpReq* request, ::raltservice::CacheResult* response);
    // flow
    virtual ::grpc::Status showFlowStatData(::grpc::ServerContext* context, const ::raltservice::FlowStatLookUpReq* request, ::raltservice::FlowResult* response);
    // logs
    virtual ::grpc::Status showLogInfoData(::grpc::ServerContext* context, const ::raltservice::LogInfoLookUpReq* request, ::raltservice::LogResult* response);
    virtual ::grpc::Status getRaltLogs(::grpc::ServerContext* context, const ::raltservice::GetRaltLogsReq* request, ::grpc::ServerWriter< ::raltservice::RaltLogs>* writer);
    // configuration
    // basic config, main for record.config
    virtual ::grpc::Status getBasicConfig(::grpc::ServerContext* context, const ::raltservice::GetBasicConfigReq* request, ::raltservice::GetBasicConfigRsp* response);
    virtual ::grpc::Status setBasicConfig(::grpc::ServerContext* context, const ::raltservice::SetBasicConfigReq* request, ::raltservice::SetBasicConfigRsp* response);
    // ralt.domain.conf
    virtual ::grpc::Status getAllDomain(::grpc::ServerContext* context, const ::raltservice::GetAllDomainReq* request, ::raltservice::GetAllDomainRsp* response);
    virtual ::grpc::Status updateDomain(::grpc::ServerContext* context, const ::raltservice::UpdateDomainReq* request, ::raltservice::UpdateDomainRsp* response);
    virtual ::grpc::Status getDomain(::grpc::ServerContext* context, const ::raltservice::GetDomainReq* request, ::raltservice::GetDomainRsp* response);
    virtual ::grpc::Status addDomain(::grpc::ServerContext* context, const ::raltservice::AddDomainReq* request, ::raltservice::AddDomainRsp* response);
    virtual ::grpc::Status deleteDomain(::grpc::ServerContext* context, const ::raltservice::DeleteDomainReq* request, ::raltservice::DeleteDomainRsp* response);
    // ralt.miscellaneous.conf
    virtual ::grpc::Status getMisc(::grpc::ServerContext* context, const ::raltservice::GetMiscReq* request, ::raltservice::GetMiscRsp* response);
    virtual ::grpc::Status modMisc(::grpc::ServerContext* context, const ::raltservice::ModMiscOpReq* request, ::raltservice::ModMiscOpRsp* response);
    // ralt.rule.conf
    virtual ::grpc::Status getRule(::grpc::ServerContext* context, const ::raltservice::GetRuleReq* request, ::raltservice::GetRuleRsp* response);
    virtual ::grpc::Status updateRule(::grpc::ServerContext* context, const ::raltservice::UpdateRuleReq* request, ::raltservice::UpdateRuleRsp* response);
    // cache operate
    virtual ::grpc::Status getCacheUrl(::grpc::ServerContext* context, const ::raltservice::GetCacheUrlReq* request, ::raltservice::GetCacheUrlRsp* response);
    virtual ::grpc::Status isUrlInCache(::grpc::ServerContext* context, const ::raltservice::IsUrlInCacheReq* request, ::raltservice::IsUrlInCacheRsp* response);
    // command
    virtual ::grpc::Status getRaltStatus(::grpc::ServerContext* context, const ::raltservice::RaltStatusReq* request, ::grpc::ServerWriter< ::raltservice::RaltStatus>* writer);
    // exec cmd
    virtual ::grpc::Status execCmd(::grpc::ServerContext* context, const ::raltservice::ExecCmdReq* request, ::raltservice::ExecCmdRsp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getRaltStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getRaltStats() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getRaltStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRaltStats(::grpc::ServerContext* context, const ::raltservice::GetRaltStatsReq* request, ::raltservice::GetRaltStatsRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRaltStats(::grpc::ServerContext* context, ::raltservice::GetRaltStatsReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::GetRaltStatsRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getStatsField : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getStatsField() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_getStatsField() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatsField(::grpc::ServerContext* context, const ::raltservice::GetStatsFieldReq* request, ::raltservice::GetStatsFieldRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetStatsField(::grpc::ServerContext* context, ::raltservice::GetStatsFieldReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::GetStatsFieldRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getHomePageData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getHomePageData() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getHomePageData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHomePageData(::grpc::ServerContext* context, const ::raltservice::HomePageReq* request, ::raltservice::HomePageRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetHomePageData(::grpc::ServerContext* context, ::raltservice::HomePageReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::HomePageRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_showCacheData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_showCacheData() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_showCacheData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status showCacheData(::grpc::ServerContext* context, const ::raltservice::CacheLookUpReq* request, ::raltservice::CacheResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestshowCacheData(::grpc::ServerContext* context, ::raltservice::CacheLookUpReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::CacheResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_showFlowStatData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_showFlowStatData() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_showFlowStatData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status showFlowStatData(::grpc::ServerContext* context, const ::raltservice::FlowStatLookUpReq* request, ::raltservice::FlowResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestshowFlowStatData(::grpc::ServerContext* context, ::raltservice::FlowStatLookUpReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::FlowResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_showLogInfoData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_showLogInfoData() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_showLogInfoData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status showLogInfoData(::grpc::ServerContext* context, const ::raltservice::LogInfoLookUpReq* request, ::raltservice::LogResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestshowLogInfoData(::grpc::ServerContext* context, ::raltservice::LogInfoLookUpReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::LogResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getRaltLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getRaltLogs() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_getRaltLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRaltLogs(::grpc::ServerContext* context, const ::raltservice::GetRaltLogsReq* request, ::grpc::ServerWriter< ::raltservice::RaltLogs>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRaltLogs(::grpc::ServerContext* context, ::raltservice::GetRaltLogsReq* request, ::grpc::ServerAsyncWriter< ::raltservice::RaltLogs>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getBasicConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getBasicConfig() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_getBasicConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBasicConfig(::grpc::ServerContext* context, const ::raltservice::GetBasicConfigReq* request, ::raltservice::GetBasicConfigRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetBasicConfig(::grpc::ServerContext* context, ::raltservice::GetBasicConfigReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::GetBasicConfigRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setBasicConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_setBasicConfig() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_setBasicConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setBasicConfig(::grpc::ServerContext* context, const ::raltservice::SetBasicConfigReq* request, ::raltservice::SetBasicConfigRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetBasicConfig(::grpc::ServerContext* context, ::raltservice::SetBasicConfigReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::SetBasicConfigRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getAllDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getAllDomain() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_getAllDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllDomain(::grpc::ServerContext* context, const ::raltservice::GetAllDomainReq* request, ::raltservice::GetAllDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAllDomain(::grpc::ServerContext* context, ::raltservice::GetAllDomainReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::GetAllDomainRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_updateDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_updateDomain() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_updateDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateDomain(::grpc::ServerContext* context, const ::raltservice::UpdateDomainReq* request, ::raltservice::UpdateDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateDomain(::grpc::ServerContext* context, ::raltservice::UpdateDomainReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::UpdateDomainRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getDomain() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_getDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDomain(::grpc::ServerContext* context, const ::raltservice::GetDomainReq* request, ::raltservice::GetDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDomain(::grpc::ServerContext* context, ::raltservice::GetDomainReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::GetDomainRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_addDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_addDomain() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_addDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addDomain(::grpc::ServerContext* context, const ::raltservice::AddDomainReq* request, ::raltservice::AddDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddDomain(::grpc::ServerContext* context, ::raltservice::AddDomainReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::AddDomainRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deleteDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_deleteDomain() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_deleteDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteDomain(::grpc::ServerContext* context, const ::raltservice::DeleteDomainReq* request, ::raltservice::DeleteDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteDomain(::grpc::ServerContext* context, ::raltservice::DeleteDomainReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::DeleteDomainRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getMisc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getMisc() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_getMisc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMisc(::grpc::ServerContext* context, const ::raltservice::GetMiscReq* request, ::raltservice::GetMiscRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMisc(::grpc::ServerContext* context, ::raltservice::GetMiscReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::GetMiscRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_modMisc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_modMisc() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_modMisc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status modMisc(::grpc::ServerContext* context, const ::raltservice::ModMiscOpReq* request, ::raltservice::ModMiscOpRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmodMisc(::grpc::ServerContext* context, ::raltservice::ModMiscOpReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::ModMiscOpRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getRule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getRule() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_getRule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRule(::grpc::ServerContext* context, const ::raltservice::GetRuleReq* request, ::raltservice::GetRuleRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRule(::grpc::ServerContext* context, ::raltservice::GetRuleReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::GetRuleRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_updateRule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_updateRule() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_updateRule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateRule(::grpc::ServerContext* context, const ::raltservice::UpdateRuleReq* request, ::raltservice::UpdateRuleRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateRule(::grpc::ServerContext* context, ::raltservice::UpdateRuleReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::UpdateRuleRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getCacheUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getCacheUrl() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_getCacheUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCacheUrl(::grpc::ServerContext* context, const ::raltservice::GetCacheUrlReq* request, ::raltservice::GetCacheUrlRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCacheUrl(::grpc::ServerContext* context, ::raltservice::GetCacheUrlReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::GetCacheUrlRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_isUrlInCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_isUrlInCache() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_isUrlInCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isUrlInCache(::grpc::ServerContext* context, const ::raltservice::IsUrlInCacheReq* request, ::raltservice::IsUrlInCacheRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisUrlInCache(::grpc::ServerContext* context, ::raltservice::IsUrlInCacheReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::IsUrlInCacheRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getRaltStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getRaltStatus() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_getRaltStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRaltStatus(::grpc::ServerContext* context, const ::raltservice::RaltStatusReq* request, ::grpc::ServerWriter< ::raltservice::RaltStatus>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRaltStatus(::grpc::ServerContext* context, ::raltservice::RaltStatusReq* request, ::grpc::ServerAsyncWriter< ::raltservice::RaltStatus>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(20, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_execCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_execCmd() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_execCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status execCmd(::grpc::ServerContext* context, const ::raltservice::ExecCmdReq* request, ::raltservice::ExecCmdRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexecCmd(::grpc::ServerContext* context, ::raltservice::ExecCmdReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::ExecCmdRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getRaltStats<WithAsyncMethod_getStatsField<WithAsyncMethod_getHomePageData<WithAsyncMethod_showCacheData<WithAsyncMethod_showFlowStatData<WithAsyncMethod_showLogInfoData<WithAsyncMethod_getRaltLogs<WithAsyncMethod_getBasicConfig<WithAsyncMethod_setBasicConfig<WithAsyncMethod_getAllDomain<WithAsyncMethod_updateDomain<WithAsyncMethod_getDomain<WithAsyncMethod_addDomain<WithAsyncMethod_deleteDomain<WithAsyncMethod_getMisc<WithAsyncMethod_modMisc<WithAsyncMethod_getRule<WithAsyncMethod_updateRule<WithAsyncMethod_getCacheUrl<WithAsyncMethod_isUrlInCache<WithAsyncMethod_getRaltStatus<WithAsyncMethod_execCmd<Service > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getRaltStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getRaltStats() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_getRaltStats<BaseClass>, ::raltservice::GetRaltStatsReq, ::raltservice::GetRaltStatsRsp>(
          [this](::grpc::ServerContext* context,
                 const ::raltservice::GetRaltStatsReq* request,
                 ::raltservice::GetRaltStatsRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getRaltStats(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_getRaltStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRaltStats(::grpc::ServerContext* context, const ::raltservice::GetRaltStatsReq* request, ::raltservice::GetRaltStatsRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getRaltStats(::grpc::ServerContext* context, const ::raltservice::GetRaltStatsReq* request, ::raltservice::GetRaltStatsRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getStatsField : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getStatsField() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_getStatsField<BaseClass>, ::raltservice::GetStatsFieldReq, ::raltservice::GetStatsFieldRsp>(
          [this](::grpc::ServerContext* context,
                 const ::raltservice::GetStatsFieldReq* request,
                 ::raltservice::GetStatsFieldRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getStatsField(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_getStatsField() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatsField(::grpc::ServerContext* context, const ::raltservice::GetStatsFieldReq* request, ::raltservice::GetStatsFieldRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getStatsField(::grpc::ServerContext* context, const ::raltservice::GetStatsFieldReq* request, ::raltservice::GetStatsFieldRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getHomePageData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getHomePageData() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_getHomePageData<BaseClass>, ::raltservice::HomePageReq, ::raltservice::HomePageRsp>(
          [this](::grpc::ServerContext* context,
                 const ::raltservice::HomePageReq* request,
                 ::raltservice::HomePageRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getHomePageData(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_getHomePageData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHomePageData(::grpc::ServerContext* context, const ::raltservice::HomePageReq* request, ::raltservice::HomePageRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getHomePageData(::grpc::ServerContext* context, const ::raltservice::HomePageReq* request, ::raltservice::HomePageRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_showCacheData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_showCacheData() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_showCacheData<BaseClass>, ::raltservice::CacheLookUpReq, ::raltservice::CacheResult>(
          [this](::grpc::ServerContext* context,
                 const ::raltservice::CacheLookUpReq* request,
                 ::raltservice::CacheResult* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->showCacheData(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_showCacheData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status showCacheData(::grpc::ServerContext* context, const ::raltservice::CacheLookUpReq* request, ::raltservice::CacheResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void showCacheData(::grpc::ServerContext* context, const ::raltservice::CacheLookUpReq* request, ::raltservice::CacheResult* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_showFlowStatData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_showFlowStatData() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_showFlowStatData<BaseClass>, ::raltservice::FlowStatLookUpReq, ::raltservice::FlowResult>(
          [this](::grpc::ServerContext* context,
                 const ::raltservice::FlowStatLookUpReq* request,
                 ::raltservice::FlowResult* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->showFlowStatData(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_showFlowStatData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status showFlowStatData(::grpc::ServerContext* context, const ::raltservice::FlowStatLookUpReq* request, ::raltservice::FlowResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void showFlowStatData(::grpc::ServerContext* context, const ::raltservice::FlowStatLookUpReq* request, ::raltservice::FlowResult* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_showLogInfoData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_showLogInfoData() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_showLogInfoData<BaseClass>, ::raltservice::LogInfoLookUpReq, ::raltservice::LogResult>(
          [this](::grpc::ServerContext* context,
                 const ::raltservice::LogInfoLookUpReq* request,
                 ::raltservice::LogResult* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->showLogInfoData(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_showLogInfoData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status showLogInfoData(::grpc::ServerContext* context, const ::raltservice::LogInfoLookUpReq* request, ::raltservice::LogResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void showLogInfoData(::grpc::ServerContext* context, const ::raltservice::LogInfoLookUpReq* request, ::raltservice::LogResult* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getRaltLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getRaltLogs() {
    }
    ~ExperimentalWithCallbackMethod_getRaltLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRaltLogs(::grpc::ServerContext* context, const ::raltservice::GetRaltLogsReq* request, ::grpc::ServerWriter< ::raltservice::RaltLogs>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getBasicConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getBasicConfig() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_getBasicConfig<BaseClass>, ::raltservice::GetBasicConfigReq, ::raltservice::GetBasicConfigRsp>(
          [this](::grpc::ServerContext* context,
                 const ::raltservice::GetBasicConfigReq* request,
                 ::raltservice::GetBasicConfigRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getBasicConfig(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_getBasicConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBasicConfig(::grpc::ServerContext* context, const ::raltservice::GetBasicConfigReq* request, ::raltservice::GetBasicConfigRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getBasicConfig(::grpc::ServerContext* context, const ::raltservice::GetBasicConfigReq* request, ::raltservice::GetBasicConfigRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_setBasicConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_setBasicConfig() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_setBasicConfig<BaseClass>, ::raltservice::SetBasicConfigReq, ::raltservice::SetBasicConfigRsp>(
          [this](::grpc::ServerContext* context,
                 const ::raltservice::SetBasicConfigReq* request,
                 ::raltservice::SetBasicConfigRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->setBasicConfig(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_setBasicConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setBasicConfig(::grpc::ServerContext* context, const ::raltservice::SetBasicConfigReq* request, ::raltservice::SetBasicConfigRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void setBasicConfig(::grpc::ServerContext* context, const ::raltservice::SetBasicConfigReq* request, ::raltservice::SetBasicConfigRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getAllDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getAllDomain() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_getAllDomain<BaseClass>, ::raltservice::GetAllDomainReq, ::raltservice::GetAllDomainRsp>(
          [this](::grpc::ServerContext* context,
                 const ::raltservice::GetAllDomainReq* request,
                 ::raltservice::GetAllDomainRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getAllDomain(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_getAllDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllDomain(::grpc::ServerContext* context, const ::raltservice::GetAllDomainReq* request, ::raltservice::GetAllDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getAllDomain(::grpc::ServerContext* context, const ::raltservice::GetAllDomainReq* request, ::raltservice::GetAllDomainRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_updateDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_updateDomain() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_updateDomain<BaseClass>, ::raltservice::UpdateDomainReq, ::raltservice::UpdateDomainRsp>(
          [this](::grpc::ServerContext* context,
                 const ::raltservice::UpdateDomainReq* request,
                 ::raltservice::UpdateDomainRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->updateDomain(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_updateDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateDomain(::grpc::ServerContext* context, const ::raltservice::UpdateDomainReq* request, ::raltservice::UpdateDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void updateDomain(::grpc::ServerContext* context, const ::raltservice::UpdateDomainReq* request, ::raltservice::UpdateDomainRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getDomain() {
      ::grpc::Service::experimental().MarkMethodCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_getDomain<BaseClass>, ::raltservice::GetDomainReq, ::raltservice::GetDomainRsp>(
          [this](::grpc::ServerContext* context,
                 const ::raltservice::GetDomainReq* request,
                 ::raltservice::GetDomainRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getDomain(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_getDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDomain(::grpc::ServerContext* context, const ::raltservice::GetDomainReq* request, ::raltservice::GetDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getDomain(::grpc::ServerContext* context, const ::raltservice::GetDomainReq* request, ::raltservice::GetDomainRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_addDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_addDomain() {
      ::grpc::Service::experimental().MarkMethodCallback(12,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_addDomain<BaseClass>, ::raltservice::AddDomainReq, ::raltservice::AddDomainRsp>(
          [this](::grpc::ServerContext* context,
                 const ::raltservice::AddDomainReq* request,
                 ::raltservice::AddDomainRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->addDomain(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_addDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addDomain(::grpc::ServerContext* context, const ::raltservice::AddDomainReq* request, ::raltservice::AddDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void addDomain(::grpc::ServerContext* context, const ::raltservice::AddDomainReq* request, ::raltservice::AddDomainRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_deleteDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_deleteDomain() {
      ::grpc::Service::experimental().MarkMethodCallback(13,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_deleteDomain<BaseClass>, ::raltservice::DeleteDomainReq, ::raltservice::DeleteDomainRsp>(
          [this](::grpc::ServerContext* context,
                 const ::raltservice::DeleteDomainReq* request,
                 ::raltservice::DeleteDomainRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->deleteDomain(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_deleteDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteDomain(::grpc::ServerContext* context, const ::raltservice::DeleteDomainReq* request, ::raltservice::DeleteDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void deleteDomain(::grpc::ServerContext* context, const ::raltservice::DeleteDomainReq* request, ::raltservice::DeleteDomainRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getMisc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getMisc() {
      ::grpc::Service::experimental().MarkMethodCallback(14,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_getMisc<BaseClass>, ::raltservice::GetMiscReq, ::raltservice::GetMiscRsp>(
          [this](::grpc::ServerContext* context,
                 const ::raltservice::GetMiscReq* request,
                 ::raltservice::GetMiscRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getMisc(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_getMisc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMisc(::grpc::ServerContext* context, const ::raltservice::GetMiscReq* request, ::raltservice::GetMiscRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getMisc(::grpc::ServerContext* context, const ::raltservice::GetMiscReq* request, ::raltservice::GetMiscRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_modMisc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_modMisc() {
      ::grpc::Service::experimental().MarkMethodCallback(15,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_modMisc<BaseClass>, ::raltservice::ModMiscOpReq, ::raltservice::ModMiscOpRsp>(
          [this](::grpc::ServerContext* context,
                 const ::raltservice::ModMiscOpReq* request,
                 ::raltservice::ModMiscOpRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->modMisc(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_modMisc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status modMisc(::grpc::ServerContext* context, const ::raltservice::ModMiscOpReq* request, ::raltservice::ModMiscOpRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void modMisc(::grpc::ServerContext* context, const ::raltservice::ModMiscOpReq* request, ::raltservice::ModMiscOpRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getRule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getRule() {
      ::grpc::Service::experimental().MarkMethodCallback(16,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_getRule<BaseClass>, ::raltservice::GetRuleReq, ::raltservice::GetRuleRsp>(
          [this](::grpc::ServerContext* context,
                 const ::raltservice::GetRuleReq* request,
                 ::raltservice::GetRuleRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getRule(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_getRule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRule(::grpc::ServerContext* context, const ::raltservice::GetRuleReq* request, ::raltservice::GetRuleRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getRule(::grpc::ServerContext* context, const ::raltservice::GetRuleReq* request, ::raltservice::GetRuleRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_updateRule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_updateRule() {
      ::grpc::Service::experimental().MarkMethodCallback(17,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_updateRule<BaseClass>, ::raltservice::UpdateRuleReq, ::raltservice::UpdateRuleRsp>(
          [this](::grpc::ServerContext* context,
                 const ::raltservice::UpdateRuleReq* request,
                 ::raltservice::UpdateRuleRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->updateRule(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_updateRule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateRule(::grpc::ServerContext* context, const ::raltservice::UpdateRuleReq* request, ::raltservice::UpdateRuleRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void updateRule(::grpc::ServerContext* context, const ::raltservice::UpdateRuleReq* request, ::raltservice::UpdateRuleRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getCacheUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getCacheUrl() {
      ::grpc::Service::experimental().MarkMethodCallback(18,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_getCacheUrl<BaseClass>, ::raltservice::GetCacheUrlReq, ::raltservice::GetCacheUrlRsp>(
          [this](::grpc::ServerContext* context,
                 const ::raltservice::GetCacheUrlReq* request,
                 ::raltservice::GetCacheUrlRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getCacheUrl(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_getCacheUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCacheUrl(::grpc::ServerContext* context, const ::raltservice::GetCacheUrlReq* request, ::raltservice::GetCacheUrlRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getCacheUrl(::grpc::ServerContext* context, const ::raltservice::GetCacheUrlReq* request, ::raltservice::GetCacheUrlRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_isUrlInCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_isUrlInCache() {
      ::grpc::Service::experimental().MarkMethodCallback(19,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_isUrlInCache<BaseClass>, ::raltservice::IsUrlInCacheReq, ::raltservice::IsUrlInCacheRsp>(
          [this](::grpc::ServerContext* context,
                 const ::raltservice::IsUrlInCacheReq* request,
                 ::raltservice::IsUrlInCacheRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->isUrlInCache(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_isUrlInCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isUrlInCache(::grpc::ServerContext* context, const ::raltservice::IsUrlInCacheReq* request, ::raltservice::IsUrlInCacheRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void isUrlInCache(::grpc::ServerContext* context, const ::raltservice::IsUrlInCacheReq* request, ::raltservice::IsUrlInCacheRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getRaltStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getRaltStatus() {
    }
    ~ExperimentalWithCallbackMethod_getRaltStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRaltStatus(::grpc::ServerContext* context, const ::raltservice::RaltStatusReq* request, ::grpc::ServerWriter< ::raltservice::RaltStatus>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_execCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_execCmd() {
      ::grpc::Service::experimental().MarkMethodCallback(21,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_execCmd<BaseClass>, ::raltservice::ExecCmdReq, ::raltservice::ExecCmdRsp>(
          [this](::grpc::ServerContext* context,
                 const ::raltservice::ExecCmdReq* request,
                 ::raltservice::ExecCmdRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->execCmd(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_execCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status execCmd(::grpc::ServerContext* context, const ::raltservice::ExecCmdReq* request, ::raltservice::ExecCmdRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void execCmd(::grpc::ServerContext* context, const ::raltservice::ExecCmdReq* request, ::raltservice::ExecCmdRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_getRaltStats<ExperimentalWithCallbackMethod_getStatsField<ExperimentalWithCallbackMethod_getHomePageData<ExperimentalWithCallbackMethod_showCacheData<ExperimentalWithCallbackMethod_showFlowStatData<ExperimentalWithCallbackMethod_showLogInfoData<ExperimentalWithCallbackMethod_getRaltLogs<ExperimentalWithCallbackMethod_getBasicConfig<ExperimentalWithCallbackMethod_setBasicConfig<ExperimentalWithCallbackMethod_getAllDomain<ExperimentalWithCallbackMethod_updateDomain<ExperimentalWithCallbackMethod_getDomain<ExperimentalWithCallbackMethod_addDomain<ExperimentalWithCallbackMethod_deleteDomain<ExperimentalWithCallbackMethod_getMisc<ExperimentalWithCallbackMethod_modMisc<ExperimentalWithCallbackMethod_getRule<ExperimentalWithCallbackMethod_updateRule<ExperimentalWithCallbackMethod_getCacheUrl<ExperimentalWithCallbackMethod_isUrlInCache<ExperimentalWithCallbackMethod_getRaltStatus<ExperimentalWithCallbackMethod_execCmd<Service > > > > > > > > > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getRaltStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getRaltStats() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getRaltStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRaltStats(::grpc::ServerContext* context, const ::raltservice::GetRaltStatsReq* request, ::raltservice::GetRaltStatsRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getStatsField : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getStatsField() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_getStatsField() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatsField(::grpc::ServerContext* context, const ::raltservice::GetStatsFieldReq* request, ::raltservice::GetStatsFieldRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getHomePageData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getHomePageData() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getHomePageData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHomePageData(::grpc::ServerContext* context, const ::raltservice::HomePageReq* request, ::raltservice::HomePageRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_showCacheData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_showCacheData() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_showCacheData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status showCacheData(::grpc::ServerContext* context, const ::raltservice::CacheLookUpReq* request, ::raltservice::CacheResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_showFlowStatData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_showFlowStatData() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_showFlowStatData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status showFlowStatData(::grpc::ServerContext* context, const ::raltservice::FlowStatLookUpReq* request, ::raltservice::FlowResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_showLogInfoData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_showLogInfoData() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_showLogInfoData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status showLogInfoData(::grpc::ServerContext* context, const ::raltservice::LogInfoLookUpReq* request, ::raltservice::LogResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getRaltLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getRaltLogs() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_getRaltLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRaltLogs(::grpc::ServerContext* context, const ::raltservice::GetRaltLogsReq* request, ::grpc::ServerWriter< ::raltservice::RaltLogs>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getBasicConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getBasicConfig() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_getBasicConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBasicConfig(::grpc::ServerContext* context, const ::raltservice::GetBasicConfigReq* request, ::raltservice::GetBasicConfigRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setBasicConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_setBasicConfig() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_setBasicConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setBasicConfig(::grpc::ServerContext* context, const ::raltservice::SetBasicConfigReq* request, ::raltservice::SetBasicConfigRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getAllDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getAllDomain() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_getAllDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllDomain(::grpc::ServerContext* context, const ::raltservice::GetAllDomainReq* request, ::raltservice::GetAllDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_updateDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_updateDomain() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_updateDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateDomain(::grpc::ServerContext* context, const ::raltservice::UpdateDomainReq* request, ::raltservice::UpdateDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getDomain() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_getDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDomain(::grpc::ServerContext* context, const ::raltservice::GetDomainReq* request, ::raltservice::GetDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_addDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_addDomain() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_addDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addDomain(::grpc::ServerContext* context, const ::raltservice::AddDomainReq* request, ::raltservice::AddDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deleteDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_deleteDomain() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_deleteDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteDomain(::grpc::ServerContext* context, const ::raltservice::DeleteDomainReq* request, ::raltservice::DeleteDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getMisc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getMisc() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_getMisc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMisc(::grpc::ServerContext* context, const ::raltservice::GetMiscReq* request, ::raltservice::GetMiscRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_modMisc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_modMisc() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_modMisc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status modMisc(::grpc::ServerContext* context, const ::raltservice::ModMiscOpReq* request, ::raltservice::ModMiscOpRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getRule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getRule() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_getRule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRule(::grpc::ServerContext* context, const ::raltservice::GetRuleReq* request, ::raltservice::GetRuleRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_updateRule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_updateRule() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_updateRule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateRule(::grpc::ServerContext* context, const ::raltservice::UpdateRuleReq* request, ::raltservice::UpdateRuleRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getCacheUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getCacheUrl() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_getCacheUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCacheUrl(::grpc::ServerContext* context, const ::raltservice::GetCacheUrlReq* request, ::raltservice::GetCacheUrlRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_isUrlInCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_isUrlInCache() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_isUrlInCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isUrlInCache(::grpc::ServerContext* context, const ::raltservice::IsUrlInCacheReq* request, ::raltservice::IsUrlInCacheRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getRaltStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getRaltStatus() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_getRaltStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRaltStatus(::grpc::ServerContext* context, const ::raltservice::RaltStatusReq* request, ::grpc::ServerWriter< ::raltservice::RaltStatus>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_execCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_execCmd() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_execCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status execCmd(::grpc::ServerContext* context, const ::raltservice::ExecCmdReq* request, ::raltservice::ExecCmdRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getRaltStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getRaltStats() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getRaltStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRaltStats(::grpc::ServerContext* context, const ::raltservice::GetRaltStatsReq* request, ::raltservice::GetRaltStatsRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRaltStats(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getStatsField : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getStatsField() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_getStatsField() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatsField(::grpc::ServerContext* context, const ::raltservice::GetStatsFieldReq* request, ::raltservice::GetStatsFieldRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetStatsField(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getHomePageData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getHomePageData() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getHomePageData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHomePageData(::grpc::ServerContext* context, const ::raltservice::HomePageReq* request, ::raltservice::HomePageRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetHomePageData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_showCacheData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_showCacheData() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_showCacheData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status showCacheData(::grpc::ServerContext* context, const ::raltservice::CacheLookUpReq* request, ::raltservice::CacheResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestshowCacheData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_showFlowStatData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_showFlowStatData() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_showFlowStatData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status showFlowStatData(::grpc::ServerContext* context, const ::raltservice::FlowStatLookUpReq* request, ::raltservice::FlowResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestshowFlowStatData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_showLogInfoData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_showLogInfoData() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_showLogInfoData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status showLogInfoData(::grpc::ServerContext* context, const ::raltservice::LogInfoLookUpReq* request, ::raltservice::LogResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestshowLogInfoData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getRaltLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getRaltLogs() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_getRaltLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRaltLogs(::grpc::ServerContext* context, const ::raltservice::GetRaltLogsReq* request, ::grpc::ServerWriter< ::raltservice::RaltLogs>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRaltLogs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getBasicConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getBasicConfig() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_getBasicConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBasicConfig(::grpc::ServerContext* context, const ::raltservice::GetBasicConfigReq* request, ::raltservice::GetBasicConfigRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetBasicConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setBasicConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_setBasicConfig() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_setBasicConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setBasicConfig(::grpc::ServerContext* context, const ::raltservice::SetBasicConfigReq* request, ::raltservice::SetBasicConfigRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetBasicConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getAllDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getAllDomain() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_getAllDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllDomain(::grpc::ServerContext* context, const ::raltservice::GetAllDomainReq* request, ::raltservice::GetAllDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAllDomain(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_updateDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_updateDomain() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_updateDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateDomain(::grpc::ServerContext* context, const ::raltservice::UpdateDomainReq* request, ::raltservice::UpdateDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateDomain(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getDomain() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_getDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDomain(::grpc::ServerContext* context, const ::raltservice::GetDomainReq* request, ::raltservice::GetDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDomain(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_addDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_addDomain() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_addDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addDomain(::grpc::ServerContext* context, const ::raltservice::AddDomainReq* request, ::raltservice::AddDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddDomain(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_deleteDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_deleteDomain() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_deleteDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteDomain(::grpc::ServerContext* context, const ::raltservice::DeleteDomainReq* request, ::raltservice::DeleteDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteDomain(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getMisc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getMisc() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_getMisc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMisc(::grpc::ServerContext* context, const ::raltservice::GetMiscReq* request, ::raltservice::GetMiscRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMisc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_modMisc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_modMisc() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_modMisc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status modMisc(::grpc::ServerContext* context, const ::raltservice::ModMiscOpReq* request, ::raltservice::ModMiscOpRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmodMisc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getRule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getRule() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_getRule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRule(::grpc::ServerContext* context, const ::raltservice::GetRuleReq* request, ::raltservice::GetRuleRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRule(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_updateRule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_updateRule() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_updateRule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateRule(::grpc::ServerContext* context, const ::raltservice::UpdateRuleReq* request, ::raltservice::UpdateRuleRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateRule(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getCacheUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getCacheUrl() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_getCacheUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCacheUrl(::grpc::ServerContext* context, const ::raltservice::GetCacheUrlReq* request, ::raltservice::GetCacheUrlRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCacheUrl(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_isUrlInCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_isUrlInCache() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_isUrlInCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isUrlInCache(::grpc::ServerContext* context, const ::raltservice::IsUrlInCacheReq* request, ::raltservice::IsUrlInCacheRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisUrlInCache(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getRaltStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getRaltStatus() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_getRaltStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRaltStatus(::grpc::ServerContext* context, const ::raltservice::RaltStatusReq* request, ::grpc::ServerWriter< ::raltservice::RaltStatus>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRaltStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(20, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_execCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_execCmd() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_execCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status execCmd(::grpc::ServerContext* context, const ::raltservice::ExecCmdReq* request, ::raltservice::ExecCmdRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexecCmd(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getRaltStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getRaltStats() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_getRaltStats<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getRaltStats(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_getRaltStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRaltStats(::grpc::ServerContext* context, const ::raltservice::GetRaltStatsReq* request, ::raltservice::GetRaltStatsRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getRaltStats(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getStatsField : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getStatsField() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_getStatsField<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getStatsField(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_getStatsField() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatsField(::grpc::ServerContext* context, const ::raltservice::GetStatsFieldReq* request, ::raltservice::GetStatsFieldRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getStatsField(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getHomePageData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getHomePageData() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_getHomePageData<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getHomePageData(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_getHomePageData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHomePageData(::grpc::ServerContext* context, const ::raltservice::HomePageReq* request, ::raltservice::HomePageRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getHomePageData(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_showCacheData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_showCacheData() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_showCacheData<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->showCacheData(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_showCacheData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status showCacheData(::grpc::ServerContext* context, const ::raltservice::CacheLookUpReq* request, ::raltservice::CacheResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void showCacheData(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_showFlowStatData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_showFlowStatData() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_showFlowStatData<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->showFlowStatData(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_showFlowStatData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status showFlowStatData(::grpc::ServerContext* context, const ::raltservice::FlowStatLookUpReq* request, ::raltservice::FlowResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void showFlowStatData(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_showLogInfoData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_showLogInfoData() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_showLogInfoData<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->showLogInfoData(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_showLogInfoData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status showLogInfoData(::grpc::ServerContext* context, const ::raltservice::LogInfoLookUpReq* request, ::raltservice::LogResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void showLogInfoData(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getRaltLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getRaltLogs() {
    }
    ~ExperimentalWithRawCallbackMethod_getRaltLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRaltLogs(::grpc::ServerContext* context, const ::raltservice::GetRaltLogsReq* request, ::grpc::ServerWriter< ::raltservice::RaltLogs>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getBasicConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getBasicConfig() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_getBasicConfig<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getBasicConfig(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_getBasicConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBasicConfig(::grpc::ServerContext* context, const ::raltservice::GetBasicConfigReq* request, ::raltservice::GetBasicConfigRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getBasicConfig(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_setBasicConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_setBasicConfig() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_setBasicConfig<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->setBasicConfig(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_setBasicConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setBasicConfig(::grpc::ServerContext* context, const ::raltservice::SetBasicConfigReq* request, ::raltservice::SetBasicConfigRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void setBasicConfig(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getAllDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getAllDomain() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_getAllDomain<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getAllDomain(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_getAllDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllDomain(::grpc::ServerContext* context, const ::raltservice::GetAllDomainReq* request, ::raltservice::GetAllDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getAllDomain(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_updateDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_updateDomain() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_updateDomain<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->updateDomain(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_updateDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateDomain(::grpc::ServerContext* context, const ::raltservice::UpdateDomainReq* request, ::raltservice::UpdateDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void updateDomain(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getDomain() {
      ::grpc::Service::experimental().MarkMethodRawCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_getDomain<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getDomain(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_getDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDomain(::grpc::ServerContext* context, const ::raltservice::GetDomainReq* request, ::raltservice::GetDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getDomain(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_addDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_addDomain() {
      ::grpc::Service::experimental().MarkMethodRawCallback(12,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_addDomain<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->addDomain(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_addDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addDomain(::grpc::ServerContext* context, const ::raltservice::AddDomainReq* request, ::raltservice::AddDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void addDomain(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_deleteDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_deleteDomain() {
      ::grpc::Service::experimental().MarkMethodRawCallback(13,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_deleteDomain<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->deleteDomain(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_deleteDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteDomain(::grpc::ServerContext* context, const ::raltservice::DeleteDomainReq* request, ::raltservice::DeleteDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void deleteDomain(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getMisc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getMisc() {
      ::grpc::Service::experimental().MarkMethodRawCallback(14,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_getMisc<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getMisc(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_getMisc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMisc(::grpc::ServerContext* context, const ::raltservice::GetMiscReq* request, ::raltservice::GetMiscRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getMisc(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_modMisc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_modMisc() {
      ::grpc::Service::experimental().MarkMethodRawCallback(15,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_modMisc<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->modMisc(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_modMisc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status modMisc(::grpc::ServerContext* context, const ::raltservice::ModMiscOpReq* request, ::raltservice::ModMiscOpRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void modMisc(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getRule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getRule() {
      ::grpc::Service::experimental().MarkMethodRawCallback(16,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_getRule<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getRule(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_getRule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRule(::grpc::ServerContext* context, const ::raltservice::GetRuleReq* request, ::raltservice::GetRuleRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getRule(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_updateRule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_updateRule() {
      ::grpc::Service::experimental().MarkMethodRawCallback(17,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_updateRule<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->updateRule(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_updateRule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateRule(::grpc::ServerContext* context, const ::raltservice::UpdateRuleReq* request, ::raltservice::UpdateRuleRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void updateRule(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getCacheUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getCacheUrl() {
      ::grpc::Service::experimental().MarkMethodRawCallback(18,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_getCacheUrl<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getCacheUrl(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_getCacheUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCacheUrl(::grpc::ServerContext* context, const ::raltservice::GetCacheUrlReq* request, ::raltservice::GetCacheUrlRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getCacheUrl(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_isUrlInCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_isUrlInCache() {
      ::grpc::Service::experimental().MarkMethodRawCallback(19,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_isUrlInCache<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->isUrlInCache(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_isUrlInCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isUrlInCache(::grpc::ServerContext* context, const ::raltservice::IsUrlInCacheReq* request, ::raltservice::IsUrlInCacheRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void isUrlInCache(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getRaltStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getRaltStatus() {
    }
    ~ExperimentalWithRawCallbackMethod_getRaltStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRaltStatus(::grpc::ServerContext* context, const ::raltservice::RaltStatusReq* request, ::grpc::ServerWriter< ::raltservice::RaltStatus>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_execCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_execCmd() {
      ::grpc::Service::experimental().MarkMethodRawCallback(21,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_execCmd<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->execCmd(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_execCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status execCmd(::grpc::ServerContext* context, const ::raltservice::ExecCmdReq* request, ::raltservice::ExecCmdRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void execCmd(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getRaltStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getRaltStats() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::GetRaltStatsReq, ::raltservice::GetRaltStatsRsp>(std::bind(&WithStreamedUnaryMethod_getRaltStats<BaseClass>::StreamedgetRaltStats, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getRaltStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getRaltStats(::grpc::ServerContext* context, const ::raltservice::GetRaltStatsReq* request, ::raltservice::GetRaltStatsRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetRaltStats(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::GetRaltStatsReq,::raltservice::GetRaltStatsRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getStatsField : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getStatsField() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::GetStatsFieldReq, ::raltservice::GetStatsFieldRsp>(std::bind(&WithStreamedUnaryMethod_getStatsField<BaseClass>::StreamedgetStatsField, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getStatsField() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getStatsField(::grpc::ServerContext* context, const ::raltservice::GetStatsFieldReq* request, ::raltservice::GetStatsFieldRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetStatsField(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::GetStatsFieldReq,::raltservice::GetStatsFieldRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getHomePageData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getHomePageData() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::HomePageReq, ::raltservice::HomePageRsp>(std::bind(&WithStreamedUnaryMethod_getHomePageData<BaseClass>::StreamedgetHomePageData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getHomePageData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getHomePageData(::grpc::ServerContext* context, const ::raltservice::HomePageReq* request, ::raltservice::HomePageRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetHomePageData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::HomePageReq,::raltservice::HomePageRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_showCacheData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_showCacheData() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::CacheLookUpReq, ::raltservice::CacheResult>(std::bind(&WithStreamedUnaryMethod_showCacheData<BaseClass>::StreamedshowCacheData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_showCacheData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status showCacheData(::grpc::ServerContext* context, const ::raltservice::CacheLookUpReq* request, ::raltservice::CacheResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedshowCacheData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::CacheLookUpReq,::raltservice::CacheResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_showFlowStatData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_showFlowStatData() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::FlowStatLookUpReq, ::raltservice::FlowResult>(std::bind(&WithStreamedUnaryMethod_showFlowStatData<BaseClass>::StreamedshowFlowStatData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_showFlowStatData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status showFlowStatData(::grpc::ServerContext* context, const ::raltservice::FlowStatLookUpReq* request, ::raltservice::FlowResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedshowFlowStatData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::FlowStatLookUpReq,::raltservice::FlowResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_showLogInfoData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_showLogInfoData() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::LogInfoLookUpReq, ::raltservice::LogResult>(std::bind(&WithStreamedUnaryMethod_showLogInfoData<BaseClass>::StreamedshowLogInfoData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_showLogInfoData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status showLogInfoData(::grpc::ServerContext* context, const ::raltservice::LogInfoLookUpReq* request, ::raltservice::LogResult* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedshowLogInfoData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::LogInfoLookUpReq,::raltservice::LogResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getBasicConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getBasicConfig() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::GetBasicConfigReq, ::raltservice::GetBasicConfigRsp>(std::bind(&WithStreamedUnaryMethod_getBasicConfig<BaseClass>::StreamedgetBasicConfig, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getBasicConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getBasicConfig(::grpc::ServerContext* context, const ::raltservice::GetBasicConfigReq* request, ::raltservice::GetBasicConfigRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetBasicConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::GetBasicConfigReq,::raltservice::GetBasicConfigRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setBasicConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_setBasicConfig() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::SetBasicConfigReq, ::raltservice::SetBasicConfigRsp>(std::bind(&WithStreamedUnaryMethod_setBasicConfig<BaseClass>::StreamedsetBasicConfig, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_setBasicConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setBasicConfig(::grpc::ServerContext* context, const ::raltservice::SetBasicConfigReq* request, ::raltservice::SetBasicConfigRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetBasicConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::SetBasicConfigReq,::raltservice::SetBasicConfigRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getAllDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getAllDomain() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::GetAllDomainReq, ::raltservice::GetAllDomainRsp>(std::bind(&WithStreamedUnaryMethod_getAllDomain<BaseClass>::StreamedgetAllDomain, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getAllDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getAllDomain(::grpc::ServerContext* context, const ::raltservice::GetAllDomainReq* request, ::raltservice::GetAllDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetAllDomain(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::GetAllDomainReq,::raltservice::GetAllDomainRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_updateDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_updateDomain() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::UpdateDomainReq, ::raltservice::UpdateDomainRsp>(std::bind(&WithStreamedUnaryMethod_updateDomain<BaseClass>::StreamedupdateDomain, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_updateDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status updateDomain(::grpc::ServerContext* context, const ::raltservice::UpdateDomainReq* request, ::raltservice::UpdateDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedupdateDomain(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::UpdateDomainReq,::raltservice::UpdateDomainRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getDomain() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::GetDomainReq, ::raltservice::GetDomainRsp>(std::bind(&WithStreamedUnaryMethod_getDomain<BaseClass>::StreamedgetDomain, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDomain(::grpc::ServerContext* context, const ::raltservice::GetDomainReq* request, ::raltservice::GetDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDomain(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::GetDomainReq,::raltservice::GetDomainRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_addDomain() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::AddDomainReq, ::raltservice::AddDomainRsp>(std::bind(&WithStreamedUnaryMethod_addDomain<BaseClass>::StreamedaddDomain, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_addDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addDomain(::grpc::ServerContext* context, const ::raltservice::AddDomainReq* request, ::raltservice::AddDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddDomain(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::AddDomainReq,::raltservice::AddDomainRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deleteDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_deleteDomain() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::DeleteDomainReq, ::raltservice::DeleteDomainRsp>(std::bind(&WithStreamedUnaryMethod_deleteDomain<BaseClass>::StreameddeleteDomain, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_deleteDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deleteDomain(::grpc::ServerContext* context, const ::raltservice::DeleteDomainReq* request, ::raltservice::DeleteDomainRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddeleteDomain(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::DeleteDomainReq,::raltservice::DeleteDomainRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getMisc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getMisc() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::GetMiscReq, ::raltservice::GetMiscRsp>(std::bind(&WithStreamedUnaryMethod_getMisc<BaseClass>::StreamedgetMisc, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getMisc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getMisc(::grpc::ServerContext* context, const ::raltservice::GetMiscReq* request, ::raltservice::GetMiscRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetMisc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::GetMiscReq,::raltservice::GetMiscRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_modMisc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_modMisc() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::ModMiscOpReq, ::raltservice::ModMiscOpRsp>(std::bind(&WithStreamedUnaryMethod_modMisc<BaseClass>::StreamedmodMisc, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_modMisc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status modMisc(::grpc::ServerContext* context, const ::raltservice::ModMiscOpReq* request, ::raltservice::ModMiscOpRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedmodMisc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::ModMiscOpReq,::raltservice::ModMiscOpRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getRule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getRule() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::GetRuleReq, ::raltservice::GetRuleRsp>(std::bind(&WithStreamedUnaryMethod_getRule<BaseClass>::StreamedgetRule, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getRule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getRule(::grpc::ServerContext* context, const ::raltservice::GetRuleReq* request, ::raltservice::GetRuleRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetRule(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::GetRuleReq,::raltservice::GetRuleRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_updateRule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_updateRule() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::UpdateRuleReq, ::raltservice::UpdateRuleRsp>(std::bind(&WithStreamedUnaryMethod_updateRule<BaseClass>::StreamedupdateRule, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_updateRule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status updateRule(::grpc::ServerContext* context, const ::raltservice::UpdateRuleReq* request, ::raltservice::UpdateRuleRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedupdateRule(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::UpdateRuleReq,::raltservice::UpdateRuleRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getCacheUrl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getCacheUrl() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::GetCacheUrlReq, ::raltservice::GetCacheUrlRsp>(std::bind(&WithStreamedUnaryMethod_getCacheUrl<BaseClass>::StreamedgetCacheUrl, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getCacheUrl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getCacheUrl(::grpc::ServerContext* context, const ::raltservice::GetCacheUrlReq* request, ::raltservice::GetCacheUrlRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetCacheUrl(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::GetCacheUrlReq,::raltservice::GetCacheUrlRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isUrlInCache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_isUrlInCache() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::IsUrlInCacheReq, ::raltservice::IsUrlInCacheRsp>(std::bind(&WithStreamedUnaryMethod_isUrlInCache<BaseClass>::StreamedisUrlInCache, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_isUrlInCache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isUrlInCache(::grpc::ServerContext* context, const ::raltservice::IsUrlInCacheReq* request, ::raltservice::IsUrlInCacheRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisUrlInCache(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::IsUrlInCacheReq,::raltservice::IsUrlInCacheRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_execCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_execCmd() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::ExecCmdReq, ::raltservice::ExecCmdRsp>(std::bind(&WithStreamedUnaryMethod_execCmd<BaseClass>::StreamedexecCmd, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_execCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status execCmd(::grpc::ServerContext* context, const ::raltservice::ExecCmdReq* request, ::raltservice::ExecCmdRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedexecCmd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::ExecCmdReq,::raltservice::ExecCmdRsp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getRaltStats<WithStreamedUnaryMethod_getStatsField<WithStreamedUnaryMethod_getHomePageData<WithStreamedUnaryMethod_showCacheData<WithStreamedUnaryMethod_showFlowStatData<WithStreamedUnaryMethod_showLogInfoData<WithStreamedUnaryMethod_getBasicConfig<WithStreamedUnaryMethod_setBasicConfig<WithStreamedUnaryMethod_getAllDomain<WithStreamedUnaryMethod_updateDomain<WithStreamedUnaryMethod_getDomain<WithStreamedUnaryMethod_addDomain<WithStreamedUnaryMethod_deleteDomain<WithStreamedUnaryMethod_getMisc<WithStreamedUnaryMethod_modMisc<WithStreamedUnaryMethod_getRule<WithStreamedUnaryMethod_updateRule<WithStreamedUnaryMethod_getCacheUrl<WithStreamedUnaryMethod_isUrlInCache<WithStreamedUnaryMethod_execCmd<Service > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_getRaltLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_getRaltLogs() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler< ::raltservice::GetRaltLogsReq, ::raltservice::RaltLogs>(std::bind(&WithSplitStreamingMethod_getRaltLogs<BaseClass>::StreamedgetRaltLogs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_getRaltLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getRaltLogs(::grpc::ServerContext* context, const ::raltservice::GetRaltLogsReq* request, ::grpc::ServerWriter< ::raltservice::RaltLogs>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedgetRaltLogs(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::raltservice::GetRaltLogsReq,::raltservice::RaltLogs>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_getRaltStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_getRaltStatus() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::SplitServerStreamingHandler< ::raltservice::RaltStatusReq, ::raltservice::RaltStatus>(std::bind(&WithSplitStreamingMethod_getRaltStatus<BaseClass>::StreamedgetRaltStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_getRaltStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getRaltStatus(::grpc::ServerContext* context, const ::raltservice::RaltStatusReq* request, ::grpc::ServerWriter< ::raltservice::RaltStatus>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedgetRaltStatus(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::raltservice::RaltStatusReq,::raltservice::RaltStatus>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_getRaltLogs<WithSplitStreamingMethod_getRaltStatus<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_getRaltStats<WithStreamedUnaryMethod_getStatsField<WithStreamedUnaryMethod_getHomePageData<WithStreamedUnaryMethod_showCacheData<WithStreamedUnaryMethod_showFlowStatData<WithStreamedUnaryMethod_showLogInfoData<WithSplitStreamingMethod_getRaltLogs<WithStreamedUnaryMethod_getBasicConfig<WithStreamedUnaryMethod_setBasicConfig<WithStreamedUnaryMethod_getAllDomain<WithStreamedUnaryMethod_updateDomain<WithStreamedUnaryMethod_getDomain<WithStreamedUnaryMethod_addDomain<WithStreamedUnaryMethod_deleteDomain<WithStreamedUnaryMethod_getMisc<WithStreamedUnaryMethod_modMisc<WithStreamedUnaryMethod_getRule<WithStreamedUnaryMethod_updateRule<WithStreamedUnaryMethod_getCacheUrl<WithStreamedUnaryMethod_isUrlInCache<WithSplitStreamingMethod_getRaltStatus<WithStreamedUnaryMethod_execCmd<Service > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace raltservice


#endif  // GRPC_ralt_2dservice_2eproto__INCLUDED
