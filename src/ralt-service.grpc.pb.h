// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ralt-service.proto
#ifndef GRPC_ralt_2dservice_2eproto__INCLUDED
#define GRPC_ralt_2dservice_2eproto__INCLUDED

#include "ralt-service.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace raltservice {

class RaltService final {
 public:
  static constexpr char const* service_full_name() {
    return "raltservice.RaltService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // ats stats
    virtual ::grpc::Status getRaltStats(::grpc::ClientContext* context, const ::raltservice::GetRaltStatsReq& request, ::raltservice::GetRaltStatsRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetRaltStatsRsp>> AsyncgetRaltStats(::grpc::ClientContext* context, const ::raltservice::GetRaltStatsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetRaltStatsRsp>>(AsyncgetRaltStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetRaltStatsRsp>> PrepareAsyncgetRaltStats(::grpc::ClientContext* context, const ::raltservice::GetRaltStatsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetRaltStatsRsp>>(PrepareAsyncgetRaltStatsRaw(context, request, cq));
    }
    virtual ::grpc::Status getStatsFieldValue(::grpc::ClientContext* context, const ::raltservice::StatsFieldName& request, ::raltservice::StatsFieldValue* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::StatsFieldValue>> AsyncgetStatsFieldValue(::grpc::ClientContext* context, const ::raltservice::StatsFieldName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::StatsFieldValue>>(AsyncgetStatsFieldValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::StatsFieldValue>> PrepareAsyncgetStatsFieldValue(::grpc::ClientContext* context, const ::raltservice::StatsFieldName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::StatsFieldValue>>(PrepareAsyncgetStatsFieldValueRaw(context, request, cq));
    }
    virtual ::grpc::Status getHomePageData(::grpc::ClientContext* context, const ::raltservice::HomePageReq& request, ::raltservice::HomePageRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::HomePageRsp>> AsyncgetHomePageData(::grpc::ClientContext* context, const ::raltservice::HomePageReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::HomePageRsp>>(AsyncgetHomePageDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::HomePageRsp>> PrepareAsyncgetHomePageData(::grpc::ClientContext* context, const ::raltservice::HomePageReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::HomePageRsp>>(PrepareAsyncgetHomePageDataRaw(context, request, cq));
    }
    virtual ::grpc::Status showCacheData(::grpc::ClientContext* context, const ::raltservice::CacheLookUpReq& request, ::raltservice::CacheResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::CacheResult>> AsyncshowCacheData(::grpc::ClientContext* context, const ::raltservice::CacheLookUpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::CacheResult>>(AsyncshowCacheDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::CacheResult>> PrepareAsyncshowCacheData(::grpc::ClientContext* context, const ::raltservice::CacheLookUpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::CacheResult>>(PrepareAsyncshowCacheDataRaw(context, request, cq));
    }
    // flow related
    virtual ::grpc::Status showFlowStatData(::grpc::ClientContext* context, const ::raltservice::FlowStatLookUpReq& request, ::raltservice::FlowResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::FlowResult>> AsyncshowFlowStatData(::grpc::ClientContext* context, const ::raltservice::FlowStatLookUpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::FlowResult>>(AsyncshowFlowStatDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::FlowResult>> PrepareAsyncshowFlowStatData(::grpc::ClientContext* context, const ::raltservice::FlowStatLookUpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::FlowResult>>(PrepareAsyncshowFlowStatDataRaw(context, request, cq));
    }
    // logs related
    virtual ::grpc::Status showLogInfoData(::grpc::ClientContext* context, const ::raltservice::LogInfoLookUpReq& request, ::raltservice::LogResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::LogResult>> AsyncshowLogInfoData(::grpc::ClientContext* context, const ::raltservice::LogInfoLookUpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::LogResult>>(AsyncshowLogInfoDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::LogResult>> PrepareAsyncshowLogInfoData(::grpc::ClientContext* context, const ::raltservice::LogInfoLookUpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::LogResult>>(PrepareAsyncshowLogInfoDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::raltservice::RaltLogs>> getRaltLogs(::grpc::ClientContext* context, const ::raltservice::GetRaltLogsReq& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::raltservice::RaltLogs>>(getRaltLogsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::raltservice::RaltLogs>> AsyncgetRaltLogs(::grpc::ClientContext* context, const ::raltservice::GetRaltLogsReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::raltservice::RaltLogs>>(AsyncgetRaltLogsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::raltservice::RaltLogs>> PrepareAsyncgetRaltLogs(::grpc::ClientContext* context, const ::raltservice::GetRaltLogsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::raltservice::RaltLogs>>(PrepareAsyncgetRaltLogsRaw(context, request, cq));
    }
    // configure
    // basic config, main for record.config
    virtual ::grpc::Status getBasicConfig(::grpc::ClientContext* context, const ::raltservice::GetBasicConfigReq& request, ::raltservice::GetBasicConfigRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetBasicConfigRsp>> AsyncgetBasicConfig(::grpc::ClientContext* context, const ::raltservice::GetBasicConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetBasicConfigRsp>>(AsyncgetBasicConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetBasicConfigRsp>> PrepareAsyncgetBasicConfig(::grpc::ClientContext* context, const ::raltservice::GetBasicConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetBasicConfigRsp>>(PrepareAsyncgetBasicConfigRaw(context, request, cq));
    }
    virtual ::grpc::Status setBasicConfig(::grpc::ClientContext* context, const ::raltservice::SetBasicConfigReq& request, ::raltservice::SetBasicConfigRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::SetBasicConfigRsp>> AsyncsetBasicConfig(::grpc::ClientContext* context, const ::raltservice::SetBasicConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::SetBasicConfigRsp>>(AsyncsetBasicConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::SetBasicConfigRsp>> PrepareAsyncsetBasicConfig(::grpc::ClientContext* context, const ::raltservice::SetBasicConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::SetBasicConfigRsp>>(PrepareAsyncsetBasicConfigRaw(context, request, cq));
    }
    // ralt.domain.conf
    std::unique_ptr< ::grpc::ClientReaderInterface< ::raltservice::Domain>> getAllDomain(::grpc::ClientContext* context, const ::raltservice::GetAllDomainReq& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::raltservice::Domain>>(getAllDomainRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::raltservice::Domain>> AsyncgetAllDomain(::grpc::ClientContext* context, const ::raltservice::GetAllDomainReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::raltservice::Domain>>(AsyncgetAllDomainRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::raltservice::Domain>> PrepareAsyncgetAllDomain(::grpc::ClientContext* context, const ::raltservice::GetAllDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::raltservice::Domain>>(PrepareAsyncgetAllDomainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::raltservice::Domain>> updateDomain(::grpc::ClientContext* context, ::raltservice::UpdateDomainRsp* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::raltservice::Domain>>(updateDomainRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::raltservice::Domain>> AsyncupdateDomain(::grpc::ClientContext* context, ::raltservice::UpdateDomainRsp* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::raltservice::Domain>>(AsyncupdateDomainRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::raltservice::Domain>> PrepareAsyncupdateDomain(::grpc::ClientContext* context, ::raltservice::UpdateDomainRsp* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::raltservice::Domain>>(PrepareAsyncupdateDomainRaw(context, response, cq));
    }
    virtual ::grpc::Status getDomain(::grpc::ClientContext* context, const ::raltservice::GetDomainReq& request, ::raltservice::Domain* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::Domain>> AsyncgetDomain(::grpc::ClientContext* context, const ::raltservice::GetDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::Domain>>(AsyncgetDomainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::Domain>> PrepareAsyncgetDomain(::grpc::ClientContext* context, const ::raltservice::GetDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::Domain>>(PrepareAsyncgetDomainRaw(context, request, cq));
    }
    virtual ::grpc::Status addDomain(::grpc::ClientContext* context, const ::raltservice::Domain& request, ::raltservice::AddDomainRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::AddDomainRsp>> AsyncaddDomain(::grpc::ClientContext* context, const ::raltservice::Domain& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::AddDomainRsp>>(AsyncaddDomainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::AddDomainRsp>> PrepareAsyncaddDomain(::grpc::ClientContext* context, const ::raltservice::Domain& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::AddDomainRsp>>(PrepareAsyncaddDomainRaw(context, request, cq));
    }
    virtual ::grpc::Status deleteDomain(::grpc::ClientContext* context, const ::raltservice::DeleteDomainReq& request, ::raltservice::DeleteDomainRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::DeleteDomainRsp>> AsyncdeleteDomain(::grpc::ClientContext* context, const ::raltservice::DeleteDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::DeleteDomainRsp>>(AsyncdeleteDomainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::DeleteDomainRsp>> PrepareAsyncdeleteDomain(::grpc::ClientContext* context, const ::raltservice::DeleteDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::DeleteDomainRsp>>(PrepareAsyncdeleteDomainRaw(context, request, cq));
    }
    // ralt.miscellaneous.conf
    virtual ::grpc::Status getMisc(::grpc::ClientContext* context, const ::raltservice::GetMiscReq& request, ::raltservice::GetMiscRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetMiscRsp>> AsyncgetMisc(::grpc::ClientContext* context, const ::raltservice::GetMiscReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetMiscRsp>>(AsyncgetMiscRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetMiscRsp>> PrepareAsyncgetMisc(::grpc::ClientContext* context, const ::raltservice::GetMiscReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetMiscRsp>>(PrepareAsyncgetMiscRaw(context, request, cq));
    }
    virtual ::grpc::Status modMisc(::grpc::ClientContext* context, const ::raltservice::Misc& request, ::raltservice::ModMiscOpRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::ModMiscOpRsp>> AsyncmodMisc(::grpc::ClientContext* context, const ::raltservice::Misc& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::ModMiscOpRsp>>(AsyncmodMiscRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::ModMiscOpRsp>> PrepareAsyncmodMisc(::grpc::ClientContext* context, const ::raltservice::Misc& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::ModMiscOpRsp>>(PrepareAsyncmodMiscRaw(context, request, cq));
    }
    // ralt status: 
    std::unique_ptr< ::grpc::ClientReaderInterface< ::raltservice::RaltStatus>> getRaltStatus(::grpc::ClientContext* context, const ::raltservice::RaltStatusReq& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::raltservice::RaltStatus>>(getRaltStatusRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::raltservice::RaltStatus>> AsyncgetRaltStatus(::grpc::ClientContext* context, const ::raltservice::RaltStatusReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::raltservice::RaltStatus>>(AsyncgetRaltStatusRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::raltservice::RaltStatus>> PrepareAsyncgetRaltStatus(::grpc::ClientContext* context, const ::raltservice::RaltStatusReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::raltservice::RaltStatus>>(PrepareAsyncgetRaltStatusRaw(context, request, cq));
    }
    // exec cmd
    virtual ::grpc::Status execCmd(::grpc::ClientContext* context, const ::raltservice::ExecCmdReq& request, ::raltservice::ExecCmdRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::ExecCmdRsp>> AsyncexecCmd(::grpc::ClientContext* context, const ::raltservice::ExecCmdReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::ExecCmdRsp>>(AsyncexecCmdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::ExecCmdRsp>> PrepareAsyncexecCmd(::grpc::ClientContext* context, const ::raltservice::ExecCmdReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::ExecCmdRsp>>(PrepareAsyncexecCmdRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetRaltStatsRsp>* AsyncgetRaltStatsRaw(::grpc::ClientContext* context, const ::raltservice::GetRaltStatsReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetRaltStatsRsp>* PrepareAsyncgetRaltStatsRaw(::grpc::ClientContext* context, const ::raltservice::GetRaltStatsReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::StatsFieldValue>* AsyncgetStatsFieldValueRaw(::grpc::ClientContext* context, const ::raltservice::StatsFieldName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::StatsFieldValue>* PrepareAsyncgetStatsFieldValueRaw(::grpc::ClientContext* context, const ::raltservice::StatsFieldName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::HomePageRsp>* AsyncgetHomePageDataRaw(::grpc::ClientContext* context, const ::raltservice::HomePageReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::HomePageRsp>* PrepareAsyncgetHomePageDataRaw(::grpc::ClientContext* context, const ::raltservice::HomePageReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::CacheResult>* AsyncshowCacheDataRaw(::grpc::ClientContext* context, const ::raltservice::CacheLookUpReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::CacheResult>* PrepareAsyncshowCacheDataRaw(::grpc::ClientContext* context, const ::raltservice::CacheLookUpReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::FlowResult>* AsyncshowFlowStatDataRaw(::grpc::ClientContext* context, const ::raltservice::FlowStatLookUpReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::FlowResult>* PrepareAsyncshowFlowStatDataRaw(::grpc::ClientContext* context, const ::raltservice::FlowStatLookUpReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::LogResult>* AsyncshowLogInfoDataRaw(::grpc::ClientContext* context, const ::raltservice::LogInfoLookUpReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::LogResult>* PrepareAsyncshowLogInfoDataRaw(::grpc::ClientContext* context, const ::raltservice::LogInfoLookUpReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::raltservice::RaltLogs>* getRaltLogsRaw(::grpc::ClientContext* context, const ::raltservice::GetRaltLogsReq& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::raltservice::RaltLogs>* AsyncgetRaltLogsRaw(::grpc::ClientContext* context, const ::raltservice::GetRaltLogsReq& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::raltservice::RaltLogs>* PrepareAsyncgetRaltLogsRaw(::grpc::ClientContext* context, const ::raltservice::GetRaltLogsReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetBasicConfigRsp>* AsyncgetBasicConfigRaw(::grpc::ClientContext* context, const ::raltservice::GetBasicConfigReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetBasicConfigRsp>* PrepareAsyncgetBasicConfigRaw(::grpc::ClientContext* context, const ::raltservice::GetBasicConfigReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::SetBasicConfigRsp>* AsyncsetBasicConfigRaw(::grpc::ClientContext* context, const ::raltservice::SetBasicConfigReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::SetBasicConfigRsp>* PrepareAsyncsetBasicConfigRaw(::grpc::ClientContext* context, const ::raltservice::SetBasicConfigReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::raltservice::Domain>* getAllDomainRaw(::grpc::ClientContext* context, const ::raltservice::GetAllDomainReq& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::raltservice::Domain>* AsyncgetAllDomainRaw(::grpc::ClientContext* context, const ::raltservice::GetAllDomainReq& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::raltservice::Domain>* PrepareAsyncgetAllDomainRaw(::grpc::ClientContext* context, const ::raltservice::GetAllDomainReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::raltservice::Domain>* updateDomainRaw(::grpc::ClientContext* context, ::raltservice::UpdateDomainRsp* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::raltservice::Domain>* AsyncupdateDomainRaw(::grpc::ClientContext* context, ::raltservice::UpdateDomainRsp* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::raltservice::Domain>* PrepareAsyncupdateDomainRaw(::grpc::ClientContext* context, ::raltservice::UpdateDomainRsp* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::Domain>* AsyncgetDomainRaw(::grpc::ClientContext* context, const ::raltservice::GetDomainReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::Domain>* PrepareAsyncgetDomainRaw(::grpc::ClientContext* context, const ::raltservice::GetDomainReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::AddDomainRsp>* AsyncaddDomainRaw(::grpc::ClientContext* context, const ::raltservice::Domain& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::AddDomainRsp>* PrepareAsyncaddDomainRaw(::grpc::ClientContext* context, const ::raltservice::Domain& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::DeleteDomainRsp>* AsyncdeleteDomainRaw(::grpc::ClientContext* context, const ::raltservice::DeleteDomainReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::DeleteDomainRsp>* PrepareAsyncdeleteDomainRaw(::grpc::ClientContext* context, const ::raltservice::DeleteDomainReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetMiscRsp>* AsyncgetMiscRaw(::grpc::ClientContext* context, const ::raltservice::GetMiscReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::GetMiscRsp>* PrepareAsyncgetMiscRaw(::grpc::ClientContext* context, const ::raltservice::GetMiscReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::ModMiscOpRsp>* AsyncmodMiscRaw(::grpc::ClientContext* context, const ::raltservice::Misc& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::ModMiscOpRsp>* PrepareAsyncmodMiscRaw(::grpc::ClientContext* context, const ::raltservice::Misc& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::raltservice::RaltStatus>* getRaltStatusRaw(::grpc::ClientContext* context, const ::raltservice::RaltStatusReq& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::raltservice::RaltStatus>* AsyncgetRaltStatusRaw(::grpc::ClientContext* context, const ::raltservice::RaltStatusReq& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::raltservice::RaltStatus>* PrepareAsyncgetRaltStatusRaw(::grpc::ClientContext* context, const ::raltservice::RaltStatusReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::ExecCmdRsp>* AsyncexecCmdRaw(::grpc::ClientContext* context, const ::raltservice::ExecCmdReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::raltservice::ExecCmdRsp>* PrepareAsyncexecCmdRaw(::grpc::ClientContext* context, const ::raltservice::ExecCmdReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status getRaltStats(::grpc::ClientContext* context, const ::raltservice::GetRaltStatsReq& request, ::raltservice::GetRaltStatsRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetRaltStatsRsp>> AsyncgetRaltStats(::grpc::ClientContext* context, const ::raltservice::GetRaltStatsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetRaltStatsRsp>>(AsyncgetRaltStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetRaltStatsRsp>> PrepareAsyncgetRaltStats(::grpc::ClientContext* context, const ::raltservice::GetRaltStatsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetRaltStatsRsp>>(PrepareAsyncgetRaltStatsRaw(context, request, cq));
    }
    ::grpc::Status getStatsFieldValue(::grpc::ClientContext* context, const ::raltservice::StatsFieldName& request, ::raltservice::StatsFieldValue* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::StatsFieldValue>> AsyncgetStatsFieldValue(::grpc::ClientContext* context, const ::raltservice::StatsFieldName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::StatsFieldValue>>(AsyncgetStatsFieldValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::StatsFieldValue>> PrepareAsyncgetStatsFieldValue(::grpc::ClientContext* context, const ::raltservice::StatsFieldName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::StatsFieldValue>>(PrepareAsyncgetStatsFieldValueRaw(context, request, cq));
    }
    ::grpc::Status getHomePageData(::grpc::ClientContext* context, const ::raltservice::HomePageReq& request, ::raltservice::HomePageRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::HomePageRsp>> AsyncgetHomePageData(::grpc::ClientContext* context, const ::raltservice::HomePageReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::HomePageRsp>>(AsyncgetHomePageDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::HomePageRsp>> PrepareAsyncgetHomePageData(::grpc::ClientContext* context, const ::raltservice::HomePageReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::HomePageRsp>>(PrepareAsyncgetHomePageDataRaw(context, request, cq));
    }
    ::grpc::Status showCacheData(::grpc::ClientContext* context, const ::raltservice::CacheLookUpReq& request, ::raltservice::CacheResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::CacheResult>> AsyncshowCacheData(::grpc::ClientContext* context, const ::raltservice::CacheLookUpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::CacheResult>>(AsyncshowCacheDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::CacheResult>> PrepareAsyncshowCacheData(::grpc::ClientContext* context, const ::raltservice::CacheLookUpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::CacheResult>>(PrepareAsyncshowCacheDataRaw(context, request, cq));
    }
    ::grpc::Status showFlowStatData(::grpc::ClientContext* context, const ::raltservice::FlowStatLookUpReq& request, ::raltservice::FlowResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::FlowResult>> AsyncshowFlowStatData(::grpc::ClientContext* context, const ::raltservice::FlowStatLookUpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::FlowResult>>(AsyncshowFlowStatDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::FlowResult>> PrepareAsyncshowFlowStatData(::grpc::ClientContext* context, const ::raltservice::FlowStatLookUpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::FlowResult>>(PrepareAsyncshowFlowStatDataRaw(context, request, cq));
    }
    ::grpc::Status showLogInfoData(::grpc::ClientContext* context, const ::raltservice::LogInfoLookUpReq& request, ::raltservice::LogResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::LogResult>> AsyncshowLogInfoData(::grpc::ClientContext* context, const ::raltservice::LogInfoLookUpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::LogResult>>(AsyncshowLogInfoDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::LogResult>> PrepareAsyncshowLogInfoData(::grpc::ClientContext* context, const ::raltservice::LogInfoLookUpReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::LogResult>>(PrepareAsyncshowLogInfoDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::raltservice::RaltLogs>> getRaltLogs(::grpc::ClientContext* context, const ::raltservice::GetRaltLogsReq& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::raltservice::RaltLogs>>(getRaltLogsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::raltservice::RaltLogs>> AsyncgetRaltLogs(::grpc::ClientContext* context, const ::raltservice::GetRaltLogsReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::raltservice::RaltLogs>>(AsyncgetRaltLogsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::raltservice::RaltLogs>> PrepareAsyncgetRaltLogs(::grpc::ClientContext* context, const ::raltservice::GetRaltLogsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::raltservice::RaltLogs>>(PrepareAsyncgetRaltLogsRaw(context, request, cq));
    }
    ::grpc::Status getBasicConfig(::grpc::ClientContext* context, const ::raltservice::GetBasicConfigReq& request, ::raltservice::GetBasicConfigRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetBasicConfigRsp>> AsyncgetBasicConfig(::grpc::ClientContext* context, const ::raltservice::GetBasicConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetBasicConfigRsp>>(AsyncgetBasicConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetBasicConfigRsp>> PrepareAsyncgetBasicConfig(::grpc::ClientContext* context, const ::raltservice::GetBasicConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetBasicConfigRsp>>(PrepareAsyncgetBasicConfigRaw(context, request, cq));
    }
    ::grpc::Status setBasicConfig(::grpc::ClientContext* context, const ::raltservice::SetBasicConfigReq& request, ::raltservice::SetBasicConfigRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::SetBasicConfigRsp>> AsyncsetBasicConfig(::grpc::ClientContext* context, const ::raltservice::SetBasicConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::SetBasicConfigRsp>>(AsyncsetBasicConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::SetBasicConfigRsp>> PrepareAsyncsetBasicConfig(::grpc::ClientContext* context, const ::raltservice::SetBasicConfigReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::SetBasicConfigRsp>>(PrepareAsyncsetBasicConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::raltservice::Domain>> getAllDomain(::grpc::ClientContext* context, const ::raltservice::GetAllDomainReq& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::raltservice::Domain>>(getAllDomainRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::raltservice::Domain>> AsyncgetAllDomain(::grpc::ClientContext* context, const ::raltservice::GetAllDomainReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::raltservice::Domain>>(AsyncgetAllDomainRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::raltservice::Domain>> PrepareAsyncgetAllDomain(::grpc::ClientContext* context, const ::raltservice::GetAllDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::raltservice::Domain>>(PrepareAsyncgetAllDomainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::raltservice::Domain>> updateDomain(::grpc::ClientContext* context, ::raltservice::UpdateDomainRsp* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::raltservice::Domain>>(updateDomainRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::raltservice::Domain>> AsyncupdateDomain(::grpc::ClientContext* context, ::raltservice::UpdateDomainRsp* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::raltservice::Domain>>(AsyncupdateDomainRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::raltservice::Domain>> PrepareAsyncupdateDomain(::grpc::ClientContext* context, ::raltservice::UpdateDomainRsp* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::raltservice::Domain>>(PrepareAsyncupdateDomainRaw(context, response, cq));
    }
    ::grpc::Status getDomain(::grpc::ClientContext* context, const ::raltservice::GetDomainReq& request, ::raltservice::Domain* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::Domain>> AsyncgetDomain(::grpc::ClientContext* context, const ::raltservice::GetDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::Domain>>(AsyncgetDomainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::Domain>> PrepareAsyncgetDomain(::grpc::ClientContext* context, const ::raltservice::GetDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::Domain>>(PrepareAsyncgetDomainRaw(context, request, cq));
    }
    ::grpc::Status addDomain(::grpc::ClientContext* context, const ::raltservice::Domain& request, ::raltservice::AddDomainRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::AddDomainRsp>> AsyncaddDomain(::grpc::ClientContext* context, const ::raltservice::Domain& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::AddDomainRsp>>(AsyncaddDomainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::AddDomainRsp>> PrepareAsyncaddDomain(::grpc::ClientContext* context, const ::raltservice::Domain& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::AddDomainRsp>>(PrepareAsyncaddDomainRaw(context, request, cq));
    }
    ::grpc::Status deleteDomain(::grpc::ClientContext* context, const ::raltservice::DeleteDomainReq& request, ::raltservice::DeleteDomainRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::DeleteDomainRsp>> AsyncdeleteDomain(::grpc::ClientContext* context, const ::raltservice::DeleteDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::DeleteDomainRsp>>(AsyncdeleteDomainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::DeleteDomainRsp>> PrepareAsyncdeleteDomain(::grpc::ClientContext* context, const ::raltservice::DeleteDomainReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::DeleteDomainRsp>>(PrepareAsyncdeleteDomainRaw(context, request, cq));
    }
    ::grpc::Status getMisc(::grpc::ClientContext* context, const ::raltservice::GetMiscReq& request, ::raltservice::GetMiscRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetMiscRsp>> AsyncgetMisc(::grpc::ClientContext* context, const ::raltservice::GetMiscReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetMiscRsp>>(AsyncgetMiscRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetMiscRsp>> PrepareAsyncgetMisc(::grpc::ClientContext* context, const ::raltservice::GetMiscReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::GetMiscRsp>>(PrepareAsyncgetMiscRaw(context, request, cq));
    }
    ::grpc::Status modMisc(::grpc::ClientContext* context, const ::raltservice::Misc& request, ::raltservice::ModMiscOpRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::ModMiscOpRsp>> AsyncmodMisc(::grpc::ClientContext* context, const ::raltservice::Misc& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::ModMiscOpRsp>>(AsyncmodMiscRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::ModMiscOpRsp>> PrepareAsyncmodMisc(::grpc::ClientContext* context, const ::raltservice::Misc& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::ModMiscOpRsp>>(PrepareAsyncmodMiscRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::raltservice::RaltStatus>> getRaltStatus(::grpc::ClientContext* context, const ::raltservice::RaltStatusReq& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::raltservice::RaltStatus>>(getRaltStatusRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::raltservice::RaltStatus>> AsyncgetRaltStatus(::grpc::ClientContext* context, const ::raltservice::RaltStatusReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::raltservice::RaltStatus>>(AsyncgetRaltStatusRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::raltservice::RaltStatus>> PrepareAsyncgetRaltStatus(::grpc::ClientContext* context, const ::raltservice::RaltStatusReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::raltservice::RaltStatus>>(PrepareAsyncgetRaltStatusRaw(context, request, cq));
    }
    ::grpc::Status execCmd(::grpc::ClientContext* context, const ::raltservice::ExecCmdReq& request, ::raltservice::ExecCmdRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::ExecCmdRsp>> AsyncexecCmd(::grpc::ClientContext* context, const ::raltservice::ExecCmdReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::ExecCmdRsp>>(AsyncexecCmdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::ExecCmdRsp>> PrepareAsyncexecCmd(::grpc::ClientContext* context, const ::raltservice::ExecCmdReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::raltservice::ExecCmdRsp>>(PrepareAsyncexecCmdRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::raltservice::GetRaltStatsRsp>* AsyncgetRaltStatsRaw(::grpc::ClientContext* context, const ::raltservice::GetRaltStatsReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::GetRaltStatsRsp>* PrepareAsyncgetRaltStatsRaw(::grpc::ClientContext* context, const ::raltservice::GetRaltStatsReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::StatsFieldValue>* AsyncgetStatsFieldValueRaw(::grpc::ClientContext* context, const ::raltservice::StatsFieldName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::StatsFieldValue>* PrepareAsyncgetStatsFieldValueRaw(::grpc::ClientContext* context, const ::raltservice::StatsFieldName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::HomePageRsp>* AsyncgetHomePageDataRaw(::grpc::ClientContext* context, const ::raltservice::HomePageReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::HomePageRsp>* PrepareAsyncgetHomePageDataRaw(::grpc::ClientContext* context, const ::raltservice::HomePageReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::CacheResult>* AsyncshowCacheDataRaw(::grpc::ClientContext* context, const ::raltservice::CacheLookUpReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::CacheResult>* PrepareAsyncshowCacheDataRaw(::grpc::ClientContext* context, const ::raltservice::CacheLookUpReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::FlowResult>* AsyncshowFlowStatDataRaw(::grpc::ClientContext* context, const ::raltservice::FlowStatLookUpReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::FlowResult>* PrepareAsyncshowFlowStatDataRaw(::grpc::ClientContext* context, const ::raltservice::FlowStatLookUpReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::LogResult>* AsyncshowLogInfoDataRaw(::grpc::ClientContext* context, const ::raltservice::LogInfoLookUpReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::LogResult>* PrepareAsyncshowLogInfoDataRaw(::grpc::ClientContext* context, const ::raltservice::LogInfoLookUpReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::raltservice::RaltLogs>* getRaltLogsRaw(::grpc::ClientContext* context, const ::raltservice::GetRaltLogsReq& request) override;
    ::grpc::ClientAsyncReader< ::raltservice::RaltLogs>* AsyncgetRaltLogsRaw(::grpc::ClientContext* context, const ::raltservice::GetRaltLogsReq& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::raltservice::RaltLogs>* PrepareAsyncgetRaltLogsRaw(::grpc::ClientContext* context, const ::raltservice::GetRaltLogsReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::GetBasicConfigRsp>* AsyncgetBasicConfigRaw(::grpc::ClientContext* context, const ::raltservice::GetBasicConfigReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::GetBasicConfigRsp>* PrepareAsyncgetBasicConfigRaw(::grpc::ClientContext* context, const ::raltservice::GetBasicConfigReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::SetBasicConfigRsp>* AsyncsetBasicConfigRaw(::grpc::ClientContext* context, const ::raltservice::SetBasicConfigReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::SetBasicConfigRsp>* PrepareAsyncsetBasicConfigRaw(::grpc::ClientContext* context, const ::raltservice::SetBasicConfigReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::raltservice::Domain>* getAllDomainRaw(::grpc::ClientContext* context, const ::raltservice::GetAllDomainReq& request) override;
    ::grpc::ClientAsyncReader< ::raltservice::Domain>* AsyncgetAllDomainRaw(::grpc::ClientContext* context, const ::raltservice::GetAllDomainReq& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::raltservice::Domain>* PrepareAsyncgetAllDomainRaw(::grpc::ClientContext* context, const ::raltservice::GetAllDomainReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::raltservice::Domain>* updateDomainRaw(::grpc::ClientContext* context, ::raltservice::UpdateDomainRsp* response) override;
    ::grpc::ClientAsyncWriter< ::raltservice::Domain>* AsyncupdateDomainRaw(::grpc::ClientContext* context, ::raltservice::UpdateDomainRsp* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::raltservice::Domain>* PrepareAsyncupdateDomainRaw(::grpc::ClientContext* context, ::raltservice::UpdateDomainRsp* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::Domain>* AsyncgetDomainRaw(::grpc::ClientContext* context, const ::raltservice::GetDomainReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::Domain>* PrepareAsyncgetDomainRaw(::grpc::ClientContext* context, const ::raltservice::GetDomainReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::AddDomainRsp>* AsyncaddDomainRaw(::grpc::ClientContext* context, const ::raltservice::Domain& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::AddDomainRsp>* PrepareAsyncaddDomainRaw(::grpc::ClientContext* context, const ::raltservice::Domain& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::DeleteDomainRsp>* AsyncdeleteDomainRaw(::grpc::ClientContext* context, const ::raltservice::DeleteDomainReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::DeleteDomainRsp>* PrepareAsyncdeleteDomainRaw(::grpc::ClientContext* context, const ::raltservice::DeleteDomainReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::GetMiscRsp>* AsyncgetMiscRaw(::grpc::ClientContext* context, const ::raltservice::GetMiscReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::GetMiscRsp>* PrepareAsyncgetMiscRaw(::grpc::ClientContext* context, const ::raltservice::GetMiscReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::ModMiscOpRsp>* AsyncmodMiscRaw(::grpc::ClientContext* context, const ::raltservice::Misc& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::ModMiscOpRsp>* PrepareAsyncmodMiscRaw(::grpc::ClientContext* context, const ::raltservice::Misc& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::raltservice::RaltStatus>* getRaltStatusRaw(::grpc::ClientContext* context, const ::raltservice::RaltStatusReq& request) override;
    ::grpc::ClientAsyncReader< ::raltservice::RaltStatus>* AsyncgetRaltStatusRaw(::grpc::ClientContext* context, const ::raltservice::RaltStatusReq& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::raltservice::RaltStatus>* PrepareAsyncgetRaltStatusRaw(::grpc::ClientContext* context, const ::raltservice::RaltStatusReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::ExecCmdRsp>* AsyncexecCmdRaw(::grpc::ClientContext* context, const ::raltservice::ExecCmdReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::raltservice::ExecCmdRsp>* PrepareAsyncexecCmdRaw(::grpc::ClientContext* context, const ::raltservice::ExecCmdReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getRaltStats_;
    const ::grpc::internal::RpcMethod rpcmethod_getStatsFieldValue_;
    const ::grpc::internal::RpcMethod rpcmethod_getHomePageData_;
    const ::grpc::internal::RpcMethod rpcmethod_showCacheData_;
    const ::grpc::internal::RpcMethod rpcmethod_showFlowStatData_;
    const ::grpc::internal::RpcMethod rpcmethod_showLogInfoData_;
    const ::grpc::internal::RpcMethod rpcmethod_getRaltLogs_;
    const ::grpc::internal::RpcMethod rpcmethod_getBasicConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_setBasicConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_getAllDomain_;
    const ::grpc::internal::RpcMethod rpcmethod_updateDomain_;
    const ::grpc::internal::RpcMethod rpcmethod_getDomain_;
    const ::grpc::internal::RpcMethod rpcmethod_addDomain_;
    const ::grpc::internal::RpcMethod rpcmethod_deleteDomain_;
    const ::grpc::internal::RpcMethod rpcmethod_getMisc_;
    const ::grpc::internal::RpcMethod rpcmethod_modMisc_;
    const ::grpc::internal::RpcMethod rpcmethod_getRaltStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_execCmd_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // ats stats
    virtual ::grpc::Status getRaltStats(::grpc::ServerContext* context, const ::raltservice::GetRaltStatsReq* request, ::raltservice::GetRaltStatsRsp* response);
    virtual ::grpc::Status getStatsFieldValue(::grpc::ServerContext* context, const ::raltservice::StatsFieldName* request, ::raltservice::StatsFieldValue* response);
    virtual ::grpc::Status getHomePageData(::grpc::ServerContext* context, const ::raltservice::HomePageReq* request, ::raltservice::HomePageRsp* response);
    virtual ::grpc::Status showCacheData(::grpc::ServerContext* context, const ::raltservice::CacheLookUpReq* request, ::raltservice::CacheResult* response);
    // flow related
    virtual ::grpc::Status showFlowStatData(::grpc::ServerContext* context, const ::raltservice::FlowStatLookUpReq* request, ::raltservice::FlowResult* response);
    // logs related
    virtual ::grpc::Status showLogInfoData(::grpc::ServerContext* context, const ::raltservice::LogInfoLookUpReq* request, ::raltservice::LogResult* response);
    virtual ::grpc::Status getRaltLogs(::grpc::ServerContext* context, const ::raltservice::GetRaltLogsReq* request, ::grpc::ServerWriter< ::raltservice::RaltLogs>* writer);
    // configure
    // basic config, main for record.config
    virtual ::grpc::Status getBasicConfig(::grpc::ServerContext* context, const ::raltservice::GetBasicConfigReq* request, ::raltservice::GetBasicConfigRsp* response);
    virtual ::grpc::Status setBasicConfig(::grpc::ServerContext* context, const ::raltservice::SetBasicConfigReq* request, ::raltservice::SetBasicConfigRsp* response);
    // ralt.domain.conf
    virtual ::grpc::Status getAllDomain(::grpc::ServerContext* context, const ::raltservice::GetAllDomainReq* request, ::grpc::ServerWriter< ::raltservice::Domain>* writer);
    virtual ::grpc::Status updateDomain(::grpc::ServerContext* context, ::grpc::ServerReader< ::raltservice::Domain>* reader, ::raltservice::UpdateDomainRsp* response);
    virtual ::grpc::Status getDomain(::grpc::ServerContext* context, const ::raltservice::GetDomainReq* request, ::raltservice::Domain* response);
    virtual ::grpc::Status addDomain(::grpc::ServerContext* context, const ::raltservice::Domain* request, ::raltservice::AddDomainRsp* response);
    virtual ::grpc::Status deleteDomain(::grpc::ServerContext* context, const ::raltservice::DeleteDomainReq* request, ::raltservice::DeleteDomainRsp* response);
    // ralt.miscellaneous.conf
    virtual ::grpc::Status getMisc(::grpc::ServerContext* context, const ::raltservice::GetMiscReq* request, ::raltservice::GetMiscRsp* response);
    virtual ::grpc::Status modMisc(::grpc::ServerContext* context, const ::raltservice::Misc* request, ::raltservice::ModMiscOpRsp* response);
    // ralt status: 
    virtual ::grpc::Status getRaltStatus(::grpc::ServerContext* context, const ::raltservice::RaltStatusReq* request, ::grpc::ServerWriter< ::raltservice::RaltStatus>* writer);
    // exec cmd
    virtual ::grpc::Status execCmd(::grpc::ServerContext* context, const ::raltservice::ExecCmdReq* request, ::raltservice::ExecCmdRsp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getRaltStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getRaltStats() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getRaltStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRaltStats(::grpc::ServerContext* context, const ::raltservice::GetRaltStatsReq* request, ::raltservice::GetRaltStatsRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRaltStats(::grpc::ServerContext* context, ::raltservice::GetRaltStatsReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::GetRaltStatsRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getStatsFieldValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getStatsFieldValue() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_getStatsFieldValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatsFieldValue(::grpc::ServerContext* context, const ::raltservice::StatsFieldName* request, ::raltservice::StatsFieldValue* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetStatsFieldValue(::grpc::ServerContext* context, ::raltservice::StatsFieldName* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::StatsFieldValue>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getHomePageData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getHomePageData() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getHomePageData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHomePageData(::grpc::ServerContext* context, const ::raltservice::HomePageReq* request, ::raltservice::HomePageRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetHomePageData(::grpc::ServerContext* context, ::raltservice::HomePageReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::HomePageRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_showCacheData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_showCacheData() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_showCacheData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status showCacheData(::grpc::ServerContext* context, const ::raltservice::CacheLookUpReq* request, ::raltservice::CacheResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestshowCacheData(::grpc::ServerContext* context, ::raltservice::CacheLookUpReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::CacheResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_showFlowStatData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_showFlowStatData() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_showFlowStatData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status showFlowStatData(::grpc::ServerContext* context, const ::raltservice::FlowStatLookUpReq* request, ::raltservice::FlowResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestshowFlowStatData(::grpc::ServerContext* context, ::raltservice::FlowStatLookUpReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::FlowResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_showLogInfoData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_showLogInfoData() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_showLogInfoData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status showLogInfoData(::grpc::ServerContext* context, const ::raltservice::LogInfoLookUpReq* request, ::raltservice::LogResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestshowLogInfoData(::grpc::ServerContext* context, ::raltservice::LogInfoLookUpReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::LogResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getRaltLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getRaltLogs() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_getRaltLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRaltLogs(::grpc::ServerContext* context, const ::raltservice::GetRaltLogsReq* request, ::grpc::ServerWriter< ::raltservice::RaltLogs>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRaltLogs(::grpc::ServerContext* context, ::raltservice::GetRaltLogsReq* request, ::grpc::ServerAsyncWriter< ::raltservice::RaltLogs>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getBasicConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getBasicConfig() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_getBasicConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBasicConfig(::grpc::ServerContext* context, const ::raltservice::GetBasicConfigReq* request, ::raltservice::GetBasicConfigRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetBasicConfig(::grpc::ServerContext* context, ::raltservice::GetBasicConfigReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::GetBasicConfigRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setBasicConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_setBasicConfig() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_setBasicConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setBasicConfig(::grpc::ServerContext* context, const ::raltservice::SetBasicConfigReq* request, ::raltservice::SetBasicConfigRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetBasicConfig(::grpc::ServerContext* context, ::raltservice::SetBasicConfigReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::SetBasicConfigRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getAllDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getAllDomain() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_getAllDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllDomain(::grpc::ServerContext* context, const ::raltservice::GetAllDomainReq* request, ::grpc::ServerWriter< ::raltservice::Domain>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAllDomain(::grpc::ServerContext* context, ::raltservice::GetAllDomainReq* request, ::grpc::ServerAsyncWriter< ::raltservice::Domain>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_updateDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_updateDomain() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_updateDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateDomain(::grpc::ServerContext* context, ::grpc::ServerReader< ::raltservice::Domain>* reader, ::raltservice::UpdateDomainRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateDomain(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::raltservice::UpdateDomainRsp, ::raltservice::Domain>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(10, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getDomain() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_getDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDomain(::grpc::ServerContext* context, const ::raltservice::GetDomainReq* request, ::raltservice::Domain* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDomain(::grpc::ServerContext* context, ::raltservice::GetDomainReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::Domain>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_addDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_addDomain() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_addDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addDomain(::grpc::ServerContext* context, const ::raltservice::Domain* request, ::raltservice::AddDomainRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddDomain(::grpc::ServerContext* context, ::raltservice::Domain* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::AddDomainRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deleteDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_deleteDomain() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_deleteDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteDomain(::grpc::ServerContext* context, const ::raltservice::DeleteDomainReq* request, ::raltservice::DeleteDomainRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteDomain(::grpc::ServerContext* context, ::raltservice::DeleteDomainReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::DeleteDomainRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getMisc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getMisc() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_getMisc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMisc(::grpc::ServerContext* context, const ::raltservice::GetMiscReq* request, ::raltservice::GetMiscRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMisc(::grpc::ServerContext* context, ::raltservice::GetMiscReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::GetMiscRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_modMisc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_modMisc() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_modMisc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status modMisc(::grpc::ServerContext* context, const ::raltservice::Misc* request, ::raltservice::ModMiscOpRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmodMisc(::grpc::ServerContext* context, ::raltservice::Misc* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::ModMiscOpRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getRaltStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getRaltStatus() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_getRaltStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRaltStatus(::grpc::ServerContext* context, const ::raltservice::RaltStatusReq* request, ::grpc::ServerWriter< ::raltservice::RaltStatus>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRaltStatus(::grpc::ServerContext* context, ::raltservice::RaltStatusReq* request, ::grpc::ServerAsyncWriter< ::raltservice::RaltStatus>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(16, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_execCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_execCmd() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_execCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status execCmd(::grpc::ServerContext* context, const ::raltservice::ExecCmdReq* request, ::raltservice::ExecCmdRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexecCmd(::grpc::ServerContext* context, ::raltservice::ExecCmdReq* request, ::grpc::ServerAsyncResponseWriter< ::raltservice::ExecCmdRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getRaltStats<WithAsyncMethod_getStatsFieldValue<WithAsyncMethod_getHomePageData<WithAsyncMethod_showCacheData<WithAsyncMethod_showFlowStatData<WithAsyncMethod_showLogInfoData<WithAsyncMethod_getRaltLogs<WithAsyncMethod_getBasicConfig<WithAsyncMethod_setBasicConfig<WithAsyncMethod_getAllDomain<WithAsyncMethod_updateDomain<WithAsyncMethod_getDomain<WithAsyncMethod_addDomain<WithAsyncMethod_deleteDomain<WithAsyncMethod_getMisc<WithAsyncMethod_modMisc<WithAsyncMethod_getRaltStatus<WithAsyncMethod_execCmd<Service > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_getRaltStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getRaltStats() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getRaltStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRaltStats(::grpc::ServerContext* context, const ::raltservice::GetRaltStatsReq* request, ::raltservice::GetRaltStatsRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getStatsFieldValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getStatsFieldValue() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_getStatsFieldValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatsFieldValue(::grpc::ServerContext* context, const ::raltservice::StatsFieldName* request, ::raltservice::StatsFieldValue* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getHomePageData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getHomePageData() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getHomePageData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getHomePageData(::grpc::ServerContext* context, const ::raltservice::HomePageReq* request, ::raltservice::HomePageRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_showCacheData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_showCacheData() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_showCacheData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status showCacheData(::grpc::ServerContext* context, const ::raltservice::CacheLookUpReq* request, ::raltservice::CacheResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_showFlowStatData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_showFlowStatData() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_showFlowStatData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status showFlowStatData(::grpc::ServerContext* context, const ::raltservice::FlowStatLookUpReq* request, ::raltservice::FlowResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_showLogInfoData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_showLogInfoData() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_showLogInfoData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status showLogInfoData(::grpc::ServerContext* context, const ::raltservice::LogInfoLookUpReq* request, ::raltservice::LogResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getRaltLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getRaltLogs() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_getRaltLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRaltLogs(::grpc::ServerContext* context, const ::raltservice::GetRaltLogsReq* request, ::grpc::ServerWriter< ::raltservice::RaltLogs>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getBasicConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getBasicConfig() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_getBasicConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBasicConfig(::grpc::ServerContext* context, const ::raltservice::GetBasicConfigReq* request, ::raltservice::GetBasicConfigRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setBasicConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_setBasicConfig() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_setBasicConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setBasicConfig(::grpc::ServerContext* context, const ::raltservice::SetBasicConfigReq* request, ::raltservice::SetBasicConfigRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getAllDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getAllDomain() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_getAllDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllDomain(::grpc::ServerContext* context, const ::raltservice::GetAllDomainReq* request, ::grpc::ServerWriter< ::raltservice::Domain>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_updateDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_updateDomain() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_updateDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateDomain(::grpc::ServerContext* context, ::grpc::ServerReader< ::raltservice::Domain>* reader, ::raltservice::UpdateDomainRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getDomain() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_getDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDomain(::grpc::ServerContext* context, const ::raltservice::GetDomainReq* request, ::raltservice::Domain* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_addDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_addDomain() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_addDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addDomain(::grpc::ServerContext* context, const ::raltservice::Domain* request, ::raltservice::AddDomainRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deleteDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_deleteDomain() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_deleteDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteDomain(::grpc::ServerContext* context, const ::raltservice::DeleteDomainReq* request, ::raltservice::DeleteDomainRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getMisc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getMisc() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_getMisc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMisc(::grpc::ServerContext* context, const ::raltservice::GetMiscReq* request, ::raltservice::GetMiscRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_modMisc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_modMisc() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_modMisc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status modMisc(::grpc::ServerContext* context, const ::raltservice::Misc* request, ::raltservice::ModMiscOpRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getRaltStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getRaltStatus() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_getRaltStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRaltStatus(::grpc::ServerContext* context, const ::raltservice::RaltStatusReq* request, ::grpc::ServerWriter< ::raltservice::RaltStatus>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_execCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_execCmd() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_execCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status execCmd(::grpc::ServerContext* context, const ::raltservice::ExecCmdReq* request, ::raltservice::ExecCmdRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getRaltStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getRaltStats() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::GetRaltStatsReq, ::raltservice::GetRaltStatsRsp>(std::bind(&WithStreamedUnaryMethod_getRaltStats<BaseClass>::StreamedgetRaltStats, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getRaltStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getRaltStats(::grpc::ServerContext* context, const ::raltservice::GetRaltStatsReq* request, ::raltservice::GetRaltStatsRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetRaltStats(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::GetRaltStatsReq,::raltservice::GetRaltStatsRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getStatsFieldValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getStatsFieldValue() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::StatsFieldName, ::raltservice::StatsFieldValue>(std::bind(&WithStreamedUnaryMethod_getStatsFieldValue<BaseClass>::StreamedgetStatsFieldValue, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getStatsFieldValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getStatsFieldValue(::grpc::ServerContext* context, const ::raltservice::StatsFieldName* request, ::raltservice::StatsFieldValue* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetStatsFieldValue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::StatsFieldName,::raltservice::StatsFieldValue>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getHomePageData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getHomePageData() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::HomePageReq, ::raltservice::HomePageRsp>(std::bind(&WithStreamedUnaryMethod_getHomePageData<BaseClass>::StreamedgetHomePageData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getHomePageData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getHomePageData(::grpc::ServerContext* context, const ::raltservice::HomePageReq* request, ::raltservice::HomePageRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetHomePageData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::HomePageReq,::raltservice::HomePageRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_showCacheData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_showCacheData() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::CacheLookUpReq, ::raltservice::CacheResult>(std::bind(&WithStreamedUnaryMethod_showCacheData<BaseClass>::StreamedshowCacheData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_showCacheData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status showCacheData(::grpc::ServerContext* context, const ::raltservice::CacheLookUpReq* request, ::raltservice::CacheResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedshowCacheData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::CacheLookUpReq,::raltservice::CacheResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_showFlowStatData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_showFlowStatData() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::FlowStatLookUpReq, ::raltservice::FlowResult>(std::bind(&WithStreamedUnaryMethod_showFlowStatData<BaseClass>::StreamedshowFlowStatData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_showFlowStatData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status showFlowStatData(::grpc::ServerContext* context, const ::raltservice::FlowStatLookUpReq* request, ::raltservice::FlowResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedshowFlowStatData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::FlowStatLookUpReq,::raltservice::FlowResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_showLogInfoData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_showLogInfoData() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::LogInfoLookUpReq, ::raltservice::LogResult>(std::bind(&WithStreamedUnaryMethod_showLogInfoData<BaseClass>::StreamedshowLogInfoData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_showLogInfoData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status showLogInfoData(::grpc::ServerContext* context, const ::raltservice::LogInfoLookUpReq* request, ::raltservice::LogResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedshowLogInfoData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::LogInfoLookUpReq,::raltservice::LogResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getBasicConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getBasicConfig() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::GetBasicConfigReq, ::raltservice::GetBasicConfigRsp>(std::bind(&WithStreamedUnaryMethod_getBasicConfig<BaseClass>::StreamedgetBasicConfig, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getBasicConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getBasicConfig(::grpc::ServerContext* context, const ::raltservice::GetBasicConfigReq* request, ::raltservice::GetBasicConfigRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetBasicConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::GetBasicConfigReq,::raltservice::GetBasicConfigRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setBasicConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_setBasicConfig() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::SetBasicConfigReq, ::raltservice::SetBasicConfigRsp>(std::bind(&WithStreamedUnaryMethod_setBasicConfig<BaseClass>::StreamedsetBasicConfig, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_setBasicConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setBasicConfig(::grpc::ServerContext* context, const ::raltservice::SetBasicConfigReq* request, ::raltservice::SetBasicConfigRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetBasicConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::SetBasicConfigReq,::raltservice::SetBasicConfigRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getDomain() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::GetDomainReq, ::raltservice::Domain>(std::bind(&WithStreamedUnaryMethod_getDomain<BaseClass>::StreamedgetDomain, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDomain(::grpc::ServerContext* context, const ::raltservice::GetDomainReq* request, ::raltservice::Domain* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDomain(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::GetDomainReq,::raltservice::Domain>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_addDomain() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::Domain, ::raltservice::AddDomainRsp>(std::bind(&WithStreamedUnaryMethod_addDomain<BaseClass>::StreamedaddDomain, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_addDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addDomain(::grpc::ServerContext* context, const ::raltservice::Domain* request, ::raltservice::AddDomainRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddDomain(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::Domain,::raltservice::AddDomainRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deleteDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_deleteDomain() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::DeleteDomainReq, ::raltservice::DeleteDomainRsp>(std::bind(&WithStreamedUnaryMethod_deleteDomain<BaseClass>::StreameddeleteDomain, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_deleteDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deleteDomain(::grpc::ServerContext* context, const ::raltservice::DeleteDomainReq* request, ::raltservice::DeleteDomainRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddeleteDomain(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::DeleteDomainReq,::raltservice::DeleteDomainRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getMisc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getMisc() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::GetMiscReq, ::raltservice::GetMiscRsp>(std::bind(&WithStreamedUnaryMethod_getMisc<BaseClass>::StreamedgetMisc, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getMisc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getMisc(::grpc::ServerContext* context, const ::raltservice::GetMiscReq* request, ::raltservice::GetMiscRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetMisc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::GetMiscReq,::raltservice::GetMiscRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_modMisc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_modMisc() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::Misc, ::raltservice::ModMiscOpRsp>(std::bind(&WithStreamedUnaryMethod_modMisc<BaseClass>::StreamedmodMisc, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_modMisc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status modMisc(::grpc::ServerContext* context, const ::raltservice::Misc* request, ::raltservice::ModMiscOpRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedmodMisc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::Misc,::raltservice::ModMiscOpRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_execCmd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_execCmd() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler< ::raltservice::ExecCmdReq, ::raltservice::ExecCmdRsp>(std::bind(&WithStreamedUnaryMethod_execCmd<BaseClass>::StreamedexecCmd, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_execCmd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status execCmd(::grpc::ServerContext* context, const ::raltservice::ExecCmdReq* request, ::raltservice::ExecCmdRsp* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedexecCmd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::raltservice::ExecCmdReq,::raltservice::ExecCmdRsp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getRaltStats<WithStreamedUnaryMethod_getStatsFieldValue<WithStreamedUnaryMethod_getHomePageData<WithStreamedUnaryMethod_showCacheData<WithStreamedUnaryMethod_showFlowStatData<WithStreamedUnaryMethod_showLogInfoData<WithStreamedUnaryMethod_getBasicConfig<WithStreamedUnaryMethod_setBasicConfig<WithStreamedUnaryMethod_getDomain<WithStreamedUnaryMethod_addDomain<WithStreamedUnaryMethod_deleteDomain<WithStreamedUnaryMethod_getMisc<WithStreamedUnaryMethod_modMisc<WithStreamedUnaryMethod_execCmd<Service > > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_getRaltLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_getRaltLogs() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler< ::raltservice::GetRaltLogsReq, ::raltservice::RaltLogs>(std::bind(&WithSplitStreamingMethod_getRaltLogs<BaseClass>::StreamedgetRaltLogs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_getRaltLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getRaltLogs(::grpc::ServerContext* context, const ::raltservice::GetRaltLogsReq* request, ::grpc::ServerWriter< ::raltservice::RaltLogs>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedgetRaltLogs(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::raltservice::GetRaltLogsReq,::raltservice::RaltLogs>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_getAllDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_getAllDomain() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::SplitServerStreamingHandler< ::raltservice::GetAllDomainReq, ::raltservice::Domain>(std::bind(&WithSplitStreamingMethod_getAllDomain<BaseClass>::StreamedgetAllDomain, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_getAllDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getAllDomain(::grpc::ServerContext* context, const ::raltservice::GetAllDomainReq* request, ::grpc::ServerWriter< ::raltservice::Domain>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedgetAllDomain(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::raltservice::GetAllDomainReq,::raltservice::Domain>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_getRaltStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_getRaltStatus() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::SplitServerStreamingHandler< ::raltservice::RaltStatusReq, ::raltservice::RaltStatus>(std::bind(&WithSplitStreamingMethod_getRaltStatus<BaseClass>::StreamedgetRaltStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_getRaltStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getRaltStatus(::grpc::ServerContext* context, const ::raltservice::RaltStatusReq* request, ::grpc::ServerWriter< ::raltservice::RaltStatus>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedgetRaltStatus(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::raltservice::RaltStatusReq,::raltservice::RaltStatus>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_getRaltLogs<WithSplitStreamingMethod_getAllDomain<WithSplitStreamingMethod_getRaltStatus<Service > > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_getRaltStats<WithStreamedUnaryMethod_getStatsFieldValue<WithStreamedUnaryMethod_getHomePageData<WithStreamedUnaryMethod_showCacheData<WithStreamedUnaryMethod_showFlowStatData<WithStreamedUnaryMethod_showLogInfoData<WithSplitStreamingMethod_getRaltLogs<WithStreamedUnaryMethod_getBasicConfig<WithStreamedUnaryMethod_setBasicConfig<WithSplitStreamingMethod_getAllDomain<WithStreamedUnaryMethod_getDomain<WithStreamedUnaryMethod_addDomain<WithStreamedUnaryMethod_deleteDomain<WithStreamedUnaryMethod_getMisc<WithStreamedUnaryMethod_modMisc<WithSplitStreamingMethod_getRaltStatus<WithStreamedUnaryMethod_execCmd<Service > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace raltservice


#endif  // GRPC_ralt_2dservice_2eproto__INCLUDED
