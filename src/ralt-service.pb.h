// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ralt-service.proto

#ifndef PROTOBUF_ralt_2dservice_2eproto__INCLUDED
#define PROTOBUF_ralt_2dservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_ralt_2dservice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[35];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsGetRaltStatsReqImpl();
void InitDefaultsGetRaltStatsReq();
void InitDefaultsGetRaltStatsRspImpl();
void InitDefaultsGetRaltStatsRsp();
void InitDefaultsStatsFieldNameImpl();
void InitDefaultsStatsFieldName();
void InitDefaultsStatsFieldValueImpl();
void InitDefaultsStatsFieldValue();
void InitDefaultsHomePageReqImpl();
void InitDefaultsHomePageReq();
void InitDefaultsHomePageRspImpl();
void InitDefaultsHomePageRsp();
void InitDefaultsCacheLookUpReqImpl();
void InitDefaultsCacheLookUpReq();
void InitDefaultsCacheResultImpl();
void InitDefaultsCacheResult();
void InitDefaultsFlowStatLookUpReqImpl();
void InitDefaultsFlowStatLookUpReq();
void InitDefaultsFlowResultImpl();
void InitDefaultsFlowResult();
void InitDefaultsLogInfoLookUpReqImpl();
void InitDefaultsLogInfoLookUpReq();
void InitDefaultsLogResultImpl();
void InitDefaultsLogResult();
void InitDefaultsGetRaltLogsReqImpl();
void InitDefaultsGetRaltLogsReq();
void InitDefaultsRaltLogsImpl();
void InitDefaultsRaltLogs();
void InitDefaultsGetBasicConfigReqImpl();
void InitDefaultsGetBasicConfigReq();
void InitDefaultsGetBasicConfigRspImpl();
void InitDefaultsGetBasicConfigRsp();
void InitDefaultsSetBasicConfigReqImpl();
void InitDefaultsSetBasicConfigReq();
void InitDefaultsSetBasicConfigRspImpl();
void InitDefaultsSetBasicConfigRsp();
void InitDefaultsDomainImpl();
void InitDefaultsDomain();
void InitDefaultsGetAllDomainReqImpl();
void InitDefaultsGetAllDomainReq();
void InitDefaultsGetAllDomainRspImpl();
void InitDefaultsGetAllDomainRsp();
void InitDefaultsUpdateDomainRspImpl();
void InitDefaultsUpdateDomainRsp();
void InitDefaultsGetDomainReqImpl();
void InitDefaultsGetDomainReq();
void InitDefaultsGetDomainRspImpl();
void InitDefaultsGetDomainRsp();
void InitDefaultsAddDomainRspImpl();
void InitDefaultsAddDomainRsp();
void InitDefaultsDeleteDomainReqImpl();
void InitDefaultsDeleteDomainReq();
void InitDefaultsDeleteDomainRspImpl();
void InitDefaultsDeleteDomainRsp();
void InitDefaultsGetMiscReqImpl();
void InitDefaultsGetMiscReq();
void InitDefaultsGetMiscRspImpl();
void InitDefaultsGetMiscRsp();
void InitDefaultsMiscImpl();
void InitDefaultsMisc();
void InitDefaultsModMiscOpRspImpl();
void InitDefaultsModMiscOpRsp();
void InitDefaultsRaltStatusReqImpl();
void InitDefaultsRaltStatusReq();
void InitDefaultsRaltStatusImpl();
void InitDefaultsRaltStatus();
void InitDefaultsExecCmdReqImpl();
void InitDefaultsExecCmdReq();
void InitDefaultsExecCmdRspImpl();
void InitDefaultsExecCmdRsp();
inline void InitDefaults() {
  InitDefaultsGetRaltStatsReq();
  InitDefaultsGetRaltStatsRsp();
  InitDefaultsStatsFieldName();
  InitDefaultsStatsFieldValue();
  InitDefaultsHomePageReq();
  InitDefaultsHomePageRsp();
  InitDefaultsCacheLookUpReq();
  InitDefaultsCacheResult();
  InitDefaultsFlowStatLookUpReq();
  InitDefaultsFlowResult();
  InitDefaultsLogInfoLookUpReq();
  InitDefaultsLogResult();
  InitDefaultsGetRaltLogsReq();
  InitDefaultsRaltLogs();
  InitDefaultsGetBasicConfigReq();
  InitDefaultsGetBasicConfigRsp();
  InitDefaultsSetBasicConfigReq();
  InitDefaultsSetBasicConfigRsp();
  InitDefaultsDomain();
  InitDefaultsGetAllDomainReq();
  InitDefaultsGetAllDomainRsp();
  InitDefaultsUpdateDomainRsp();
  InitDefaultsGetDomainReq();
  InitDefaultsGetDomainRsp();
  InitDefaultsAddDomainRsp();
  InitDefaultsDeleteDomainReq();
  InitDefaultsDeleteDomainRsp();
  InitDefaultsGetMiscReq();
  InitDefaultsGetMiscRsp();
  InitDefaultsMisc();
  InitDefaultsModMiscOpRsp();
  InitDefaultsRaltStatusReq();
  InitDefaultsRaltStatus();
  InitDefaultsExecCmdReq();
  InitDefaultsExecCmdRsp();
}
}  // namespace protobuf_ralt_2dservice_2eproto
namespace raltservice {
class AddDomainRsp;
class AddDomainRspDefaultTypeInternal;
extern AddDomainRspDefaultTypeInternal _AddDomainRsp_default_instance_;
class CacheLookUpReq;
class CacheLookUpReqDefaultTypeInternal;
extern CacheLookUpReqDefaultTypeInternal _CacheLookUpReq_default_instance_;
class CacheResult;
class CacheResultDefaultTypeInternal;
extern CacheResultDefaultTypeInternal _CacheResult_default_instance_;
class DeleteDomainReq;
class DeleteDomainReqDefaultTypeInternal;
extern DeleteDomainReqDefaultTypeInternal _DeleteDomainReq_default_instance_;
class DeleteDomainRsp;
class DeleteDomainRspDefaultTypeInternal;
extern DeleteDomainRspDefaultTypeInternal _DeleteDomainRsp_default_instance_;
class Domain;
class DomainDefaultTypeInternal;
extern DomainDefaultTypeInternal _Domain_default_instance_;
class ExecCmdReq;
class ExecCmdReqDefaultTypeInternal;
extern ExecCmdReqDefaultTypeInternal _ExecCmdReq_default_instance_;
class ExecCmdRsp;
class ExecCmdRspDefaultTypeInternal;
extern ExecCmdRspDefaultTypeInternal _ExecCmdRsp_default_instance_;
class FlowResult;
class FlowResultDefaultTypeInternal;
extern FlowResultDefaultTypeInternal _FlowResult_default_instance_;
class FlowStatLookUpReq;
class FlowStatLookUpReqDefaultTypeInternal;
extern FlowStatLookUpReqDefaultTypeInternal _FlowStatLookUpReq_default_instance_;
class GetAllDomainReq;
class GetAllDomainReqDefaultTypeInternal;
extern GetAllDomainReqDefaultTypeInternal _GetAllDomainReq_default_instance_;
class GetAllDomainRsp;
class GetAllDomainRspDefaultTypeInternal;
extern GetAllDomainRspDefaultTypeInternal _GetAllDomainRsp_default_instance_;
class GetBasicConfigReq;
class GetBasicConfigReqDefaultTypeInternal;
extern GetBasicConfigReqDefaultTypeInternal _GetBasicConfigReq_default_instance_;
class GetBasicConfigRsp;
class GetBasicConfigRspDefaultTypeInternal;
extern GetBasicConfigRspDefaultTypeInternal _GetBasicConfigRsp_default_instance_;
class GetDomainReq;
class GetDomainReqDefaultTypeInternal;
extern GetDomainReqDefaultTypeInternal _GetDomainReq_default_instance_;
class GetDomainRsp;
class GetDomainRspDefaultTypeInternal;
extern GetDomainRspDefaultTypeInternal _GetDomainRsp_default_instance_;
class GetMiscReq;
class GetMiscReqDefaultTypeInternal;
extern GetMiscReqDefaultTypeInternal _GetMiscReq_default_instance_;
class GetMiscRsp;
class GetMiscRspDefaultTypeInternal;
extern GetMiscRspDefaultTypeInternal _GetMiscRsp_default_instance_;
class GetRaltLogsReq;
class GetRaltLogsReqDefaultTypeInternal;
extern GetRaltLogsReqDefaultTypeInternal _GetRaltLogsReq_default_instance_;
class GetRaltStatsReq;
class GetRaltStatsReqDefaultTypeInternal;
extern GetRaltStatsReqDefaultTypeInternal _GetRaltStatsReq_default_instance_;
class GetRaltStatsRsp;
class GetRaltStatsRspDefaultTypeInternal;
extern GetRaltStatsRspDefaultTypeInternal _GetRaltStatsRsp_default_instance_;
class HomePageReq;
class HomePageReqDefaultTypeInternal;
extern HomePageReqDefaultTypeInternal _HomePageReq_default_instance_;
class HomePageRsp;
class HomePageRspDefaultTypeInternal;
extern HomePageRspDefaultTypeInternal _HomePageRsp_default_instance_;
class LogInfoLookUpReq;
class LogInfoLookUpReqDefaultTypeInternal;
extern LogInfoLookUpReqDefaultTypeInternal _LogInfoLookUpReq_default_instance_;
class LogResult;
class LogResultDefaultTypeInternal;
extern LogResultDefaultTypeInternal _LogResult_default_instance_;
class Misc;
class MiscDefaultTypeInternal;
extern MiscDefaultTypeInternal _Misc_default_instance_;
class ModMiscOpRsp;
class ModMiscOpRspDefaultTypeInternal;
extern ModMiscOpRspDefaultTypeInternal _ModMiscOpRsp_default_instance_;
class RaltLogs;
class RaltLogsDefaultTypeInternal;
extern RaltLogsDefaultTypeInternal _RaltLogs_default_instance_;
class RaltStatus;
class RaltStatusDefaultTypeInternal;
extern RaltStatusDefaultTypeInternal _RaltStatus_default_instance_;
class RaltStatusReq;
class RaltStatusReqDefaultTypeInternal;
extern RaltStatusReqDefaultTypeInternal _RaltStatusReq_default_instance_;
class SetBasicConfigReq;
class SetBasicConfigReqDefaultTypeInternal;
extern SetBasicConfigReqDefaultTypeInternal _SetBasicConfigReq_default_instance_;
class SetBasicConfigRsp;
class SetBasicConfigRspDefaultTypeInternal;
extern SetBasicConfigRspDefaultTypeInternal _SetBasicConfigRsp_default_instance_;
class StatsFieldName;
class StatsFieldNameDefaultTypeInternal;
extern StatsFieldNameDefaultTypeInternal _StatsFieldName_default_instance_;
class StatsFieldValue;
class StatsFieldValueDefaultTypeInternal;
extern StatsFieldValueDefaultTypeInternal _StatsFieldValue_default_instance_;
class UpdateDomainRsp;
class UpdateDomainRspDefaultTypeInternal;
extern UpdateDomainRspDefaultTypeInternal _UpdateDomainRsp_default_instance_;
}  // namespace raltservice
namespace raltservice {

enum DomainType {
  enum_member_domain = 0,
  enum_subs_domain = 1,
  DomainType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DomainType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DomainType_IsValid(int value);
const DomainType DomainType_MIN = enum_member_domain;
const DomainType DomainType_MAX = enum_subs_domain;
const int DomainType_ARRAYSIZE = DomainType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DomainType_descriptor();
inline const ::std::string& DomainType_Name(DomainType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DomainType_descriptor(), value);
}
inline bool DomainType_Parse(
    const ::std::string& name, DomainType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DomainType>(
    DomainType_descriptor(), name, value);
}
enum MiscKey {
  enum_ralt_filter_type_default = 0,
  MiscKey_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MiscKey_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MiscKey_IsValid(int value);
const MiscKey MiscKey_MIN = enum_ralt_filter_type_default;
const MiscKey MiscKey_MAX = enum_ralt_filter_type_default;
const int MiscKey_ARRAYSIZE = MiscKey_MAX + 1;

const ::google::protobuf::EnumDescriptor* MiscKey_descriptor();
inline const ::std::string& MiscKey_Name(MiscKey value) {
  return ::google::protobuf::internal::NameOfEnum(
    MiscKey_descriptor(), value);
}
inline bool MiscKey_Parse(
    const ::std::string& name, MiscKey* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MiscKey>(
    MiscKey_descriptor(), name, value);
}
enum MiscSwitch {
  switch_off = 0,
  switch_on = 1,
  MiscSwitch_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MiscSwitch_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MiscSwitch_IsValid(int value);
const MiscSwitch MiscSwitch_MIN = switch_off;
const MiscSwitch MiscSwitch_MAX = switch_on;
const int MiscSwitch_ARRAYSIZE = MiscSwitch_MAX + 1;

const ::google::protobuf::EnumDescriptor* MiscSwitch_descriptor();
inline const ::std::string& MiscSwitch_Name(MiscSwitch value) {
  return ::google::protobuf::internal::NameOfEnum(
    MiscSwitch_descriptor(), value);
}
inline bool MiscSwitch_Parse(
    const ::std::string& name, MiscSwitch* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MiscSwitch>(
    MiscSwitch_descriptor(), name, value);
}
enum CommandType {
  ralt_start = 0,
  ralt_stop = 1,
  ralt_restart = 2,
  cache_clear = 3,
  reload_config = 4,
  CommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommandType_IsValid(int value);
const CommandType CommandType_MIN = ralt_start;
const CommandType CommandType_MAX = reload_config;
const int CommandType_ARRAYSIZE = CommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommandType_descriptor();
inline const ::std::string& CommandType_Name(CommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommandType_descriptor(), value);
}
inline bool CommandType_Parse(
    const ::std::string& name, CommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommandType>(
    CommandType_descriptor(), name, value);
}
// ===================================================================

class GetRaltStatsReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.GetRaltStatsReq) */ {
 public:
  GetRaltStatsReq();
  virtual ~GetRaltStatsReq();

  GetRaltStatsReq(const GetRaltStatsReq& from);

  inline GetRaltStatsReq& operator=(const GetRaltStatsReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRaltStatsReq(GetRaltStatsReq&& from) noexcept
    : GetRaltStatsReq() {
    *this = ::std::move(from);
  }

  inline GetRaltStatsReq& operator=(GetRaltStatsReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRaltStatsReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRaltStatsReq* internal_default_instance() {
    return reinterpret_cast<const GetRaltStatsReq*>(
               &_GetRaltStatsReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GetRaltStatsReq* other);
  friend void swap(GetRaltStatsReq& a, GetRaltStatsReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRaltStatsReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetRaltStatsReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetRaltStatsReq& from);
  void MergeFrom(const GetRaltStatsReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetRaltStatsReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // @@protoc_insertion_point(class_scope:raltservice.GetRaltStatsReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsGetRaltStatsReqImpl();
};
// -------------------------------------------------------------------

class GetRaltStatsRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.GetRaltStatsRsp) */ {
 public:
  GetRaltStatsRsp();
  virtual ~GetRaltStatsRsp();

  GetRaltStatsRsp(const GetRaltStatsRsp& from);

  inline GetRaltStatsRsp& operator=(const GetRaltStatsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRaltStatsRsp(GetRaltStatsRsp&& from) noexcept
    : GetRaltStatsRsp() {
    *this = ::std::move(from);
  }

  inline GetRaltStatsRsp& operator=(GetRaltStatsRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRaltStatsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRaltStatsRsp* internal_default_instance() {
    return reinterpret_cast<const GetRaltStatsRsp*>(
               &_GetRaltStatsRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(GetRaltStatsRsp* other);
  friend void swap(GetRaltStatsRsp& a, GetRaltStatsRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRaltStatsRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetRaltStatsRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetRaltStatsRsp& from);
  void MergeFrom(const GetRaltStatsRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetRaltStatsRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 cache_used_bytes = 1;
  void clear_cache_used_bytes();
  static const int kCacheUsedBytesFieldNumber = 1;
  ::google::protobuf::uint64 cache_used_bytes() const;
  void set_cache_used_bytes(::google::protobuf::uint64 value);

  // uint64 cache_total_bytes = 2;
  void clear_cache_total_bytes();
  static const int kCacheTotalBytesFieldNumber = 2;
  ::google::protobuf::uint64 cache_total_bytes() const;
  void set_cache_total_bytes(::google::protobuf::uint64 value);

  // uint32 logs_space_used_mb = 3;
  void clear_logs_space_used_mb();
  static const int kLogsSpaceUsedMbFieldNumber = 3;
  ::google::protobuf::uint32 logs_space_used_mb() const;
  void set_logs_space_used_mb(::google::protobuf::uint32 value);

  // uint32 logs_space_total_mb = 4;
  void clear_logs_space_total_mb();
  static const int kLogsSpaceTotalMbFieldNumber = 4;
  ::google::protobuf::uint32 logs_space_total_mb() const;
  void set_logs_space_total_mb(::google::protobuf::uint32 value);

  // uint32 flow_completed_requests = 5;
  void clear_flow_completed_requests();
  static const int kFlowCompletedRequestsFieldNumber = 5;
  ::google::protobuf::uint32 flow_completed_requests() const;
  void set_flow_completed_requests(::google::protobuf::uint32 value);

  // uint32 flow_incoming_requests = 6;
  void clear_flow_incoming_requests();
  static const int kFlowIncomingRequestsFieldNumber = 6;
  ::google::protobuf::uint32 flow_incoming_requests() const;
  void set_flow_incoming_requests(::google::protobuf::uint32 value);

  // uint32 flow_total_client_connections_ipv4 = 7;
  void clear_flow_total_client_connections_ipv4();
  static const int kFlowTotalClientConnectionsIpv4FieldNumber = 7;
  ::google::protobuf::uint32 flow_total_client_connections_ipv4() const;
  void set_flow_total_client_connections_ipv4(::google::protobuf::uint32 value);

  // uint32 flow_total_client_connections_ipv6 = 8;
  void clear_flow_total_client_connections_ipv6();
  static const int kFlowTotalClientConnectionsIpv6FieldNumber = 8;
  ::google::protobuf::uint32 flow_total_client_connections_ipv6() const;
  void set_flow_total_client_connections_ipv6(::google::protobuf::uint32 value);

  // float flow_bandwidth_hit_ratio = 9;
  void clear_flow_bandwidth_hit_ratio();
  static const int kFlowBandwidthHitRatioFieldNumber = 9;
  float flow_bandwidth_hit_ratio() const;
  void set_flow_bandwidth_hit_ratio(float value);

  // @@protoc_insertion_point(class_scope:raltservice.GetRaltStatsRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 cache_used_bytes_;
  ::google::protobuf::uint64 cache_total_bytes_;
  ::google::protobuf::uint32 logs_space_used_mb_;
  ::google::protobuf::uint32 logs_space_total_mb_;
  ::google::protobuf::uint32 flow_completed_requests_;
  ::google::protobuf::uint32 flow_incoming_requests_;
  ::google::protobuf::uint32 flow_total_client_connections_ipv4_;
  ::google::protobuf::uint32 flow_total_client_connections_ipv6_;
  float flow_bandwidth_hit_ratio_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsGetRaltStatsRspImpl();
};
// -------------------------------------------------------------------

class StatsFieldName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.StatsFieldName) */ {
 public:
  StatsFieldName();
  virtual ~StatsFieldName();

  StatsFieldName(const StatsFieldName& from);

  inline StatsFieldName& operator=(const StatsFieldName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatsFieldName(StatsFieldName&& from) noexcept
    : StatsFieldName() {
    *this = ::std::move(from);
  }

  inline StatsFieldName& operator=(StatsFieldName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatsFieldName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatsFieldName* internal_default_instance() {
    return reinterpret_cast<const StatsFieldName*>(
               &_StatsFieldName_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(StatsFieldName* other);
  friend void swap(StatsFieldName& a, StatsFieldName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatsFieldName* New() const PROTOBUF_FINAL { return New(NULL); }

  StatsFieldName* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StatsFieldName& from);
  void MergeFrom(const StatsFieldName& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StatsFieldName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // string field_name = 2;
  void clear_field_name();
  static const int kFieldNameFieldNumber = 2;
  const ::std::string& field_name() const;
  void set_field_name(const ::std::string& value);
  #if LANG_CXX11
  void set_field_name(::std::string&& value);
  #endif
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  ::std::string* mutable_field_name();
  ::std::string* release_field_name();
  void set_allocated_field_name(::std::string* field_name);

  // @@protoc_insertion_point(class_scope:raltservice.StatsFieldName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  ::google::protobuf::internal::ArenaStringPtr field_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsStatsFieldNameImpl();
};
// -------------------------------------------------------------------

class StatsFieldValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.StatsFieldValue) */ {
 public:
  StatsFieldValue();
  virtual ~StatsFieldValue();

  StatsFieldValue(const StatsFieldValue& from);

  inline StatsFieldValue& operator=(const StatsFieldValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatsFieldValue(StatsFieldValue&& from) noexcept
    : StatsFieldValue() {
    *this = ::std::move(from);
  }

  inline StatsFieldValue& operator=(StatsFieldValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatsFieldValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatsFieldValue* internal_default_instance() {
    return reinterpret_cast<const StatsFieldValue*>(
               &_StatsFieldValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(StatsFieldValue* other);
  friend void swap(StatsFieldValue& a, StatsFieldValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatsFieldValue* New() const PROTOBUF_FINAL { return New(NULL); }

  StatsFieldValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StatsFieldValue& from);
  void MergeFrom(const StatsFieldValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StatsFieldValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:raltservice.StatsFieldValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsStatsFieldValueImpl();
};
// -------------------------------------------------------------------

class HomePageReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.HomePageReq) */ {
 public:
  HomePageReq();
  virtual ~HomePageReq();

  HomePageReq(const HomePageReq& from);

  inline HomePageReq& operator=(const HomePageReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HomePageReq(HomePageReq&& from) noexcept
    : HomePageReq() {
    *this = ::std::move(from);
  }

  inline HomePageReq& operator=(HomePageReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HomePageReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HomePageReq* internal_default_instance() {
    return reinterpret_cast<const HomePageReq*>(
               &_HomePageReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(HomePageReq* other);
  friend void swap(HomePageReq& a, HomePageReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HomePageReq* New() const PROTOBUF_FINAL { return New(NULL); }

  HomePageReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HomePageReq& from);
  void MergeFrom(const HomePageReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HomePageReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.HomePageReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsHomePageReqImpl();
};
// -------------------------------------------------------------------

class HomePageRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.HomePageRsp) */ {
 public:
  HomePageRsp();
  virtual ~HomePageRsp();

  HomePageRsp(const HomePageRsp& from);

  inline HomePageRsp& operator=(const HomePageRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HomePageRsp(HomePageRsp&& from) noexcept
    : HomePageRsp() {
    *this = ::std::move(from);
  }

  inline HomePageRsp& operator=(HomePageRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HomePageRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HomePageRsp* internal_default_instance() {
    return reinterpret_cast<const HomePageRsp*>(
               &_HomePageRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(HomePageRsp* other);
  friend void swap(HomePageRsp& a, HomePageRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HomePageRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  HomePageRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HomePageRsp& from);
  void MergeFrom(const HomePageRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HomePageRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 domain_num = 1;
  void clear_domain_num();
  static const int kDomainNumFieldNumber = 1;
  ::google::protobuf::uint32 domain_num() const;
  void set_domain_num(::google::protobuf::uint32 value);

  // uint32 cluster_device = 2;
  void clear_cluster_device();
  static const int kClusterDeviceFieldNumber = 2;
  ::google::protobuf::uint32 cluster_device() const;
  void set_cluster_device(::google::protobuf::uint32 value);

  // uint64 app_transfor_bytes = 3;
  void clear_app_transfor_bytes();
  static const int kAppTransforBytesFieldNumber = 3;
  ::google::protobuf::uint64 app_transfor_bytes() const;
  void set_app_transfor_bytes(::google::protobuf::uint64 value);

  // uint32 app_transfor_connections = 4;
  void clear_app_transfor_connections();
  static const int kAppTransforConnectionsFieldNumber = 4;
  ::google::protobuf::uint32 app_transfor_connections() const;
  void set_app_transfor_connections(::google::protobuf::uint32 value);

  // uint32 cache_total_hits = 5;
  void clear_cache_total_hits();
  static const int kCacheTotalHitsFieldNumber = 5;
  ::google::protobuf::uint32 cache_total_hits() const;
  void set_cache_total_hits(::google::protobuf::uint32 value);

  // uint64 cache_bytes_total = 6;
  void clear_cache_bytes_total();
  static const int kCacheBytesTotalFieldNumber = 6;
  ::google::protobuf::uint64 cache_bytes_total() const;
  void set_cache_bytes_total(::google::protobuf::uint64 value);

  // uint64 cache_bytes_used = 7;
  void clear_cache_bytes_used();
  static const int kCacheBytesUsedFieldNumber = 7;
  ::google::protobuf::uint64 cache_bytes_used() const;
  void set_cache_bytes_used(::google::protobuf::uint64 value);

  // uint32 cache_num_docs = 8;
  void clear_cache_num_docs();
  static const int kCacheNumDocsFieldNumber = 8;
  ::google::protobuf::uint32 cache_num_docs() const;
  void set_cache_num_docs(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.HomePageRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 domain_num_;
  ::google::protobuf::uint32 cluster_device_;
  ::google::protobuf::uint64 app_transfor_bytes_;
  ::google::protobuf::uint32 app_transfor_connections_;
  ::google::protobuf::uint32 cache_total_hits_;
  ::google::protobuf::uint64 cache_bytes_total_;
  ::google::protobuf::uint64 cache_bytes_used_;
  ::google::protobuf::uint32 cache_num_docs_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsHomePageRspImpl();
};
// -------------------------------------------------------------------

class CacheLookUpReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.CacheLookUpReq) */ {
 public:
  CacheLookUpReq();
  virtual ~CacheLookUpReq();

  CacheLookUpReq(const CacheLookUpReq& from);

  inline CacheLookUpReq& operator=(const CacheLookUpReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CacheLookUpReq(CacheLookUpReq&& from) noexcept
    : CacheLookUpReq() {
    *this = ::std::move(from);
  }

  inline CacheLookUpReq& operator=(CacheLookUpReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CacheLookUpReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CacheLookUpReq* internal_default_instance() {
    return reinterpret_cast<const CacheLookUpReq*>(
               &_CacheLookUpReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(CacheLookUpReq* other);
  friend void swap(CacheLookUpReq& a, CacheLookUpReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CacheLookUpReq* New() const PROTOBUF_FINAL { return New(NULL); }

  CacheLookUpReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CacheLookUpReq& from);
  void MergeFrom(const CacheLookUpReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CacheLookUpReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // @@protoc_insertion_point(class_scope:raltservice.CacheLookUpReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsCacheLookUpReqImpl();
};
// -------------------------------------------------------------------

class CacheResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.CacheResult) */ {
 public:
  CacheResult();
  virtual ~CacheResult();

  CacheResult(const CacheResult& from);

  inline CacheResult& operator=(const CacheResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CacheResult(CacheResult&& from) noexcept
    : CacheResult() {
    *this = ::std::move(from);
  }

  inline CacheResult& operator=(CacheResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CacheResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CacheResult* internal_default_instance() {
    return reinterpret_cast<const CacheResult*>(
               &_CacheResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(CacheResult* other);
  friend void swap(CacheResult& a, CacheResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CacheResult* New() const PROTOBUF_FINAL { return New(NULL); }

  CacheResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CacheResult& from);
  void MergeFrom(const CacheResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CacheResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 bytes_total = 2;
  void clear_bytes_total();
  static const int kBytesTotalFieldNumber = 2;
  ::google::protobuf::uint64 bytes_total() const;
  void set_bytes_total(::google::protobuf::uint64 value);

  // uint32 cache_total_hits = 1;
  void clear_cache_total_hits();
  static const int kCacheTotalHitsFieldNumber = 1;
  ::google::protobuf::uint32 cache_total_hits() const;
  void set_cache_total_hits(::google::protobuf::uint32 value);

  // uint32 num_docs = 4;
  void clear_num_docs();
  static const int kNumDocsFieldNumber = 4;
  ::google::protobuf::uint32 num_docs() const;
  void set_num_docs(::google::protobuf::uint32 value);

  // uint64 bytes_used = 3;
  void clear_bytes_used();
  static const int kBytesUsedFieldNumber = 3;
  ::google::protobuf::uint64 bytes_used() const;
  void set_bytes_used(::google::protobuf::uint64 value);

  // float cache_hit_ratio = 5;
  void clear_cache_hit_ratio();
  static const int kCacheHitRatioFieldNumber = 5;
  float cache_hit_ratio() const;
  void set_cache_hit_ratio(float value);

  // @@protoc_insertion_point(class_scope:raltservice.CacheResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 bytes_total_;
  ::google::protobuf::uint32 cache_total_hits_;
  ::google::protobuf::uint32 num_docs_;
  ::google::protobuf::uint64 bytes_used_;
  float cache_hit_ratio_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsCacheResultImpl();
};
// -------------------------------------------------------------------

class FlowStatLookUpReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.FlowStatLookUpReq) */ {
 public:
  FlowStatLookUpReq();
  virtual ~FlowStatLookUpReq();

  FlowStatLookUpReq(const FlowStatLookUpReq& from);

  inline FlowStatLookUpReq& operator=(const FlowStatLookUpReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlowStatLookUpReq(FlowStatLookUpReq&& from) noexcept
    : FlowStatLookUpReq() {
    *this = ::std::move(from);
  }

  inline FlowStatLookUpReq& operator=(FlowStatLookUpReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlowStatLookUpReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlowStatLookUpReq* internal_default_instance() {
    return reinterpret_cast<const FlowStatLookUpReq*>(
               &_FlowStatLookUpReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(FlowStatLookUpReq* other);
  friend void swap(FlowStatLookUpReq& a, FlowStatLookUpReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlowStatLookUpReq* New() const PROTOBUF_FINAL { return New(NULL); }

  FlowStatLookUpReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FlowStatLookUpReq& from);
  void MergeFrom(const FlowStatLookUpReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FlowStatLookUpReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // @@protoc_insertion_point(class_scope:raltservice.FlowStatLookUpReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsFlowStatLookUpReqImpl();
};
// -------------------------------------------------------------------

class FlowResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.FlowResult) */ {
 public:
  FlowResult();
  virtual ~FlowResult();

  FlowResult(const FlowResult& from);

  inline FlowResult& operator=(const FlowResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlowResult(FlowResult&& from) noexcept
    : FlowResult() {
    *this = ::std::move(from);
  }

  inline FlowResult& operator=(FlowResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlowResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlowResult* internal_default_instance() {
    return reinterpret_cast<const FlowResult*>(
               &_FlowResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(FlowResult* other);
  friend void swap(FlowResult& a, FlowResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlowResult* New() const PROTOBUF_FINAL { return New(NULL); }

  FlowResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FlowResult& from);
  void MergeFrom(const FlowResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FlowResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 user_agent_current_connections_count = 1;
  void clear_user_agent_current_connections_count();
  static const int kUserAgentCurrentConnectionsCountFieldNumber = 1;
  ::google::protobuf::uint32 user_agent_current_connections_count() const;
  void set_user_agent_current_connections_count(::google::protobuf::uint32 value);

  // uint32 origin_server_current_connections_count = 2;
  void clear_origin_server_current_connections_count();
  static const int kOriginServerCurrentConnectionsCountFieldNumber = 2;
  ::google::protobuf::uint32 origin_server_current_connections_count() const;
  void set_origin_server_current_connections_count(::google::protobuf::uint32 value);

  // uint32 completed_requests = 3;
  void clear_completed_requests();
  static const int kCompletedRequestsFieldNumber = 3;
  ::google::protobuf::uint32 completed_requests() const;
  void set_completed_requests(::google::protobuf::uint32 value);

  // uint32 total_incoming_connections = 4;
  void clear_total_incoming_connections();
  static const int kTotalIncomingConnectionsFieldNumber = 4;
  ::google::protobuf::uint32 total_incoming_connections() const;
  void set_total_incoming_connections(::google::protobuf::uint32 value);

  // uint32 incoming_requests = 5;
  void clear_incoming_requests();
  static const int kIncomingRequestsFieldNumber = 5;
  ::google::protobuf::uint32 incoming_requests() const;
  void set_incoming_requests(::google::protobuf::uint32 value);

  // uint32 outgoing_requests = 6;
  void clear_outgoing_requests();
  static const int kOutgoingRequestsFieldNumber = 6;
  ::google::protobuf::uint32 outgoing_requests() const;
  void set_outgoing_requests(::google::protobuf::uint32 value);

  // uint32 incoming_responses = 7;
  void clear_incoming_responses();
  static const int kIncomingResponsesFieldNumber = 7;
  ::google::protobuf::uint32 incoming_responses() const;
  void set_incoming_responses(::google::protobuf::uint32 value);

  // uint32 total_client_connections = 8;
  void clear_total_client_connections();
  static const int kTotalClientConnectionsFieldNumber = 8;
  ::google::protobuf::uint32 total_client_connections() const;
  void set_total_client_connections(::google::protobuf::uint32 value);

  // uint32 total_client_connections_ipv4 = 9;
  void clear_total_client_connections_ipv4();
  static const int kTotalClientConnectionsIpv4FieldNumber = 9;
  ::google::protobuf::uint32 total_client_connections_ipv4() const;
  void set_total_client_connections_ipv4(::google::protobuf::uint32 value);

  // uint32 total_client_connections_ipv6 = 10;
  void clear_total_client_connections_ipv6();
  static const int kTotalClientConnectionsIpv6FieldNumber = 10;
  ::google::protobuf::uint32 total_client_connections_ipv6() const;
  void set_total_client_connections_ipv6(::google::protobuf::uint32 value);

  // uint64 user_agent_total_bytes = 12;
  void clear_user_agent_total_bytes();
  static const int kUserAgentTotalBytesFieldNumber = 12;
  ::google::protobuf::uint64 user_agent_total_bytes() const;
  void set_user_agent_total_bytes(::google::protobuf::uint64 value);

  // uint32 total_server_connections = 11;
  void clear_total_server_connections();
  static const int kTotalServerConnectionsFieldNumber = 11;
  ::google::protobuf::uint32 total_server_connections() const;
  void set_total_server_connections(::google::protobuf::uint32 value);

  // float bandwidth_hit_ratio = 14;
  void clear_bandwidth_hit_ratio();
  static const int kBandwidthHitRatioFieldNumber = 14;
  float bandwidth_hit_ratio() const;
  void set_bandwidth_hit_ratio(float value);

  // uint64 origin_server_total_bytes = 13;
  void clear_origin_server_total_bytes();
  static const int kOriginServerTotalBytesFieldNumber = 13;
  ::google::protobuf::uint64 origin_server_total_bytes() const;
  void set_origin_server_total_bytes(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raltservice.FlowResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 user_agent_current_connections_count_;
  ::google::protobuf::uint32 origin_server_current_connections_count_;
  ::google::protobuf::uint32 completed_requests_;
  ::google::protobuf::uint32 total_incoming_connections_;
  ::google::protobuf::uint32 incoming_requests_;
  ::google::protobuf::uint32 outgoing_requests_;
  ::google::protobuf::uint32 incoming_responses_;
  ::google::protobuf::uint32 total_client_connections_;
  ::google::protobuf::uint32 total_client_connections_ipv4_;
  ::google::protobuf::uint32 total_client_connections_ipv6_;
  ::google::protobuf::uint64 user_agent_total_bytes_;
  ::google::protobuf::uint32 total_server_connections_;
  float bandwidth_hit_ratio_;
  ::google::protobuf::uint64 origin_server_total_bytes_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsFlowResultImpl();
};
// -------------------------------------------------------------------

class LogInfoLookUpReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.LogInfoLookUpReq) */ {
 public:
  LogInfoLookUpReq();
  virtual ~LogInfoLookUpReq();

  LogInfoLookUpReq(const LogInfoLookUpReq& from);

  inline LogInfoLookUpReq& operator=(const LogInfoLookUpReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogInfoLookUpReq(LogInfoLookUpReq&& from) noexcept
    : LogInfoLookUpReq() {
    *this = ::std::move(from);
  }

  inline LogInfoLookUpReq& operator=(LogInfoLookUpReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogInfoLookUpReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogInfoLookUpReq* internal_default_instance() {
    return reinterpret_cast<const LogInfoLookUpReq*>(
               &_LogInfoLookUpReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(LogInfoLookUpReq* other);
  friend void swap(LogInfoLookUpReq& a, LogInfoLookUpReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogInfoLookUpReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LogInfoLookUpReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogInfoLookUpReq& from);
  void MergeFrom(const LogInfoLookUpReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogInfoLookUpReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // @@protoc_insertion_point(class_scope:raltservice.LogInfoLookUpReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsLogInfoLookUpReqImpl();
};
// -------------------------------------------------------------------

class LogResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.LogResult) */ {
 public:
  LogResult();
  virtual ~LogResult();

  LogResult(const LogResult& from);

  inline LogResult& operator=(const LogResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogResult(LogResult&& from) noexcept
    : LogResult() {
    *this = ::std::move(from);
  }

  inline LogResult& operator=(LogResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogResult* internal_default_instance() {
    return reinterpret_cast<const LogResult*>(
               &_LogResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(LogResult* other);
  friend void swap(LogResult& a, LogResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogResult* New() const PROTOBUF_FINAL { return New(NULL); }

  LogResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogResult& from);
  void MergeFrom(const LogResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 log_files_space_mb_used = 1;
  void clear_log_files_space_mb_used();
  static const int kLogFilesSpaceMbUsedFieldNumber = 1;
  ::google::protobuf::uint32 log_files_space_mb_used() const;
  void set_log_files_space_mb_used(::google::protobuf::uint32 value);

  // uint32 max_space_mb_for_logs = 2;
  void clear_max_space_mb_for_logs();
  static const int kMaxSpaceMbForLogsFieldNumber = 2;
  ::google::protobuf::uint32 max_space_mb_for_logs() const;
  void set_max_space_mb_for_logs(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.LogResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 log_files_space_mb_used_;
  ::google::protobuf::uint32 max_space_mb_for_logs_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsLogResultImpl();
};
// -------------------------------------------------------------------

class GetRaltLogsReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.GetRaltLogsReq) */ {
 public:
  GetRaltLogsReq();
  virtual ~GetRaltLogsReq();

  GetRaltLogsReq(const GetRaltLogsReq& from);

  inline GetRaltLogsReq& operator=(const GetRaltLogsReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRaltLogsReq(GetRaltLogsReq&& from) noexcept
    : GetRaltLogsReq() {
    *this = ::std::move(from);
  }

  inline GetRaltLogsReq& operator=(GetRaltLogsReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRaltLogsReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRaltLogsReq* internal_default_instance() {
    return reinterpret_cast<const GetRaltLogsReq*>(
               &_GetRaltLogsReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(GetRaltLogsReq* other);
  friend void swap(GetRaltLogsReq& a, GetRaltLogsReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRaltLogsReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetRaltLogsReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetRaltLogsReq& from);
  void MergeFrom(const GetRaltLogsReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetRaltLogsReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // @@protoc_insertion_point(class_scope:raltservice.GetRaltLogsReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsGetRaltLogsReqImpl();
};
// -------------------------------------------------------------------

class RaltLogs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.RaltLogs) */ {
 public:
  RaltLogs();
  virtual ~RaltLogs();

  RaltLogs(const RaltLogs& from);

  inline RaltLogs& operator=(const RaltLogs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RaltLogs(RaltLogs&& from) noexcept
    : RaltLogs() {
    *this = ::std::move(from);
  }

  inline RaltLogs& operator=(RaltLogs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RaltLogs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RaltLogs* internal_default_instance() {
    return reinterpret_cast<const RaltLogs*>(
               &_RaltLogs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(RaltLogs* other);
  friend void swap(RaltLogs& a, RaltLogs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RaltLogs* New() const PROTOBUF_FINAL { return New(NULL); }

  RaltLogs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RaltLogs& from);
  void MergeFrom(const RaltLogs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RaltLogs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes logs = 1;
  void clear_logs();
  static const int kLogsFieldNumber = 1;
  const ::std::string& logs() const;
  void set_logs(const ::std::string& value);
  #if LANG_CXX11
  void set_logs(::std::string&& value);
  #endif
  void set_logs(const char* value);
  void set_logs(const void* value, size_t size);
  ::std::string* mutable_logs();
  ::std::string* release_logs();
  void set_allocated_logs(::std::string* logs);

  // @@protoc_insertion_point(class_scope:raltservice.RaltLogs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr logs_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsRaltLogsImpl();
};
// -------------------------------------------------------------------

class GetBasicConfigReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.GetBasicConfigReq) */ {
 public:
  GetBasicConfigReq();
  virtual ~GetBasicConfigReq();

  GetBasicConfigReq(const GetBasicConfigReq& from);

  inline GetBasicConfigReq& operator=(const GetBasicConfigReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetBasicConfigReq(GetBasicConfigReq&& from) noexcept
    : GetBasicConfigReq() {
    *this = ::std::move(from);
  }

  inline GetBasicConfigReq& operator=(GetBasicConfigReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBasicConfigReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBasicConfigReq* internal_default_instance() {
    return reinterpret_cast<const GetBasicConfigReq*>(
               &_GetBasicConfigReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(GetBasicConfigReq* other);
  friend void swap(GetBasicConfigReq& a, GetBasicConfigReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetBasicConfigReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetBasicConfigReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetBasicConfigReq& from);
  void MergeFrom(const GetBasicConfigReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetBasicConfigReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.GetBasicConfigReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsGetBasicConfigReqImpl();
};
// -------------------------------------------------------------------

class GetBasicConfigRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.GetBasicConfigRsp) */ {
 public:
  GetBasicConfigRsp();
  virtual ~GetBasicConfigRsp();

  GetBasicConfigRsp(const GetBasicConfigRsp& from);

  inline GetBasicConfigRsp& operator=(const GetBasicConfigRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetBasicConfigRsp(GetBasicConfigRsp&& from) noexcept
    : GetBasicConfigRsp() {
    *this = ::std::move(from);
  }

  inline GetBasicConfigRsp& operator=(GetBasicConfigRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBasicConfigRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBasicConfigRsp* internal_default_instance() {
    return reinterpret_cast<const GetBasicConfigRsp*>(
               &_GetBasicConfigRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(GetBasicConfigRsp* other);
  friend void swap(GetBasicConfigRsp& a, GetBasicConfigRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetBasicConfigRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetBasicConfigRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetBasicConfigRsp& from);
  void MergeFrom(const GetBasicConfigRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetBasicConfigRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_ports = 4;
  void clear_server_ports();
  static const int kServerPortsFieldNumber = 4;
  const ::std::string& server_ports() const;
  void set_server_ports(const ::std::string& value);
  #if LANG_CXX11
  void set_server_ports(::std::string&& value);
  #endif
  void set_server_ports(const char* value);
  void set_server_ports(const char* value, size_t size);
  ::std::string* mutable_server_ports();
  ::std::string* release_server_ports();
  void set_allocated_server_ports(::std::string* server_ports);

  // uint32 logging_enabled = 1;
  void clear_logging_enabled();
  static const int kLoggingEnabledFieldNumber = 1;
  ::google::protobuf::uint32 logging_enabled() const;
  void set_logging_enabled(::google::protobuf::uint32 value);

  // uint32 max_space_mb_for_logs = 2;
  void clear_max_space_mb_for_logs();
  static const int kMaxSpaceMbForLogsFieldNumber = 2;
  ::google::protobuf::uint32 max_space_mb_for_logs() const;
  void set_max_space_mb_for_logs(::google::protobuf::uint32 value);

  // uint32 rolling_enabled = 3;
  void clear_rolling_enabled();
  static const int kRollingEnabledFieldNumber = 3;
  ::google::protobuf::uint32 rolling_enabled() const;
  void set_rolling_enabled(::google::protobuf::uint32 value);

  // uint32 storage_cache_size = 5;
  void clear_storage_cache_size();
  static const int kStorageCacheSizeFieldNumber = 5;
  ::google::protobuf::uint32 storage_cache_size() const;
  void set_storage_cache_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.GetBasicConfigRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_ports_;
  ::google::protobuf::uint32 logging_enabled_;
  ::google::protobuf::uint32 max_space_mb_for_logs_;
  ::google::protobuf::uint32 rolling_enabled_;
  ::google::protobuf::uint32 storage_cache_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsGetBasicConfigRspImpl();
};
// -------------------------------------------------------------------

class SetBasicConfigReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.SetBasicConfigReq) */ {
 public:
  SetBasicConfigReq();
  virtual ~SetBasicConfigReq();

  SetBasicConfigReq(const SetBasicConfigReq& from);

  inline SetBasicConfigReq& operator=(const SetBasicConfigReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetBasicConfigReq(SetBasicConfigReq&& from) noexcept
    : SetBasicConfigReq() {
    *this = ::std::move(from);
  }

  inline SetBasicConfigReq& operator=(SetBasicConfigReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetBasicConfigReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetBasicConfigReq* internal_default_instance() {
    return reinterpret_cast<const SetBasicConfigReq*>(
               &_SetBasicConfigReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(SetBasicConfigReq* other);
  friend void swap(SetBasicConfigReq& a, SetBasicConfigReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetBasicConfigReq* New() const PROTOBUF_FINAL { return New(NULL); }

  SetBasicConfigReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetBasicConfigReq& from);
  void MergeFrom(const SetBasicConfigReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetBasicConfigReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_ports = 4;
  void clear_server_ports();
  static const int kServerPortsFieldNumber = 4;
  const ::std::string& server_ports() const;
  void set_server_ports(const ::std::string& value);
  #if LANG_CXX11
  void set_server_ports(::std::string&& value);
  #endif
  void set_server_ports(const char* value);
  void set_server_ports(const char* value, size_t size);
  ::std::string* mutable_server_ports();
  ::std::string* release_server_ports();
  void set_allocated_server_ports(::std::string* server_ports);

  // uint32 logging_enabled = 1;
  void clear_logging_enabled();
  static const int kLoggingEnabledFieldNumber = 1;
  ::google::protobuf::uint32 logging_enabled() const;
  void set_logging_enabled(::google::protobuf::uint32 value);

  // uint32 max_space_mb_for_logs = 2;
  void clear_max_space_mb_for_logs();
  static const int kMaxSpaceMbForLogsFieldNumber = 2;
  ::google::protobuf::uint32 max_space_mb_for_logs() const;
  void set_max_space_mb_for_logs(::google::protobuf::uint32 value);

  // uint32 rolling_enabled = 3;
  void clear_rolling_enabled();
  static const int kRollingEnabledFieldNumber = 3;
  ::google::protobuf::uint32 rolling_enabled() const;
  void set_rolling_enabled(::google::protobuf::uint32 value);

  // uint32 storage_cache_size = 5;
  void clear_storage_cache_size();
  static const int kStorageCacheSizeFieldNumber = 5;
  ::google::protobuf::uint32 storage_cache_size() const;
  void set_storage_cache_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.SetBasicConfigReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_ports_;
  ::google::protobuf::uint32 logging_enabled_;
  ::google::protobuf::uint32 max_space_mb_for_logs_;
  ::google::protobuf::uint32 rolling_enabled_;
  ::google::protobuf::uint32 storage_cache_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsSetBasicConfigReqImpl();
};
// -------------------------------------------------------------------

class SetBasicConfigRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.SetBasicConfigRsp) */ {
 public:
  SetBasicConfigRsp();
  virtual ~SetBasicConfigRsp();

  SetBasicConfigRsp(const SetBasicConfigRsp& from);

  inline SetBasicConfigRsp& operator=(const SetBasicConfigRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetBasicConfigRsp(SetBasicConfigRsp&& from) noexcept
    : SetBasicConfigRsp() {
    *this = ::std::move(from);
  }

  inline SetBasicConfigRsp& operator=(SetBasicConfigRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetBasicConfigRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetBasicConfigRsp* internal_default_instance() {
    return reinterpret_cast<const SetBasicConfigRsp*>(
               &_SetBasicConfigRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(SetBasicConfigRsp* other);
  friend void swap(SetBasicConfigRsp& a, SetBasicConfigRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetBasicConfigRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  SetBasicConfigRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetBasicConfigRsp& from);
  void MergeFrom(const SetBasicConfigRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetBasicConfigRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.SetBasicConfigRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 result_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsSetBasicConfigRspImpl();
};
// -------------------------------------------------------------------

class Domain : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.Domain) */ {
 public:
  Domain();
  virtual ~Domain();

  Domain(const Domain& from);

  inline Domain& operator=(const Domain& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Domain(Domain&& from) noexcept
    : Domain() {
    *this = ::std::move(from);
  }

  inline Domain& operator=(Domain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Domain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Domain* internal_default_instance() {
    return reinterpret_cast<const Domain*>(
               &_Domain_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(Domain* other);
  friend void swap(Domain& a, Domain& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Domain* New() const PROTOBUF_FINAL { return New(NULL); }

  Domain* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Domain& from);
  void MergeFrom(const Domain& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Domain* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string domain_str = 2;
  void clear_domain_str();
  static const int kDomainStrFieldNumber = 2;
  const ::std::string& domain_str() const;
  void set_domain_str(const ::std::string& value);
  #if LANG_CXX11
  void set_domain_str(::std::string&& value);
  #endif
  void set_domain_str(const char* value);
  void set_domain_str(const char* value, size_t size);
  ::std::string* mutable_domain_str();
  ::std::string* release_domain_str();
  void set_allocated_domain_str(::std::string* domain_str);

  // string append_or_replace_str = 3;
  void clear_append_or_replace_str();
  static const int kAppendOrReplaceStrFieldNumber = 3;
  const ::std::string& append_or_replace_str() const;
  void set_append_or_replace_str(const ::std::string& value);
  #if LANG_CXX11
  void set_append_or_replace_str(::std::string&& value);
  #endif
  void set_append_or_replace_str(const char* value);
  void set_append_or_replace_str(const char* value, size_t size);
  ::std::string* mutable_append_or_replace_str();
  ::std::string* release_append_or_replace_str();
  void set_allocated_append_or_replace_str(::std::string* append_or_replace_str);

  // string port = 4;
  void clear_port();
  static const int kPortFieldNumber = 4;
  const ::std::string& port() const;
  void set_port(const ::std::string& value);
  #if LANG_CXX11
  void set_port(::std::string&& value);
  #endif
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  ::std::string* mutable_port();
  ::std::string* release_port();
  void set_allocated_port(::std::string* port);

  // .raltservice.DomainType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::raltservice::DomainType type() const;
  void set_type(::raltservice::DomainType value);

  // @@protoc_insertion_point(class_scope:raltservice.Domain)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr domain_str_;
  ::google::protobuf::internal::ArenaStringPtr append_or_replace_str_;
  ::google::protobuf::internal::ArenaStringPtr port_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsDomainImpl();
};
// -------------------------------------------------------------------

class GetAllDomainReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.GetAllDomainReq) */ {
 public:
  GetAllDomainReq();
  virtual ~GetAllDomainReq();

  GetAllDomainReq(const GetAllDomainReq& from);

  inline GetAllDomainReq& operator=(const GetAllDomainReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetAllDomainReq(GetAllDomainReq&& from) noexcept
    : GetAllDomainReq() {
    *this = ::std::move(from);
  }

  inline GetAllDomainReq& operator=(GetAllDomainReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAllDomainReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllDomainReq* internal_default_instance() {
    return reinterpret_cast<const GetAllDomainReq*>(
               &_GetAllDomainReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(GetAllDomainReq* other);
  friend void swap(GetAllDomainReq& a, GetAllDomainReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAllDomainReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetAllDomainReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetAllDomainReq& from);
  void MergeFrom(const GetAllDomainReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetAllDomainReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 page_size = 1;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 1;
  ::google::protobuf::uint32 page_size() const;
  void set_page_size(::google::protobuf::uint32 value);

  // uint32 page_number = 2;
  void clear_page_number();
  static const int kPageNumberFieldNumber = 2;
  ::google::protobuf::uint32 page_number() const;
  void set_page_number(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.GetAllDomainReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 page_size_;
  ::google::protobuf::uint32 page_number_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsGetAllDomainReqImpl();
};
// -------------------------------------------------------------------

class GetAllDomainRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.GetAllDomainRsp) */ {
 public:
  GetAllDomainRsp();
  virtual ~GetAllDomainRsp();

  GetAllDomainRsp(const GetAllDomainRsp& from);

  inline GetAllDomainRsp& operator=(const GetAllDomainRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetAllDomainRsp(GetAllDomainRsp&& from) noexcept
    : GetAllDomainRsp() {
    *this = ::std::move(from);
  }

  inline GetAllDomainRsp& operator=(GetAllDomainRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAllDomainRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllDomainRsp* internal_default_instance() {
    return reinterpret_cast<const GetAllDomainRsp*>(
               &_GetAllDomainRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(GetAllDomainRsp* other);
  friend void swap(GetAllDomainRsp& a, GetAllDomainRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAllDomainRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetAllDomainRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetAllDomainRsp& from);
  void MergeFrom(const GetAllDomainRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetAllDomainRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .raltservice.Domain domain = 1;
  int domain_size() const;
  void clear_domain();
  static const int kDomainFieldNumber = 1;
  const ::raltservice::Domain& domain(int index) const;
  ::raltservice::Domain* mutable_domain(int index);
  ::raltservice::Domain* add_domain();
  ::google::protobuf::RepeatedPtrField< ::raltservice::Domain >*
      mutable_domain();
  const ::google::protobuf::RepeatedPtrField< ::raltservice::Domain >&
      domain() const;

  // uint32 domain_total = 2;
  void clear_domain_total();
  static const int kDomainTotalFieldNumber = 2;
  ::google::protobuf::uint32 domain_total() const;
  void set_domain_total(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.GetAllDomainRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::raltservice::Domain > domain_;
  ::google::protobuf::uint32 domain_total_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsGetAllDomainRspImpl();
};
// -------------------------------------------------------------------

class UpdateDomainRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.UpdateDomainRsp) */ {
 public:
  UpdateDomainRsp();
  virtual ~UpdateDomainRsp();

  UpdateDomainRsp(const UpdateDomainRsp& from);

  inline UpdateDomainRsp& operator=(const UpdateDomainRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateDomainRsp(UpdateDomainRsp&& from) noexcept
    : UpdateDomainRsp() {
    *this = ::std::move(from);
  }

  inline UpdateDomainRsp& operator=(UpdateDomainRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateDomainRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateDomainRsp* internal_default_instance() {
    return reinterpret_cast<const UpdateDomainRsp*>(
               &_UpdateDomainRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(UpdateDomainRsp* other);
  friend void swap(UpdateDomainRsp& a, UpdateDomainRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateDomainRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateDomainRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateDomainRsp& from);
  void MergeFrom(const UpdateDomainRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateDomainRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.UpdateDomainRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 result_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsUpdateDomainRspImpl();
};
// -------------------------------------------------------------------

class GetDomainReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.GetDomainReq) */ {
 public:
  GetDomainReq();
  virtual ~GetDomainReq();

  GetDomainReq(const GetDomainReq& from);

  inline GetDomainReq& operator=(const GetDomainReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDomainReq(GetDomainReq&& from) noexcept
    : GetDomainReq() {
    *this = ::std::move(from);
  }

  inline GetDomainReq& operator=(GetDomainReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDomainReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDomainReq* internal_default_instance() {
    return reinterpret_cast<const GetDomainReq*>(
               &_GetDomainReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(GetDomainReq* other);
  friend void swap(GetDomainReq& a, GetDomainReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDomainReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetDomainReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetDomainReq& from);
  void MergeFrom(const GetDomainReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetDomainReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string domain_str = 1;
  void clear_domain_str();
  static const int kDomainStrFieldNumber = 1;
  const ::std::string& domain_str() const;
  void set_domain_str(const ::std::string& value);
  #if LANG_CXX11
  void set_domain_str(::std::string&& value);
  #endif
  void set_domain_str(const char* value);
  void set_domain_str(const char* value, size_t size);
  ::std::string* mutable_domain_str();
  ::std::string* release_domain_str();
  void set_allocated_domain_str(::std::string* domain_str);

  // string transformed_domain = 2;
  void clear_transformed_domain();
  static const int kTransformedDomainFieldNumber = 2;
  const ::std::string& transformed_domain() const;
  void set_transformed_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_transformed_domain(::std::string&& value);
  #endif
  void set_transformed_domain(const char* value);
  void set_transformed_domain(const char* value, size_t size);
  ::std::string* mutable_transformed_domain();
  ::std::string* release_transformed_domain();
  void set_allocated_transformed_domain(::std::string* transformed_domain);

  // uint32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::uint32 page_size() const;
  void set_page_size(::google::protobuf::uint32 value);

  // uint32 page_number = 4;
  void clear_page_number();
  static const int kPageNumberFieldNumber = 4;
  ::google::protobuf::uint32 page_number() const;
  void set_page_number(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.GetDomainReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr domain_str_;
  ::google::protobuf::internal::ArenaStringPtr transformed_domain_;
  ::google::protobuf::uint32 page_size_;
  ::google::protobuf::uint32 page_number_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsGetDomainReqImpl();
};
// -------------------------------------------------------------------

class GetDomainRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.GetDomainRsp) */ {
 public:
  GetDomainRsp();
  virtual ~GetDomainRsp();

  GetDomainRsp(const GetDomainRsp& from);

  inline GetDomainRsp& operator=(const GetDomainRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDomainRsp(GetDomainRsp&& from) noexcept
    : GetDomainRsp() {
    *this = ::std::move(from);
  }

  inline GetDomainRsp& operator=(GetDomainRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDomainRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDomainRsp* internal_default_instance() {
    return reinterpret_cast<const GetDomainRsp*>(
               &_GetDomainRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(GetDomainRsp* other);
  friend void swap(GetDomainRsp& a, GetDomainRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDomainRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetDomainRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetDomainRsp& from);
  void MergeFrom(const GetDomainRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetDomainRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .raltservice.Domain domain = 1;
  int domain_size() const;
  void clear_domain();
  static const int kDomainFieldNumber = 1;
  const ::raltservice::Domain& domain(int index) const;
  ::raltservice::Domain* mutable_domain(int index);
  ::raltservice::Domain* add_domain();
  ::google::protobuf::RepeatedPtrField< ::raltservice::Domain >*
      mutable_domain();
  const ::google::protobuf::RepeatedPtrField< ::raltservice::Domain >&
      domain() const;

  // uint32 domain_total = 2;
  void clear_domain_total();
  static const int kDomainTotalFieldNumber = 2;
  ::google::protobuf::uint32 domain_total() const;
  void set_domain_total(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.GetDomainRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::raltservice::Domain > domain_;
  ::google::protobuf::uint32 domain_total_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsGetDomainRspImpl();
};
// -------------------------------------------------------------------

class AddDomainRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.AddDomainRsp) */ {
 public:
  AddDomainRsp();
  virtual ~AddDomainRsp();

  AddDomainRsp(const AddDomainRsp& from);

  inline AddDomainRsp& operator=(const AddDomainRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddDomainRsp(AddDomainRsp&& from) noexcept
    : AddDomainRsp() {
    *this = ::std::move(from);
  }

  inline AddDomainRsp& operator=(AddDomainRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddDomainRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddDomainRsp* internal_default_instance() {
    return reinterpret_cast<const AddDomainRsp*>(
               &_AddDomainRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(AddDomainRsp* other);
  friend void swap(AddDomainRsp& a, AddDomainRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddDomainRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  AddDomainRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddDomainRsp& from);
  void MergeFrom(const AddDomainRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddDomainRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.AddDomainRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 result_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsAddDomainRspImpl();
};
// -------------------------------------------------------------------

class DeleteDomainReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.DeleteDomainReq) */ {
 public:
  DeleteDomainReq();
  virtual ~DeleteDomainReq();

  DeleteDomainReq(const DeleteDomainReq& from);

  inline DeleteDomainReq& operator=(const DeleteDomainReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteDomainReq(DeleteDomainReq&& from) noexcept
    : DeleteDomainReq() {
    *this = ::std::move(from);
  }

  inline DeleteDomainReq& operator=(DeleteDomainReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteDomainReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteDomainReq* internal_default_instance() {
    return reinterpret_cast<const DeleteDomainReq*>(
               &_DeleteDomainReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(DeleteDomainReq* other);
  friend void swap(DeleteDomainReq& a, DeleteDomainReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteDomainReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteDomainReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteDomainReq& from);
  void MergeFrom(const DeleteDomainReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteDomainReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string domain_str = 1;
  void clear_domain_str();
  static const int kDomainStrFieldNumber = 1;
  const ::std::string& domain_str() const;
  void set_domain_str(const ::std::string& value);
  #if LANG_CXX11
  void set_domain_str(::std::string&& value);
  #endif
  void set_domain_str(const char* value);
  void set_domain_str(const char* value, size_t size);
  ::std::string* mutable_domain_str();
  ::std::string* release_domain_str();
  void set_allocated_domain_str(::std::string* domain_str);

  // @@protoc_insertion_point(class_scope:raltservice.DeleteDomainReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr domain_str_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsDeleteDomainReqImpl();
};
// -------------------------------------------------------------------

class DeleteDomainRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.DeleteDomainRsp) */ {
 public:
  DeleteDomainRsp();
  virtual ~DeleteDomainRsp();

  DeleteDomainRsp(const DeleteDomainRsp& from);

  inline DeleteDomainRsp& operator=(const DeleteDomainRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteDomainRsp(DeleteDomainRsp&& from) noexcept
    : DeleteDomainRsp() {
    *this = ::std::move(from);
  }

  inline DeleteDomainRsp& operator=(DeleteDomainRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteDomainRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteDomainRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteDomainRsp*>(
               &_DeleteDomainRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(DeleteDomainRsp* other);
  friend void swap(DeleteDomainRsp& a, DeleteDomainRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteDomainRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteDomainRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteDomainRsp& from);
  void MergeFrom(const DeleteDomainRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteDomainRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.DeleteDomainRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 result_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsDeleteDomainRspImpl();
};
// -------------------------------------------------------------------

class GetMiscReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.GetMiscReq) */ {
 public:
  GetMiscReq();
  virtual ~GetMiscReq();

  GetMiscReq(const GetMiscReq& from);

  inline GetMiscReq& operator=(const GetMiscReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMiscReq(GetMiscReq&& from) noexcept
    : GetMiscReq() {
    *this = ::std::move(from);
  }

  inline GetMiscReq& operator=(GetMiscReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMiscReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMiscReq* internal_default_instance() {
    return reinterpret_cast<const GetMiscReq*>(
               &_GetMiscReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(GetMiscReq* other);
  friend void swap(GetMiscReq& a, GetMiscReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMiscReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetMiscReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetMiscReq& from);
  void MergeFrom(const GetMiscReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetMiscReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.GetMiscReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsGetMiscReqImpl();
};
// -------------------------------------------------------------------

class GetMiscRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.GetMiscRsp) */ {
 public:
  GetMiscRsp();
  virtual ~GetMiscRsp();

  GetMiscRsp(const GetMiscRsp& from);

  inline GetMiscRsp& operator=(const GetMiscRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMiscRsp(GetMiscRsp&& from) noexcept
    : GetMiscRsp() {
    *this = ::std::move(from);
  }

  inline GetMiscRsp& operator=(GetMiscRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMiscRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMiscRsp* internal_default_instance() {
    return reinterpret_cast<const GetMiscRsp*>(
               &_GetMiscRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(GetMiscRsp* other);
  friend void swap(GetMiscRsp& a, GetMiscRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMiscRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetMiscRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetMiscRsp& from);
  void MergeFrom(const GetMiscRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetMiscRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .raltservice.MiscSwitch ralt_filter_type_default = 1;
  void clear_ralt_filter_type_default();
  static const int kRaltFilterTypeDefaultFieldNumber = 1;
  ::raltservice::MiscSwitch ralt_filter_type_default() const;
  void set_ralt_filter_type_default(::raltservice::MiscSwitch value);

  // @@protoc_insertion_point(class_scope:raltservice.GetMiscRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int ralt_filter_type_default_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsGetMiscRspImpl();
};
// -------------------------------------------------------------------

class Misc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.Misc) */ {
 public:
  Misc();
  virtual ~Misc();

  Misc(const Misc& from);

  inline Misc& operator=(const Misc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Misc(Misc&& from) noexcept
    : Misc() {
    *this = ::std::move(from);
  }

  inline Misc& operator=(Misc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Misc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Misc* internal_default_instance() {
    return reinterpret_cast<const Misc*>(
               &_Misc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(Misc* other);
  friend void swap(Misc& a, Misc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Misc* New() const PROTOBUF_FINAL { return New(NULL); }

  Misc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Misc& from);
  void MergeFrom(const Misc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Misc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .raltservice.MiscKey key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::raltservice::MiscKey key() const;
  void set_key(::raltservice::MiscKey value);

  // .raltservice.MiscSwitch value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::raltservice::MiscSwitch value() const;
  void set_value(::raltservice::MiscSwitch value);

  // @@protoc_insertion_point(class_scope:raltservice.Misc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int key_;
  int value_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsMiscImpl();
};
// -------------------------------------------------------------------

class ModMiscOpRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.ModMiscOpRsp) */ {
 public:
  ModMiscOpRsp();
  virtual ~ModMiscOpRsp();

  ModMiscOpRsp(const ModMiscOpRsp& from);

  inline ModMiscOpRsp& operator=(const ModMiscOpRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModMiscOpRsp(ModMiscOpRsp&& from) noexcept
    : ModMiscOpRsp() {
    *this = ::std::move(from);
  }

  inline ModMiscOpRsp& operator=(ModMiscOpRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ModMiscOpRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModMiscOpRsp* internal_default_instance() {
    return reinterpret_cast<const ModMiscOpRsp*>(
               &_ModMiscOpRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(ModMiscOpRsp* other);
  friend void swap(ModMiscOpRsp& a, ModMiscOpRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModMiscOpRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  ModMiscOpRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ModMiscOpRsp& from);
  void MergeFrom(const ModMiscOpRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ModMiscOpRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.ModMiscOpRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 result_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsModMiscOpRspImpl();
};
// -------------------------------------------------------------------

class RaltStatusReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.RaltStatusReq) */ {
 public:
  RaltStatusReq();
  virtual ~RaltStatusReq();

  RaltStatusReq(const RaltStatusReq& from);

  inline RaltStatusReq& operator=(const RaltStatusReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RaltStatusReq(RaltStatusReq&& from) noexcept
    : RaltStatusReq() {
    *this = ::std::move(from);
  }

  inline RaltStatusReq& operator=(RaltStatusReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RaltStatusReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RaltStatusReq* internal_default_instance() {
    return reinterpret_cast<const RaltStatusReq*>(
               &_RaltStatusReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(RaltStatusReq* other);
  friend void swap(RaltStatusReq& a, RaltStatusReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RaltStatusReq* New() const PROTOBUF_FINAL { return New(NULL); }

  RaltStatusReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RaltStatusReq& from);
  void MergeFrom(const RaltStatusReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RaltStatusReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // @@protoc_insertion_point(class_scope:raltservice.RaltStatusReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsRaltStatusReqImpl();
};
// -------------------------------------------------------------------

class RaltStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.RaltStatus) */ {
 public:
  RaltStatus();
  virtual ~RaltStatus();

  RaltStatus(const RaltStatus& from);

  inline RaltStatus& operator=(const RaltStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RaltStatus(RaltStatus&& from) noexcept
    : RaltStatus() {
    *this = ::std::move(from);
  }

  inline RaltStatus& operator=(RaltStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RaltStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RaltStatus* internal_default_instance() {
    return reinterpret_cast<const RaltStatus*>(
               &_RaltStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(RaltStatus* other);
  friend void swap(RaltStatus& a, RaltStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RaltStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  RaltStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RaltStatus& from);
  void MergeFrom(const RaltStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RaltStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // uint32 status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.RaltStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  ::google::protobuf::uint32 status_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsRaltStatusImpl();
};
// -------------------------------------------------------------------

class ExecCmdReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.ExecCmdReq) */ {
 public:
  ExecCmdReq();
  virtual ~ExecCmdReq();

  ExecCmdReq(const ExecCmdReq& from);

  inline ExecCmdReq& operator=(const ExecCmdReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecCmdReq(ExecCmdReq&& from) noexcept
    : ExecCmdReq() {
    *this = ::std::move(from);
  }

  inline ExecCmdReq& operator=(ExecCmdReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecCmdReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecCmdReq* internal_default_instance() {
    return reinterpret_cast<const ExecCmdReq*>(
               &_ExecCmdReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(ExecCmdReq* other);
  friend void swap(ExecCmdReq& a, ExecCmdReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecCmdReq* New() const PROTOBUF_FINAL { return New(NULL); }

  ExecCmdReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExecCmdReq& from);
  void MergeFrom(const ExecCmdReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExecCmdReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // .raltservice.CommandType cmd = 2;
  void clear_cmd();
  static const int kCmdFieldNumber = 2;
  ::raltservice::CommandType cmd() const;
  void set_cmd(::raltservice::CommandType value);

  // @@protoc_insertion_point(class_scope:raltservice.ExecCmdReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  int cmd_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsExecCmdReqImpl();
};
// -------------------------------------------------------------------

class ExecCmdRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.ExecCmdRsp) */ {
 public:
  ExecCmdRsp();
  virtual ~ExecCmdRsp();

  ExecCmdRsp(const ExecCmdRsp& from);

  inline ExecCmdRsp& operator=(const ExecCmdRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecCmdRsp(ExecCmdRsp&& from) noexcept
    : ExecCmdRsp() {
    *this = ::std::move(from);
  }

  inline ExecCmdRsp& operator=(ExecCmdRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecCmdRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecCmdRsp* internal_default_instance() {
    return reinterpret_cast<const ExecCmdRsp*>(
               &_ExecCmdRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(ExecCmdRsp* other);
  friend void swap(ExecCmdRsp& a, ExecCmdRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecCmdRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  ExecCmdRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExecCmdRsp& from);
  void MergeFrom(const ExecCmdRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExecCmdRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.ExecCmdRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 result_;
  mutable int _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
  friend void ::protobuf_ralt_2dservice_2eproto::InitDefaultsExecCmdRspImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetRaltStatsReq

// string ip_addr = 1;
inline void GetRaltStatsReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRaltStatsReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:raltservice.GetRaltStatsReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void GetRaltStatsReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.GetRaltStatsReq.ip_addr)
}
#if LANG_CXX11
inline void GetRaltStatsReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.GetRaltStatsReq.ip_addr)
}
#endif
inline void GetRaltStatsReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.GetRaltStatsReq.ip_addr)
}
inline void GetRaltStatsReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.GetRaltStatsReq.ip_addr)
}
inline ::std::string* GetRaltStatsReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.GetRaltStatsReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRaltStatsReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:raltservice.GetRaltStatsReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRaltStatsReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:raltservice.GetRaltStatsReq.ip_addr)
}

// -------------------------------------------------------------------

// GetRaltStatsRsp

// uint64 cache_used_bytes = 1;
inline void GetRaltStatsRsp::clear_cache_used_bytes() {
  cache_used_bytes_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetRaltStatsRsp::cache_used_bytes() const {
  // @@protoc_insertion_point(field_get:raltservice.GetRaltStatsRsp.cache_used_bytes)
  return cache_used_bytes_;
}
inline void GetRaltStatsRsp::set_cache_used_bytes(::google::protobuf::uint64 value) {
  
  cache_used_bytes_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetRaltStatsRsp.cache_used_bytes)
}

// uint64 cache_total_bytes = 2;
inline void GetRaltStatsRsp::clear_cache_total_bytes() {
  cache_total_bytes_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetRaltStatsRsp::cache_total_bytes() const {
  // @@protoc_insertion_point(field_get:raltservice.GetRaltStatsRsp.cache_total_bytes)
  return cache_total_bytes_;
}
inline void GetRaltStatsRsp::set_cache_total_bytes(::google::protobuf::uint64 value) {
  
  cache_total_bytes_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetRaltStatsRsp.cache_total_bytes)
}

// uint32 logs_space_used_mb = 3;
inline void GetRaltStatsRsp::clear_logs_space_used_mb() {
  logs_space_used_mb_ = 0u;
}
inline ::google::protobuf::uint32 GetRaltStatsRsp::logs_space_used_mb() const {
  // @@protoc_insertion_point(field_get:raltservice.GetRaltStatsRsp.logs_space_used_mb)
  return logs_space_used_mb_;
}
inline void GetRaltStatsRsp::set_logs_space_used_mb(::google::protobuf::uint32 value) {
  
  logs_space_used_mb_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetRaltStatsRsp.logs_space_used_mb)
}

// uint32 logs_space_total_mb = 4;
inline void GetRaltStatsRsp::clear_logs_space_total_mb() {
  logs_space_total_mb_ = 0u;
}
inline ::google::protobuf::uint32 GetRaltStatsRsp::logs_space_total_mb() const {
  // @@protoc_insertion_point(field_get:raltservice.GetRaltStatsRsp.logs_space_total_mb)
  return logs_space_total_mb_;
}
inline void GetRaltStatsRsp::set_logs_space_total_mb(::google::protobuf::uint32 value) {
  
  logs_space_total_mb_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetRaltStatsRsp.logs_space_total_mb)
}

// uint32 flow_completed_requests = 5;
inline void GetRaltStatsRsp::clear_flow_completed_requests() {
  flow_completed_requests_ = 0u;
}
inline ::google::protobuf::uint32 GetRaltStatsRsp::flow_completed_requests() const {
  // @@protoc_insertion_point(field_get:raltservice.GetRaltStatsRsp.flow_completed_requests)
  return flow_completed_requests_;
}
inline void GetRaltStatsRsp::set_flow_completed_requests(::google::protobuf::uint32 value) {
  
  flow_completed_requests_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetRaltStatsRsp.flow_completed_requests)
}

// uint32 flow_incoming_requests = 6;
inline void GetRaltStatsRsp::clear_flow_incoming_requests() {
  flow_incoming_requests_ = 0u;
}
inline ::google::protobuf::uint32 GetRaltStatsRsp::flow_incoming_requests() const {
  // @@protoc_insertion_point(field_get:raltservice.GetRaltStatsRsp.flow_incoming_requests)
  return flow_incoming_requests_;
}
inline void GetRaltStatsRsp::set_flow_incoming_requests(::google::protobuf::uint32 value) {
  
  flow_incoming_requests_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetRaltStatsRsp.flow_incoming_requests)
}

// uint32 flow_total_client_connections_ipv4 = 7;
inline void GetRaltStatsRsp::clear_flow_total_client_connections_ipv4() {
  flow_total_client_connections_ipv4_ = 0u;
}
inline ::google::protobuf::uint32 GetRaltStatsRsp::flow_total_client_connections_ipv4() const {
  // @@protoc_insertion_point(field_get:raltservice.GetRaltStatsRsp.flow_total_client_connections_ipv4)
  return flow_total_client_connections_ipv4_;
}
inline void GetRaltStatsRsp::set_flow_total_client_connections_ipv4(::google::protobuf::uint32 value) {
  
  flow_total_client_connections_ipv4_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetRaltStatsRsp.flow_total_client_connections_ipv4)
}

// uint32 flow_total_client_connections_ipv6 = 8;
inline void GetRaltStatsRsp::clear_flow_total_client_connections_ipv6() {
  flow_total_client_connections_ipv6_ = 0u;
}
inline ::google::protobuf::uint32 GetRaltStatsRsp::flow_total_client_connections_ipv6() const {
  // @@protoc_insertion_point(field_get:raltservice.GetRaltStatsRsp.flow_total_client_connections_ipv6)
  return flow_total_client_connections_ipv6_;
}
inline void GetRaltStatsRsp::set_flow_total_client_connections_ipv6(::google::protobuf::uint32 value) {
  
  flow_total_client_connections_ipv6_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetRaltStatsRsp.flow_total_client_connections_ipv6)
}

// float flow_bandwidth_hit_ratio = 9;
inline void GetRaltStatsRsp::clear_flow_bandwidth_hit_ratio() {
  flow_bandwidth_hit_ratio_ = 0;
}
inline float GetRaltStatsRsp::flow_bandwidth_hit_ratio() const {
  // @@protoc_insertion_point(field_get:raltservice.GetRaltStatsRsp.flow_bandwidth_hit_ratio)
  return flow_bandwidth_hit_ratio_;
}
inline void GetRaltStatsRsp::set_flow_bandwidth_hit_ratio(float value) {
  
  flow_bandwidth_hit_ratio_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetRaltStatsRsp.flow_bandwidth_hit_ratio)
}

// -------------------------------------------------------------------

// StatsFieldName

// string ip_addr = 1;
inline void StatsFieldName::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatsFieldName::ip_addr() const {
  // @@protoc_insertion_point(field_get:raltservice.StatsFieldName.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void StatsFieldName::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.StatsFieldName.ip_addr)
}
#if LANG_CXX11
inline void StatsFieldName::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.StatsFieldName.ip_addr)
}
#endif
inline void StatsFieldName::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.StatsFieldName.ip_addr)
}
inline void StatsFieldName::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.StatsFieldName.ip_addr)
}
inline ::std::string* StatsFieldName::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.StatsFieldName.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatsFieldName::release_ip_addr() {
  // @@protoc_insertion_point(field_release:raltservice.StatsFieldName.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatsFieldName::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:raltservice.StatsFieldName.ip_addr)
}

// string field_name = 2;
inline void StatsFieldName::clear_field_name() {
  field_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatsFieldName::field_name() const {
  // @@protoc_insertion_point(field_get:raltservice.StatsFieldName.field_name)
  return field_name_.GetNoArena();
}
inline void StatsFieldName::set_field_name(const ::std::string& value) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.StatsFieldName.field_name)
}
#if LANG_CXX11
inline void StatsFieldName::set_field_name(::std::string&& value) {
  
  field_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.StatsFieldName.field_name)
}
#endif
inline void StatsFieldName::set_field_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.StatsFieldName.field_name)
}
inline void StatsFieldName::set_field_name(const char* value, size_t size) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.StatsFieldName.field_name)
}
inline ::std::string* StatsFieldName::mutable_field_name() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.StatsFieldName.field_name)
  return field_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatsFieldName::release_field_name() {
  // @@protoc_insertion_point(field_release:raltservice.StatsFieldName.field_name)
  
  return field_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatsFieldName::set_allocated_field_name(::std::string* field_name) {
  if (field_name != NULL) {
    
  } else {
    
  }
  field_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field_name);
  // @@protoc_insertion_point(field_set_allocated:raltservice.StatsFieldName.field_name)
}

// -------------------------------------------------------------------

// StatsFieldValue

// string value = 1;
inline void StatsFieldValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatsFieldValue::value() const {
  // @@protoc_insertion_point(field_get:raltservice.StatsFieldValue.value)
  return value_.GetNoArena();
}
inline void StatsFieldValue::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.StatsFieldValue.value)
}
#if LANG_CXX11
inline void StatsFieldValue::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.StatsFieldValue.value)
}
#endif
inline void StatsFieldValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.StatsFieldValue.value)
}
inline void StatsFieldValue::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.StatsFieldValue.value)
}
inline ::std::string* StatsFieldValue::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.StatsFieldValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatsFieldValue::release_value() {
  // @@protoc_insertion_point(field_release:raltservice.StatsFieldValue.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatsFieldValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raltservice.StatsFieldValue.value)
}

// -------------------------------------------------------------------

// HomePageReq

// uint32 type = 1;
inline void HomePageReq::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 HomePageReq::type() const {
  // @@protoc_insertion_point(field_get:raltservice.HomePageReq.type)
  return type_;
}
inline void HomePageReq::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:raltservice.HomePageReq.type)
}

// -------------------------------------------------------------------

// HomePageRsp

// uint32 domain_num = 1;
inline void HomePageRsp::clear_domain_num() {
  domain_num_ = 0u;
}
inline ::google::protobuf::uint32 HomePageRsp::domain_num() const {
  // @@protoc_insertion_point(field_get:raltservice.HomePageRsp.domain_num)
  return domain_num_;
}
inline void HomePageRsp::set_domain_num(::google::protobuf::uint32 value) {
  
  domain_num_ = value;
  // @@protoc_insertion_point(field_set:raltservice.HomePageRsp.domain_num)
}

// uint32 cluster_device = 2;
inline void HomePageRsp::clear_cluster_device() {
  cluster_device_ = 0u;
}
inline ::google::protobuf::uint32 HomePageRsp::cluster_device() const {
  // @@protoc_insertion_point(field_get:raltservice.HomePageRsp.cluster_device)
  return cluster_device_;
}
inline void HomePageRsp::set_cluster_device(::google::protobuf::uint32 value) {
  
  cluster_device_ = value;
  // @@protoc_insertion_point(field_set:raltservice.HomePageRsp.cluster_device)
}

// uint64 app_transfor_bytes = 3;
inline void HomePageRsp::clear_app_transfor_bytes() {
  app_transfor_bytes_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HomePageRsp::app_transfor_bytes() const {
  // @@protoc_insertion_point(field_get:raltservice.HomePageRsp.app_transfor_bytes)
  return app_transfor_bytes_;
}
inline void HomePageRsp::set_app_transfor_bytes(::google::protobuf::uint64 value) {
  
  app_transfor_bytes_ = value;
  // @@protoc_insertion_point(field_set:raltservice.HomePageRsp.app_transfor_bytes)
}

// uint32 app_transfor_connections = 4;
inline void HomePageRsp::clear_app_transfor_connections() {
  app_transfor_connections_ = 0u;
}
inline ::google::protobuf::uint32 HomePageRsp::app_transfor_connections() const {
  // @@protoc_insertion_point(field_get:raltservice.HomePageRsp.app_transfor_connections)
  return app_transfor_connections_;
}
inline void HomePageRsp::set_app_transfor_connections(::google::protobuf::uint32 value) {
  
  app_transfor_connections_ = value;
  // @@protoc_insertion_point(field_set:raltservice.HomePageRsp.app_transfor_connections)
}

// uint32 cache_total_hits = 5;
inline void HomePageRsp::clear_cache_total_hits() {
  cache_total_hits_ = 0u;
}
inline ::google::protobuf::uint32 HomePageRsp::cache_total_hits() const {
  // @@protoc_insertion_point(field_get:raltservice.HomePageRsp.cache_total_hits)
  return cache_total_hits_;
}
inline void HomePageRsp::set_cache_total_hits(::google::protobuf::uint32 value) {
  
  cache_total_hits_ = value;
  // @@protoc_insertion_point(field_set:raltservice.HomePageRsp.cache_total_hits)
}

// uint64 cache_bytes_total = 6;
inline void HomePageRsp::clear_cache_bytes_total() {
  cache_bytes_total_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HomePageRsp::cache_bytes_total() const {
  // @@protoc_insertion_point(field_get:raltservice.HomePageRsp.cache_bytes_total)
  return cache_bytes_total_;
}
inline void HomePageRsp::set_cache_bytes_total(::google::protobuf::uint64 value) {
  
  cache_bytes_total_ = value;
  // @@protoc_insertion_point(field_set:raltservice.HomePageRsp.cache_bytes_total)
}

// uint64 cache_bytes_used = 7;
inline void HomePageRsp::clear_cache_bytes_used() {
  cache_bytes_used_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HomePageRsp::cache_bytes_used() const {
  // @@protoc_insertion_point(field_get:raltservice.HomePageRsp.cache_bytes_used)
  return cache_bytes_used_;
}
inline void HomePageRsp::set_cache_bytes_used(::google::protobuf::uint64 value) {
  
  cache_bytes_used_ = value;
  // @@protoc_insertion_point(field_set:raltservice.HomePageRsp.cache_bytes_used)
}

// uint32 cache_num_docs = 8;
inline void HomePageRsp::clear_cache_num_docs() {
  cache_num_docs_ = 0u;
}
inline ::google::protobuf::uint32 HomePageRsp::cache_num_docs() const {
  // @@protoc_insertion_point(field_get:raltservice.HomePageRsp.cache_num_docs)
  return cache_num_docs_;
}
inline void HomePageRsp::set_cache_num_docs(::google::protobuf::uint32 value) {
  
  cache_num_docs_ = value;
  // @@protoc_insertion_point(field_set:raltservice.HomePageRsp.cache_num_docs)
}

// -------------------------------------------------------------------

// CacheLookUpReq

// string ip_addr = 1;
inline void CacheLookUpReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CacheLookUpReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:raltservice.CacheLookUpReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void CacheLookUpReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.CacheLookUpReq.ip_addr)
}
#if LANG_CXX11
inline void CacheLookUpReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.CacheLookUpReq.ip_addr)
}
#endif
inline void CacheLookUpReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.CacheLookUpReq.ip_addr)
}
inline void CacheLookUpReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.CacheLookUpReq.ip_addr)
}
inline ::std::string* CacheLookUpReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.CacheLookUpReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CacheLookUpReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:raltservice.CacheLookUpReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CacheLookUpReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:raltservice.CacheLookUpReq.ip_addr)
}

// -------------------------------------------------------------------

// CacheResult

// uint32 cache_total_hits = 1;
inline void CacheResult::clear_cache_total_hits() {
  cache_total_hits_ = 0u;
}
inline ::google::protobuf::uint32 CacheResult::cache_total_hits() const {
  // @@protoc_insertion_point(field_get:raltservice.CacheResult.cache_total_hits)
  return cache_total_hits_;
}
inline void CacheResult::set_cache_total_hits(::google::protobuf::uint32 value) {
  
  cache_total_hits_ = value;
  // @@protoc_insertion_point(field_set:raltservice.CacheResult.cache_total_hits)
}

// uint64 bytes_total = 2;
inline void CacheResult::clear_bytes_total() {
  bytes_total_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CacheResult::bytes_total() const {
  // @@protoc_insertion_point(field_get:raltservice.CacheResult.bytes_total)
  return bytes_total_;
}
inline void CacheResult::set_bytes_total(::google::protobuf::uint64 value) {
  
  bytes_total_ = value;
  // @@protoc_insertion_point(field_set:raltservice.CacheResult.bytes_total)
}

// uint64 bytes_used = 3;
inline void CacheResult::clear_bytes_used() {
  bytes_used_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CacheResult::bytes_used() const {
  // @@protoc_insertion_point(field_get:raltservice.CacheResult.bytes_used)
  return bytes_used_;
}
inline void CacheResult::set_bytes_used(::google::protobuf::uint64 value) {
  
  bytes_used_ = value;
  // @@protoc_insertion_point(field_set:raltservice.CacheResult.bytes_used)
}

// uint32 num_docs = 4;
inline void CacheResult::clear_num_docs() {
  num_docs_ = 0u;
}
inline ::google::protobuf::uint32 CacheResult::num_docs() const {
  // @@protoc_insertion_point(field_get:raltservice.CacheResult.num_docs)
  return num_docs_;
}
inline void CacheResult::set_num_docs(::google::protobuf::uint32 value) {
  
  num_docs_ = value;
  // @@protoc_insertion_point(field_set:raltservice.CacheResult.num_docs)
}

// float cache_hit_ratio = 5;
inline void CacheResult::clear_cache_hit_ratio() {
  cache_hit_ratio_ = 0;
}
inline float CacheResult::cache_hit_ratio() const {
  // @@protoc_insertion_point(field_get:raltservice.CacheResult.cache_hit_ratio)
  return cache_hit_ratio_;
}
inline void CacheResult::set_cache_hit_ratio(float value) {
  
  cache_hit_ratio_ = value;
  // @@protoc_insertion_point(field_set:raltservice.CacheResult.cache_hit_ratio)
}

// -------------------------------------------------------------------

// FlowStatLookUpReq

// string ip_addr = 1;
inline void FlowStatLookUpReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FlowStatLookUpReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowStatLookUpReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void FlowStatLookUpReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.FlowStatLookUpReq.ip_addr)
}
#if LANG_CXX11
inline void FlowStatLookUpReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.FlowStatLookUpReq.ip_addr)
}
#endif
inline void FlowStatLookUpReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.FlowStatLookUpReq.ip_addr)
}
inline void FlowStatLookUpReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.FlowStatLookUpReq.ip_addr)
}
inline ::std::string* FlowStatLookUpReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.FlowStatLookUpReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FlowStatLookUpReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:raltservice.FlowStatLookUpReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlowStatLookUpReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:raltservice.FlowStatLookUpReq.ip_addr)
}

// -------------------------------------------------------------------

// FlowResult

// uint32 user_agent_current_connections_count = 1;
inline void FlowResult::clear_user_agent_current_connections_count() {
  user_agent_current_connections_count_ = 0u;
}
inline ::google::protobuf::uint32 FlowResult::user_agent_current_connections_count() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.user_agent_current_connections_count)
  return user_agent_current_connections_count_;
}
inline void FlowResult::set_user_agent_current_connections_count(::google::protobuf::uint32 value) {
  
  user_agent_current_connections_count_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.user_agent_current_connections_count)
}

// uint32 origin_server_current_connections_count = 2;
inline void FlowResult::clear_origin_server_current_connections_count() {
  origin_server_current_connections_count_ = 0u;
}
inline ::google::protobuf::uint32 FlowResult::origin_server_current_connections_count() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.origin_server_current_connections_count)
  return origin_server_current_connections_count_;
}
inline void FlowResult::set_origin_server_current_connections_count(::google::protobuf::uint32 value) {
  
  origin_server_current_connections_count_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.origin_server_current_connections_count)
}

// uint32 completed_requests = 3;
inline void FlowResult::clear_completed_requests() {
  completed_requests_ = 0u;
}
inline ::google::protobuf::uint32 FlowResult::completed_requests() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.completed_requests)
  return completed_requests_;
}
inline void FlowResult::set_completed_requests(::google::protobuf::uint32 value) {
  
  completed_requests_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.completed_requests)
}

// uint32 total_incoming_connections = 4;
inline void FlowResult::clear_total_incoming_connections() {
  total_incoming_connections_ = 0u;
}
inline ::google::protobuf::uint32 FlowResult::total_incoming_connections() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.total_incoming_connections)
  return total_incoming_connections_;
}
inline void FlowResult::set_total_incoming_connections(::google::protobuf::uint32 value) {
  
  total_incoming_connections_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.total_incoming_connections)
}

// uint32 incoming_requests = 5;
inline void FlowResult::clear_incoming_requests() {
  incoming_requests_ = 0u;
}
inline ::google::protobuf::uint32 FlowResult::incoming_requests() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.incoming_requests)
  return incoming_requests_;
}
inline void FlowResult::set_incoming_requests(::google::protobuf::uint32 value) {
  
  incoming_requests_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.incoming_requests)
}

// uint32 outgoing_requests = 6;
inline void FlowResult::clear_outgoing_requests() {
  outgoing_requests_ = 0u;
}
inline ::google::protobuf::uint32 FlowResult::outgoing_requests() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.outgoing_requests)
  return outgoing_requests_;
}
inline void FlowResult::set_outgoing_requests(::google::protobuf::uint32 value) {
  
  outgoing_requests_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.outgoing_requests)
}

// uint32 incoming_responses = 7;
inline void FlowResult::clear_incoming_responses() {
  incoming_responses_ = 0u;
}
inline ::google::protobuf::uint32 FlowResult::incoming_responses() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.incoming_responses)
  return incoming_responses_;
}
inline void FlowResult::set_incoming_responses(::google::protobuf::uint32 value) {
  
  incoming_responses_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.incoming_responses)
}

// uint32 total_client_connections = 8;
inline void FlowResult::clear_total_client_connections() {
  total_client_connections_ = 0u;
}
inline ::google::protobuf::uint32 FlowResult::total_client_connections() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.total_client_connections)
  return total_client_connections_;
}
inline void FlowResult::set_total_client_connections(::google::protobuf::uint32 value) {
  
  total_client_connections_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.total_client_connections)
}

// uint32 total_client_connections_ipv4 = 9;
inline void FlowResult::clear_total_client_connections_ipv4() {
  total_client_connections_ipv4_ = 0u;
}
inline ::google::protobuf::uint32 FlowResult::total_client_connections_ipv4() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.total_client_connections_ipv4)
  return total_client_connections_ipv4_;
}
inline void FlowResult::set_total_client_connections_ipv4(::google::protobuf::uint32 value) {
  
  total_client_connections_ipv4_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.total_client_connections_ipv4)
}

// uint32 total_client_connections_ipv6 = 10;
inline void FlowResult::clear_total_client_connections_ipv6() {
  total_client_connections_ipv6_ = 0u;
}
inline ::google::protobuf::uint32 FlowResult::total_client_connections_ipv6() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.total_client_connections_ipv6)
  return total_client_connections_ipv6_;
}
inline void FlowResult::set_total_client_connections_ipv6(::google::protobuf::uint32 value) {
  
  total_client_connections_ipv6_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.total_client_connections_ipv6)
}

// uint32 total_server_connections = 11;
inline void FlowResult::clear_total_server_connections() {
  total_server_connections_ = 0u;
}
inline ::google::protobuf::uint32 FlowResult::total_server_connections() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.total_server_connections)
  return total_server_connections_;
}
inline void FlowResult::set_total_server_connections(::google::protobuf::uint32 value) {
  
  total_server_connections_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.total_server_connections)
}

// uint64 user_agent_total_bytes = 12;
inline void FlowResult::clear_user_agent_total_bytes() {
  user_agent_total_bytes_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FlowResult::user_agent_total_bytes() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.user_agent_total_bytes)
  return user_agent_total_bytes_;
}
inline void FlowResult::set_user_agent_total_bytes(::google::protobuf::uint64 value) {
  
  user_agent_total_bytes_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.user_agent_total_bytes)
}

// uint64 origin_server_total_bytes = 13;
inline void FlowResult::clear_origin_server_total_bytes() {
  origin_server_total_bytes_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FlowResult::origin_server_total_bytes() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.origin_server_total_bytes)
  return origin_server_total_bytes_;
}
inline void FlowResult::set_origin_server_total_bytes(::google::protobuf::uint64 value) {
  
  origin_server_total_bytes_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.origin_server_total_bytes)
}

// float bandwidth_hit_ratio = 14;
inline void FlowResult::clear_bandwidth_hit_ratio() {
  bandwidth_hit_ratio_ = 0;
}
inline float FlowResult::bandwidth_hit_ratio() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.bandwidth_hit_ratio)
  return bandwidth_hit_ratio_;
}
inline void FlowResult::set_bandwidth_hit_ratio(float value) {
  
  bandwidth_hit_ratio_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.bandwidth_hit_ratio)
}

// -------------------------------------------------------------------

// LogInfoLookUpReq

// string ip_addr = 1;
inline void LogInfoLookUpReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogInfoLookUpReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:raltservice.LogInfoLookUpReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void LogInfoLookUpReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.LogInfoLookUpReq.ip_addr)
}
#if LANG_CXX11
inline void LogInfoLookUpReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.LogInfoLookUpReq.ip_addr)
}
#endif
inline void LogInfoLookUpReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.LogInfoLookUpReq.ip_addr)
}
inline void LogInfoLookUpReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.LogInfoLookUpReq.ip_addr)
}
inline ::std::string* LogInfoLookUpReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.LogInfoLookUpReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogInfoLookUpReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:raltservice.LogInfoLookUpReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogInfoLookUpReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:raltservice.LogInfoLookUpReq.ip_addr)
}

// -------------------------------------------------------------------

// LogResult

// uint32 log_files_space_mb_used = 1;
inline void LogResult::clear_log_files_space_mb_used() {
  log_files_space_mb_used_ = 0u;
}
inline ::google::protobuf::uint32 LogResult::log_files_space_mb_used() const {
  // @@protoc_insertion_point(field_get:raltservice.LogResult.log_files_space_mb_used)
  return log_files_space_mb_used_;
}
inline void LogResult::set_log_files_space_mb_used(::google::protobuf::uint32 value) {
  
  log_files_space_mb_used_ = value;
  // @@protoc_insertion_point(field_set:raltservice.LogResult.log_files_space_mb_used)
}

// uint32 max_space_mb_for_logs = 2;
inline void LogResult::clear_max_space_mb_for_logs() {
  max_space_mb_for_logs_ = 0u;
}
inline ::google::protobuf::uint32 LogResult::max_space_mb_for_logs() const {
  // @@protoc_insertion_point(field_get:raltservice.LogResult.max_space_mb_for_logs)
  return max_space_mb_for_logs_;
}
inline void LogResult::set_max_space_mb_for_logs(::google::protobuf::uint32 value) {
  
  max_space_mb_for_logs_ = value;
  // @@protoc_insertion_point(field_set:raltservice.LogResult.max_space_mb_for_logs)
}

// -------------------------------------------------------------------

// GetRaltLogsReq

// string ip_addr = 1;
inline void GetRaltLogsReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRaltLogsReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:raltservice.GetRaltLogsReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void GetRaltLogsReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.GetRaltLogsReq.ip_addr)
}
#if LANG_CXX11
inline void GetRaltLogsReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.GetRaltLogsReq.ip_addr)
}
#endif
inline void GetRaltLogsReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.GetRaltLogsReq.ip_addr)
}
inline void GetRaltLogsReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.GetRaltLogsReq.ip_addr)
}
inline ::std::string* GetRaltLogsReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.GetRaltLogsReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRaltLogsReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:raltservice.GetRaltLogsReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRaltLogsReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:raltservice.GetRaltLogsReq.ip_addr)
}

// -------------------------------------------------------------------

// RaltLogs

// bytes logs = 1;
inline void RaltLogs::clear_logs() {
  logs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RaltLogs::logs() const {
  // @@protoc_insertion_point(field_get:raltservice.RaltLogs.logs)
  return logs_.GetNoArena();
}
inline void RaltLogs::set_logs(const ::std::string& value) {
  
  logs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.RaltLogs.logs)
}
#if LANG_CXX11
inline void RaltLogs::set_logs(::std::string&& value) {
  
  logs_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.RaltLogs.logs)
}
#endif
inline void RaltLogs::set_logs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  logs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.RaltLogs.logs)
}
inline void RaltLogs::set_logs(const void* value, size_t size) {
  
  logs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.RaltLogs.logs)
}
inline ::std::string* RaltLogs::mutable_logs() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.RaltLogs.logs)
  return logs_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RaltLogs::release_logs() {
  // @@protoc_insertion_point(field_release:raltservice.RaltLogs.logs)
  
  return logs_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RaltLogs::set_allocated_logs(::std::string* logs) {
  if (logs != NULL) {
    
  } else {
    
  }
  logs_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logs);
  // @@protoc_insertion_point(field_set_allocated:raltservice.RaltLogs.logs)
}

// -------------------------------------------------------------------

// GetBasicConfigReq

// uint32 type = 1;
inline void GetBasicConfigReq::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 GetBasicConfigReq::type() const {
  // @@protoc_insertion_point(field_get:raltservice.GetBasicConfigReq.type)
  return type_;
}
inline void GetBasicConfigReq::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetBasicConfigReq.type)
}

// -------------------------------------------------------------------

// GetBasicConfigRsp

// uint32 logging_enabled = 1;
inline void GetBasicConfigRsp::clear_logging_enabled() {
  logging_enabled_ = 0u;
}
inline ::google::protobuf::uint32 GetBasicConfigRsp::logging_enabled() const {
  // @@protoc_insertion_point(field_get:raltservice.GetBasicConfigRsp.logging_enabled)
  return logging_enabled_;
}
inline void GetBasicConfigRsp::set_logging_enabled(::google::protobuf::uint32 value) {
  
  logging_enabled_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetBasicConfigRsp.logging_enabled)
}

// uint32 max_space_mb_for_logs = 2;
inline void GetBasicConfigRsp::clear_max_space_mb_for_logs() {
  max_space_mb_for_logs_ = 0u;
}
inline ::google::protobuf::uint32 GetBasicConfigRsp::max_space_mb_for_logs() const {
  // @@protoc_insertion_point(field_get:raltservice.GetBasicConfigRsp.max_space_mb_for_logs)
  return max_space_mb_for_logs_;
}
inline void GetBasicConfigRsp::set_max_space_mb_for_logs(::google::protobuf::uint32 value) {
  
  max_space_mb_for_logs_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetBasicConfigRsp.max_space_mb_for_logs)
}

// uint32 rolling_enabled = 3;
inline void GetBasicConfigRsp::clear_rolling_enabled() {
  rolling_enabled_ = 0u;
}
inline ::google::protobuf::uint32 GetBasicConfigRsp::rolling_enabled() const {
  // @@protoc_insertion_point(field_get:raltservice.GetBasicConfigRsp.rolling_enabled)
  return rolling_enabled_;
}
inline void GetBasicConfigRsp::set_rolling_enabled(::google::protobuf::uint32 value) {
  
  rolling_enabled_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetBasicConfigRsp.rolling_enabled)
}

// string server_ports = 4;
inline void GetBasicConfigRsp::clear_server_ports() {
  server_ports_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetBasicConfigRsp::server_ports() const {
  // @@protoc_insertion_point(field_get:raltservice.GetBasicConfigRsp.server_ports)
  return server_ports_.GetNoArena();
}
inline void GetBasicConfigRsp::set_server_ports(const ::std::string& value) {
  
  server_ports_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.GetBasicConfigRsp.server_ports)
}
#if LANG_CXX11
inline void GetBasicConfigRsp::set_server_ports(::std::string&& value) {
  
  server_ports_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.GetBasicConfigRsp.server_ports)
}
#endif
inline void GetBasicConfigRsp::set_server_ports(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_ports_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.GetBasicConfigRsp.server_ports)
}
inline void GetBasicConfigRsp::set_server_ports(const char* value, size_t size) {
  
  server_ports_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.GetBasicConfigRsp.server_ports)
}
inline ::std::string* GetBasicConfigRsp::mutable_server_ports() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.GetBasicConfigRsp.server_ports)
  return server_ports_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetBasicConfigRsp::release_server_ports() {
  // @@protoc_insertion_point(field_release:raltservice.GetBasicConfigRsp.server_ports)
  
  return server_ports_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetBasicConfigRsp::set_allocated_server_ports(::std::string* server_ports) {
  if (server_ports != NULL) {
    
  } else {
    
  }
  server_ports_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_ports);
  // @@protoc_insertion_point(field_set_allocated:raltservice.GetBasicConfigRsp.server_ports)
}

// uint32 storage_cache_size = 5;
inline void GetBasicConfigRsp::clear_storage_cache_size() {
  storage_cache_size_ = 0u;
}
inline ::google::protobuf::uint32 GetBasicConfigRsp::storage_cache_size() const {
  // @@protoc_insertion_point(field_get:raltservice.GetBasicConfigRsp.storage_cache_size)
  return storage_cache_size_;
}
inline void GetBasicConfigRsp::set_storage_cache_size(::google::protobuf::uint32 value) {
  
  storage_cache_size_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetBasicConfigRsp.storage_cache_size)
}

// -------------------------------------------------------------------

// SetBasicConfigReq

// uint32 logging_enabled = 1;
inline void SetBasicConfigReq::clear_logging_enabled() {
  logging_enabled_ = 0u;
}
inline ::google::protobuf::uint32 SetBasicConfigReq::logging_enabled() const {
  // @@protoc_insertion_point(field_get:raltservice.SetBasicConfigReq.logging_enabled)
  return logging_enabled_;
}
inline void SetBasicConfigReq::set_logging_enabled(::google::protobuf::uint32 value) {
  
  logging_enabled_ = value;
  // @@protoc_insertion_point(field_set:raltservice.SetBasicConfigReq.logging_enabled)
}

// uint32 max_space_mb_for_logs = 2;
inline void SetBasicConfigReq::clear_max_space_mb_for_logs() {
  max_space_mb_for_logs_ = 0u;
}
inline ::google::protobuf::uint32 SetBasicConfigReq::max_space_mb_for_logs() const {
  // @@protoc_insertion_point(field_get:raltservice.SetBasicConfigReq.max_space_mb_for_logs)
  return max_space_mb_for_logs_;
}
inline void SetBasicConfigReq::set_max_space_mb_for_logs(::google::protobuf::uint32 value) {
  
  max_space_mb_for_logs_ = value;
  // @@protoc_insertion_point(field_set:raltservice.SetBasicConfigReq.max_space_mb_for_logs)
}

// uint32 rolling_enabled = 3;
inline void SetBasicConfigReq::clear_rolling_enabled() {
  rolling_enabled_ = 0u;
}
inline ::google::protobuf::uint32 SetBasicConfigReq::rolling_enabled() const {
  // @@protoc_insertion_point(field_get:raltservice.SetBasicConfigReq.rolling_enabled)
  return rolling_enabled_;
}
inline void SetBasicConfigReq::set_rolling_enabled(::google::protobuf::uint32 value) {
  
  rolling_enabled_ = value;
  // @@protoc_insertion_point(field_set:raltservice.SetBasicConfigReq.rolling_enabled)
}

// string server_ports = 4;
inline void SetBasicConfigReq::clear_server_ports() {
  server_ports_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetBasicConfigReq::server_ports() const {
  // @@protoc_insertion_point(field_get:raltservice.SetBasicConfigReq.server_ports)
  return server_ports_.GetNoArena();
}
inline void SetBasicConfigReq::set_server_ports(const ::std::string& value) {
  
  server_ports_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.SetBasicConfigReq.server_ports)
}
#if LANG_CXX11
inline void SetBasicConfigReq::set_server_ports(::std::string&& value) {
  
  server_ports_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.SetBasicConfigReq.server_ports)
}
#endif
inline void SetBasicConfigReq::set_server_ports(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_ports_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.SetBasicConfigReq.server_ports)
}
inline void SetBasicConfigReq::set_server_ports(const char* value, size_t size) {
  
  server_ports_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.SetBasicConfigReq.server_ports)
}
inline ::std::string* SetBasicConfigReq::mutable_server_ports() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.SetBasicConfigReq.server_ports)
  return server_ports_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetBasicConfigReq::release_server_ports() {
  // @@protoc_insertion_point(field_release:raltservice.SetBasicConfigReq.server_ports)
  
  return server_ports_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetBasicConfigReq::set_allocated_server_ports(::std::string* server_ports) {
  if (server_ports != NULL) {
    
  } else {
    
  }
  server_ports_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_ports);
  // @@protoc_insertion_point(field_set_allocated:raltservice.SetBasicConfigReq.server_ports)
}

// uint32 storage_cache_size = 5;
inline void SetBasicConfigReq::clear_storage_cache_size() {
  storage_cache_size_ = 0u;
}
inline ::google::protobuf::uint32 SetBasicConfigReq::storage_cache_size() const {
  // @@protoc_insertion_point(field_get:raltservice.SetBasicConfigReq.storage_cache_size)
  return storage_cache_size_;
}
inline void SetBasicConfigReq::set_storage_cache_size(::google::protobuf::uint32 value) {
  
  storage_cache_size_ = value;
  // @@protoc_insertion_point(field_set:raltservice.SetBasicConfigReq.storage_cache_size)
}

// -------------------------------------------------------------------

// SetBasicConfigRsp

// uint32 result = 1;
inline void SetBasicConfigRsp::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 SetBasicConfigRsp::result() const {
  // @@protoc_insertion_point(field_get:raltservice.SetBasicConfigRsp.result)
  return result_;
}
inline void SetBasicConfigRsp::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:raltservice.SetBasicConfigRsp.result)
}

// -------------------------------------------------------------------

// Domain

// .raltservice.DomainType type = 1;
inline void Domain::clear_type() {
  type_ = 0;
}
inline ::raltservice::DomainType Domain::type() const {
  // @@protoc_insertion_point(field_get:raltservice.Domain.type)
  return static_cast< ::raltservice::DomainType >(type_);
}
inline void Domain::set_type(::raltservice::DomainType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:raltservice.Domain.type)
}

// string domain_str = 2;
inline void Domain::clear_domain_str() {
  domain_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Domain::domain_str() const {
  // @@protoc_insertion_point(field_get:raltservice.Domain.domain_str)
  return domain_str_.GetNoArena();
}
inline void Domain::set_domain_str(const ::std::string& value) {
  
  domain_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.Domain.domain_str)
}
#if LANG_CXX11
inline void Domain::set_domain_str(::std::string&& value) {
  
  domain_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.Domain.domain_str)
}
#endif
inline void Domain::set_domain_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.Domain.domain_str)
}
inline void Domain::set_domain_str(const char* value, size_t size) {
  
  domain_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.Domain.domain_str)
}
inline ::std::string* Domain::mutable_domain_str() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.Domain.domain_str)
  return domain_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Domain::release_domain_str() {
  // @@protoc_insertion_point(field_release:raltservice.Domain.domain_str)
  
  return domain_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Domain::set_allocated_domain_str(::std::string* domain_str) {
  if (domain_str != NULL) {
    
  } else {
    
  }
  domain_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain_str);
  // @@protoc_insertion_point(field_set_allocated:raltservice.Domain.domain_str)
}

// string append_or_replace_str = 3;
inline void Domain::clear_append_or_replace_str() {
  append_or_replace_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Domain::append_or_replace_str() const {
  // @@protoc_insertion_point(field_get:raltservice.Domain.append_or_replace_str)
  return append_or_replace_str_.GetNoArena();
}
inline void Domain::set_append_or_replace_str(const ::std::string& value) {
  
  append_or_replace_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.Domain.append_or_replace_str)
}
#if LANG_CXX11
inline void Domain::set_append_or_replace_str(::std::string&& value) {
  
  append_or_replace_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.Domain.append_or_replace_str)
}
#endif
inline void Domain::set_append_or_replace_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  append_or_replace_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.Domain.append_or_replace_str)
}
inline void Domain::set_append_or_replace_str(const char* value, size_t size) {
  
  append_or_replace_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.Domain.append_or_replace_str)
}
inline ::std::string* Domain::mutable_append_or_replace_str() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.Domain.append_or_replace_str)
  return append_or_replace_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Domain::release_append_or_replace_str() {
  // @@protoc_insertion_point(field_release:raltservice.Domain.append_or_replace_str)
  
  return append_or_replace_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Domain::set_allocated_append_or_replace_str(::std::string* append_or_replace_str) {
  if (append_or_replace_str != NULL) {
    
  } else {
    
  }
  append_or_replace_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), append_or_replace_str);
  // @@protoc_insertion_point(field_set_allocated:raltservice.Domain.append_or_replace_str)
}

// string port = 4;
inline void Domain::clear_port() {
  port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Domain::port() const {
  // @@protoc_insertion_point(field_get:raltservice.Domain.port)
  return port_.GetNoArena();
}
inline void Domain::set_port(const ::std::string& value) {
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.Domain.port)
}
#if LANG_CXX11
inline void Domain::set_port(::std::string&& value) {
  
  port_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.Domain.port)
}
#endif
inline void Domain::set_port(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.Domain.port)
}
inline void Domain::set_port(const char* value, size_t size) {
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.Domain.port)
}
inline ::std::string* Domain::mutable_port() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.Domain.port)
  return port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Domain::release_port() {
  // @@protoc_insertion_point(field_release:raltservice.Domain.port)
  
  return port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Domain::set_allocated_port(::std::string* port) {
  if (port != NULL) {
    
  } else {
    
  }
  port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port);
  // @@protoc_insertion_point(field_set_allocated:raltservice.Domain.port)
}

// -------------------------------------------------------------------

// GetAllDomainReq

// uint32 page_size = 1;
inline void GetAllDomainReq::clear_page_size() {
  page_size_ = 0u;
}
inline ::google::protobuf::uint32 GetAllDomainReq::page_size() const {
  // @@protoc_insertion_point(field_get:raltservice.GetAllDomainReq.page_size)
  return page_size_;
}
inline void GetAllDomainReq::set_page_size(::google::protobuf::uint32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetAllDomainReq.page_size)
}

// uint32 page_number = 2;
inline void GetAllDomainReq::clear_page_number() {
  page_number_ = 0u;
}
inline ::google::protobuf::uint32 GetAllDomainReq::page_number() const {
  // @@protoc_insertion_point(field_get:raltservice.GetAllDomainReq.page_number)
  return page_number_;
}
inline void GetAllDomainReq::set_page_number(::google::protobuf::uint32 value) {
  
  page_number_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetAllDomainReq.page_number)
}

// -------------------------------------------------------------------

// GetAllDomainRsp

// repeated .raltservice.Domain domain = 1;
inline int GetAllDomainRsp::domain_size() const {
  return domain_.size();
}
inline void GetAllDomainRsp::clear_domain() {
  domain_.Clear();
}
inline const ::raltservice::Domain& GetAllDomainRsp::domain(int index) const {
  // @@protoc_insertion_point(field_get:raltservice.GetAllDomainRsp.domain)
  return domain_.Get(index);
}
inline ::raltservice::Domain* GetAllDomainRsp::mutable_domain(int index) {
  // @@protoc_insertion_point(field_mutable:raltservice.GetAllDomainRsp.domain)
  return domain_.Mutable(index);
}
inline ::raltservice::Domain* GetAllDomainRsp::add_domain() {
  // @@protoc_insertion_point(field_add:raltservice.GetAllDomainRsp.domain)
  return domain_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::raltservice::Domain >*
GetAllDomainRsp::mutable_domain() {
  // @@protoc_insertion_point(field_mutable_list:raltservice.GetAllDomainRsp.domain)
  return &domain_;
}
inline const ::google::protobuf::RepeatedPtrField< ::raltservice::Domain >&
GetAllDomainRsp::domain() const {
  // @@protoc_insertion_point(field_list:raltservice.GetAllDomainRsp.domain)
  return domain_;
}

// uint32 domain_total = 2;
inline void GetAllDomainRsp::clear_domain_total() {
  domain_total_ = 0u;
}
inline ::google::protobuf::uint32 GetAllDomainRsp::domain_total() const {
  // @@protoc_insertion_point(field_get:raltservice.GetAllDomainRsp.domain_total)
  return domain_total_;
}
inline void GetAllDomainRsp::set_domain_total(::google::protobuf::uint32 value) {
  
  domain_total_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetAllDomainRsp.domain_total)
}

// -------------------------------------------------------------------

// UpdateDomainRsp

// uint32 result = 1;
inline void UpdateDomainRsp::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 UpdateDomainRsp::result() const {
  // @@protoc_insertion_point(field_get:raltservice.UpdateDomainRsp.result)
  return result_;
}
inline void UpdateDomainRsp::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:raltservice.UpdateDomainRsp.result)
}

// -------------------------------------------------------------------

// GetDomainReq

// string domain_str = 1;
inline void GetDomainReq::clear_domain_str() {
  domain_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetDomainReq::domain_str() const {
  // @@protoc_insertion_point(field_get:raltservice.GetDomainReq.domain_str)
  return domain_str_.GetNoArena();
}
inline void GetDomainReq::set_domain_str(const ::std::string& value) {
  
  domain_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.GetDomainReq.domain_str)
}
#if LANG_CXX11
inline void GetDomainReq::set_domain_str(::std::string&& value) {
  
  domain_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.GetDomainReq.domain_str)
}
#endif
inline void GetDomainReq::set_domain_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.GetDomainReq.domain_str)
}
inline void GetDomainReq::set_domain_str(const char* value, size_t size) {
  
  domain_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.GetDomainReq.domain_str)
}
inline ::std::string* GetDomainReq::mutable_domain_str() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.GetDomainReq.domain_str)
  return domain_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetDomainReq::release_domain_str() {
  // @@protoc_insertion_point(field_release:raltservice.GetDomainReq.domain_str)
  
  return domain_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetDomainReq::set_allocated_domain_str(::std::string* domain_str) {
  if (domain_str != NULL) {
    
  } else {
    
  }
  domain_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain_str);
  // @@protoc_insertion_point(field_set_allocated:raltservice.GetDomainReq.domain_str)
}

// string transformed_domain = 2;
inline void GetDomainReq::clear_transformed_domain() {
  transformed_domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetDomainReq::transformed_domain() const {
  // @@protoc_insertion_point(field_get:raltservice.GetDomainReq.transformed_domain)
  return transformed_domain_.GetNoArena();
}
inline void GetDomainReq::set_transformed_domain(const ::std::string& value) {
  
  transformed_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.GetDomainReq.transformed_domain)
}
#if LANG_CXX11
inline void GetDomainReq::set_transformed_domain(::std::string&& value) {
  
  transformed_domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.GetDomainReq.transformed_domain)
}
#endif
inline void GetDomainReq::set_transformed_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  transformed_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.GetDomainReq.transformed_domain)
}
inline void GetDomainReq::set_transformed_domain(const char* value, size_t size) {
  
  transformed_domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.GetDomainReq.transformed_domain)
}
inline ::std::string* GetDomainReq::mutable_transformed_domain() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.GetDomainReq.transformed_domain)
  return transformed_domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetDomainReq::release_transformed_domain() {
  // @@protoc_insertion_point(field_release:raltservice.GetDomainReq.transformed_domain)
  
  return transformed_domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetDomainReq::set_allocated_transformed_domain(::std::string* transformed_domain) {
  if (transformed_domain != NULL) {
    
  } else {
    
  }
  transformed_domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transformed_domain);
  // @@protoc_insertion_point(field_set_allocated:raltservice.GetDomainReq.transformed_domain)
}

// uint32 page_size = 3;
inline void GetDomainReq::clear_page_size() {
  page_size_ = 0u;
}
inline ::google::protobuf::uint32 GetDomainReq::page_size() const {
  // @@protoc_insertion_point(field_get:raltservice.GetDomainReq.page_size)
  return page_size_;
}
inline void GetDomainReq::set_page_size(::google::protobuf::uint32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetDomainReq.page_size)
}

// uint32 page_number = 4;
inline void GetDomainReq::clear_page_number() {
  page_number_ = 0u;
}
inline ::google::protobuf::uint32 GetDomainReq::page_number() const {
  // @@protoc_insertion_point(field_get:raltservice.GetDomainReq.page_number)
  return page_number_;
}
inline void GetDomainReq::set_page_number(::google::protobuf::uint32 value) {
  
  page_number_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetDomainReq.page_number)
}

// -------------------------------------------------------------------

// GetDomainRsp

// repeated .raltservice.Domain domain = 1;
inline int GetDomainRsp::domain_size() const {
  return domain_.size();
}
inline void GetDomainRsp::clear_domain() {
  domain_.Clear();
}
inline const ::raltservice::Domain& GetDomainRsp::domain(int index) const {
  // @@protoc_insertion_point(field_get:raltservice.GetDomainRsp.domain)
  return domain_.Get(index);
}
inline ::raltservice::Domain* GetDomainRsp::mutable_domain(int index) {
  // @@protoc_insertion_point(field_mutable:raltservice.GetDomainRsp.domain)
  return domain_.Mutable(index);
}
inline ::raltservice::Domain* GetDomainRsp::add_domain() {
  // @@protoc_insertion_point(field_add:raltservice.GetDomainRsp.domain)
  return domain_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::raltservice::Domain >*
GetDomainRsp::mutable_domain() {
  // @@protoc_insertion_point(field_mutable_list:raltservice.GetDomainRsp.domain)
  return &domain_;
}
inline const ::google::protobuf::RepeatedPtrField< ::raltservice::Domain >&
GetDomainRsp::domain() const {
  // @@protoc_insertion_point(field_list:raltservice.GetDomainRsp.domain)
  return domain_;
}

// uint32 domain_total = 2;
inline void GetDomainRsp::clear_domain_total() {
  domain_total_ = 0u;
}
inline ::google::protobuf::uint32 GetDomainRsp::domain_total() const {
  // @@protoc_insertion_point(field_get:raltservice.GetDomainRsp.domain_total)
  return domain_total_;
}
inline void GetDomainRsp::set_domain_total(::google::protobuf::uint32 value) {
  
  domain_total_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetDomainRsp.domain_total)
}

// -------------------------------------------------------------------

// AddDomainRsp

// uint32 result = 1;
inline void AddDomainRsp::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 AddDomainRsp::result() const {
  // @@protoc_insertion_point(field_get:raltservice.AddDomainRsp.result)
  return result_;
}
inline void AddDomainRsp::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:raltservice.AddDomainRsp.result)
}

// -------------------------------------------------------------------

// DeleteDomainReq

// string domain_str = 1;
inline void DeleteDomainReq::clear_domain_str() {
  domain_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteDomainReq::domain_str() const {
  // @@protoc_insertion_point(field_get:raltservice.DeleteDomainReq.domain_str)
  return domain_str_.GetNoArena();
}
inline void DeleteDomainReq::set_domain_str(const ::std::string& value) {
  
  domain_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.DeleteDomainReq.domain_str)
}
#if LANG_CXX11
inline void DeleteDomainReq::set_domain_str(::std::string&& value) {
  
  domain_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.DeleteDomainReq.domain_str)
}
#endif
inline void DeleteDomainReq::set_domain_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.DeleteDomainReq.domain_str)
}
inline void DeleteDomainReq::set_domain_str(const char* value, size_t size) {
  
  domain_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.DeleteDomainReq.domain_str)
}
inline ::std::string* DeleteDomainReq::mutable_domain_str() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.DeleteDomainReq.domain_str)
  return domain_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteDomainReq::release_domain_str() {
  // @@protoc_insertion_point(field_release:raltservice.DeleteDomainReq.domain_str)
  
  return domain_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteDomainReq::set_allocated_domain_str(::std::string* domain_str) {
  if (domain_str != NULL) {
    
  } else {
    
  }
  domain_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain_str);
  // @@protoc_insertion_point(field_set_allocated:raltservice.DeleteDomainReq.domain_str)
}

// -------------------------------------------------------------------

// DeleteDomainRsp

// uint32 result = 1;
inline void DeleteDomainRsp::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 DeleteDomainRsp::result() const {
  // @@protoc_insertion_point(field_get:raltservice.DeleteDomainRsp.result)
  return result_;
}
inline void DeleteDomainRsp::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:raltservice.DeleteDomainRsp.result)
}

// -------------------------------------------------------------------

// GetMiscReq

// uint32 type = 1;
inline void GetMiscReq::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 GetMiscReq::type() const {
  // @@protoc_insertion_point(field_get:raltservice.GetMiscReq.type)
  return type_;
}
inline void GetMiscReq::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetMiscReq.type)
}

// -------------------------------------------------------------------

// GetMiscRsp

// .raltservice.MiscSwitch ralt_filter_type_default = 1;
inline void GetMiscRsp::clear_ralt_filter_type_default() {
  ralt_filter_type_default_ = 0;
}
inline ::raltservice::MiscSwitch GetMiscRsp::ralt_filter_type_default() const {
  // @@protoc_insertion_point(field_get:raltservice.GetMiscRsp.ralt_filter_type_default)
  return static_cast< ::raltservice::MiscSwitch >(ralt_filter_type_default_);
}
inline void GetMiscRsp::set_ralt_filter_type_default(::raltservice::MiscSwitch value) {
  
  ralt_filter_type_default_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetMiscRsp.ralt_filter_type_default)
}

// -------------------------------------------------------------------

// Misc

// .raltservice.MiscKey key = 1;
inline void Misc::clear_key() {
  key_ = 0;
}
inline ::raltservice::MiscKey Misc::key() const {
  // @@protoc_insertion_point(field_get:raltservice.Misc.key)
  return static_cast< ::raltservice::MiscKey >(key_);
}
inline void Misc::set_key(::raltservice::MiscKey value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:raltservice.Misc.key)
}

// .raltservice.MiscSwitch value = 2;
inline void Misc::clear_value() {
  value_ = 0;
}
inline ::raltservice::MiscSwitch Misc::value() const {
  // @@protoc_insertion_point(field_get:raltservice.Misc.value)
  return static_cast< ::raltservice::MiscSwitch >(value_);
}
inline void Misc::set_value(::raltservice::MiscSwitch value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:raltservice.Misc.value)
}

// -------------------------------------------------------------------

// ModMiscOpRsp

// uint32 result = 1;
inline void ModMiscOpRsp::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 ModMiscOpRsp::result() const {
  // @@protoc_insertion_point(field_get:raltservice.ModMiscOpRsp.result)
  return result_;
}
inline void ModMiscOpRsp::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:raltservice.ModMiscOpRsp.result)
}

// -------------------------------------------------------------------

// RaltStatusReq

// string ip_addr = 1;
inline void RaltStatusReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RaltStatusReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:raltservice.RaltStatusReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void RaltStatusReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.RaltStatusReq.ip_addr)
}
#if LANG_CXX11
inline void RaltStatusReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.RaltStatusReq.ip_addr)
}
#endif
inline void RaltStatusReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.RaltStatusReq.ip_addr)
}
inline void RaltStatusReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.RaltStatusReq.ip_addr)
}
inline ::std::string* RaltStatusReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.RaltStatusReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RaltStatusReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:raltservice.RaltStatusReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RaltStatusReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:raltservice.RaltStatusReq.ip_addr)
}

// -------------------------------------------------------------------

// RaltStatus

// string ip_addr = 1;
inline void RaltStatus::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RaltStatus::ip_addr() const {
  // @@protoc_insertion_point(field_get:raltservice.RaltStatus.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void RaltStatus::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.RaltStatus.ip_addr)
}
#if LANG_CXX11
inline void RaltStatus::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.RaltStatus.ip_addr)
}
#endif
inline void RaltStatus::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.RaltStatus.ip_addr)
}
inline void RaltStatus::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.RaltStatus.ip_addr)
}
inline ::std::string* RaltStatus::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.RaltStatus.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RaltStatus::release_ip_addr() {
  // @@protoc_insertion_point(field_release:raltservice.RaltStatus.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RaltStatus::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:raltservice.RaltStatus.ip_addr)
}

// uint32 status = 2;
inline void RaltStatus::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 RaltStatus::status() const {
  // @@protoc_insertion_point(field_get:raltservice.RaltStatus.status)
  return status_;
}
inline void RaltStatus::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:raltservice.RaltStatus.status)
}

// -------------------------------------------------------------------

// ExecCmdReq

// string ip_addr = 1;
inline void ExecCmdReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecCmdReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:raltservice.ExecCmdReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void ExecCmdReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.ExecCmdReq.ip_addr)
}
#if LANG_CXX11
inline void ExecCmdReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.ExecCmdReq.ip_addr)
}
#endif
inline void ExecCmdReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.ExecCmdReq.ip_addr)
}
inline void ExecCmdReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.ExecCmdReq.ip_addr)
}
inline ::std::string* ExecCmdReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.ExecCmdReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecCmdReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:raltservice.ExecCmdReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecCmdReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:raltservice.ExecCmdReq.ip_addr)
}

// .raltservice.CommandType cmd = 2;
inline void ExecCmdReq::clear_cmd() {
  cmd_ = 0;
}
inline ::raltservice::CommandType ExecCmdReq::cmd() const {
  // @@protoc_insertion_point(field_get:raltservice.ExecCmdReq.cmd)
  return static_cast< ::raltservice::CommandType >(cmd_);
}
inline void ExecCmdReq::set_cmd(::raltservice::CommandType value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:raltservice.ExecCmdReq.cmd)
}

// -------------------------------------------------------------------

// ExecCmdRsp

// uint32 result = 1;
inline void ExecCmdRsp::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 ExecCmdRsp::result() const {
  // @@protoc_insertion_point(field_get:raltservice.ExecCmdRsp.result)
  return result_;
}
inline void ExecCmdRsp::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:raltservice.ExecCmdRsp.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raltservice

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::raltservice::DomainType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raltservice::DomainType>() {
  return ::raltservice::DomainType_descriptor();
}
template <> struct is_proto_enum< ::raltservice::MiscKey> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raltservice::MiscKey>() {
  return ::raltservice::MiscKey_descriptor();
}
template <> struct is_proto_enum< ::raltservice::MiscSwitch> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raltservice::MiscSwitch>() {
  return ::raltservice::MiscSwitch_descriptor();
}
template <> struct is_proto_enum< ::raltservice::CommandType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raltservice::CommandType>() {
  return ::raltservice::CommandType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ralt_2dservice_2eproto__INCLUDED
