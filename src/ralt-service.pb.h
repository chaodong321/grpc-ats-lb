// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ralt-service.proto

#ifndef PROTOBUF_INCLUDED_ralt_2dservice_2eproto
#define PROTOBUF_INCLUDED_ralt_2dservice_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ralt_2dservice_2eproto 

namespace protobuf_ralt_2dservice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[39];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ralt_2dservice_2eproto
namespace raltservice {
class AddDomainRsp;
class AddDomainRspDefaultTypeInternal;
extern AddDomainRspDefaultTypeInternal _AddDomainRsp_default_instance_;
class CacheLookUpReq;
class CacheLookUpReqDefaultTypeInternal;
extern CacheLookUpReqDefaultTypeInternal _CacheLookUpReq_default_instance_;
class CacheResult;
class CacheResultDefaultTypeInternal;
extern CacheResultDefaultTypeInternal _CacheResult_default_instance_;
class DeleteDomainReq;
class DeleteDomainReqDefaultTypeInternal;
extern DeleteDomainReqDefaultTypeInternal _DeleteDomainReq_default_instance_;
class DeleteDomainRsp;
class DeleteDomainRspDefaultTypeInternal;
extern DeleteDomainRspDefaultTypeInternal _DeleteDomainRsp_default_instance_;
class Domain;
class DomainDefaultTypeInternal;
extern DomainDefaultTypeInternal _Domain_default_instance_;
class ExecCmdReq;
class ExecCmdReqDefaultTypeInternal;
extern ExecCmdReqDefaultTypeInternal _ExecCmdReq_default_instance_;
class ExecCmdRsp;
class ExecCmdRspDefaultTypeInternal;
extern ExecCmdRspDefaultTypeInternal _ExecCmdRsp_default_instance_;
class FlowResult;
class FlowResultDefaultTypeInternal;
extern FlowResultDefaultTypeInternal _FlowResult_default_instance_;
class FlowStatLookUpReq;
class FlowStatLookUpReqDefaultTypeInternal;
extern FlowStatLookUpReqDefaultTypeInternal _FlowStatLookUpReq_default_instance_;
class GetAllDomainReq;
class GetAllDomainReqDefaultTypeInternal;
extern GetAllDomainReqDefaultTypeInternal _GetAllDomainReq_default_instance_;
class GetCpuTempReq;
class GetCpuTempReqDefaultTypeInternal;
extern GetCpuTempReqDefaultTypeInternal _GetCpuTempReq_default_instance_;
class GetCpuTempRsp;
class GetCpuTempRspDefaultTypeInternal;
extern GetCpuTempRspDefaultTypeInternal _GetCpuTempRsp_default_instance_;
class GetCpuUsageReq;
class GetCpuUsageReqDefaultTypeInternal;
extern GetCpuUsageReqDefaultTypeInternal _GetCpuUsageReq_default_instance_;
class GetCpuUsageRsp;
class GetCpuUsageRspDefaultTypeInternal;
extern GetCpuUsageRspDefaultTypeInternal _GetCpuUsageRsp_default_instance_;
class GetDomainReq;
class GetDomainReqDefaultTypeInternal;
extern GetDomainReqDefaultTypeInternal _GetDomainReq_default_instance_;
class GetMemUsageReq;
class GetMemUsageReqDefaultTypeInternal;
extern GetMemUsageReqDefaultTypeInternal _GetMemUsageReq_default_instance_;
class GetMemUsageRsp;
class GetMemUsageRspDefaultTypeInternal;
extern GetMemUsageRspDefaultTypeInternal _GetMemUsageRsp_default_instance_;
class GetMiscReq;
class GetMiscReqDefaultTypeInternal;
extern GetMiscReqDefaultTypeInternal _GetMiscReq_default_instance_;
class GetMiscRsp;
class GetMiscRspDefaultTypeInternal;
extern GetMiscRspDefaultTypeInternal _GetMiscRsp_default_instance_;
class GetNicInfoReq;
class GetNicInfoReqDefaultTypeInternal;
extern GetNicInfoReqDefaultTypeInternal _GetNicInfoReq_default_instance_;
class GetNicInfoRsp;
class GetNicInfoRspDefaultTypeInternal;
extern GetNicInfoRspDefaultTypeInternal _GetNicInfoRsp_default_instance_;
class GetRaltLogsReq;
class GetRaltLogsReqDefaultTypeInternal;
extern GetRaltLogsReqDefaultTypeInternal _GetRaltLogsReq_default_instance_;
class GetRecordCfgReq;
class GetRecordCfgReqDefaultTypeInternal;
extern GetRecordCfgReqDefaultTypeInternal _GetRecordCfgReq_default_instance_;
class GetRecordCfgRsp;
class GetRecordCfgRspDefaultTypeInternal;
extern GetRecordCfgRspDefaultTypeInternal _GetRecordCfgRsp_default_instance_;
class HomePageReq;
class HomePageReqDefaultTypeInternal;
extern HomePageReqDefaultTypeInternal _HomePageReq_default_instance_;
class HomePageRsp;
class HomePageRspDefaultTypeInternal;
extern HomePageRspDefaultTypeInternal _HomePageRsp_default_instance_;
class LogInfoLookUpReq;
class LogInfoLookUpReqDefaultTypeInternal;
extern LogInfoLookUpReqDefaultTypeInternal _LogInfoLookUpReq_default_instance_;
class LogResult;
class LogResultDefaultTypeInternal;
extern LogResultDefaultTypeInternal _LogResult_default_instance_;
class Misc;
class MiscDefaultTypeInternal;
extern MiscDefaultTypeInternal _Misc_default_instance_;
class ModMiscOpRsp;
class ModMiscOpRspDefaultTypeInternal;
extern ModMiscOpRspDefaultTypeInternal _ModMiscOpRsp_default_instance_;
class RaltLogs;
class RaltLogsDefaultTypeInternal;
extern RaltLogsDefaultTypeInternal _RaltLogs_default_instance_;
class RaltStatus;
class RaltStatusDefaultTypeInternal;
extern RaltStatusDefaultTypeInternal _RaltStatus_default_instance_;
class RaltStatusReq;
class RaltStatusReqDefaultTypeInternal;
extern RaltStatusReqDefaultTypeInternal _RaltStatusReq_default_instance_;
class SetRecordCfgReq;
class SetRecordCfgReqDefaultTypeInternal;
extern SetRecordCfgReqDefaultTypeInternal _SetRecordCfgReq_default_instance_;
class SetRecordCfgRsp;
class SetRecordCfgRspDefaultTypeInternal;
extern SetRecordCfgRspDefaultTypeInternal _SetRecordCfgRsp_default_instance_;
class StatsFieldName;
class StatsFieldNameDefaultTypeInternal;
extern StatsFieldNameDefaultTypeInternal _StatsFieldName_default_instance_;
class StatsFieldValue;
class StatsFieldValueDefaultTypeInternal;
extern StatsFieldValueDefaultTypeInternal _StatsFieldValue_default_instance_;
class UpdateDomainRsp;
class UpdateDomainRspDefaultTypeInternal;
extern UpdateDomainRspDefaultTypeInternal _UpdateDomainRsp_default_instance_;
}  // namespace raltservice
namespace google {
namespace protobuf {
template<> ::raltservice::AddDomainRsp* Arena::CreateMaybeMessage<::raltservice::AddDomainRsp>(Arena*);
template<> ::raltservice::CacheLookUpReq* Arena::CreateMaybeMessage<::raltservice::CacheLookUpReq>(Arena*);
template<> ::raltservice::CacheResult* Arena::CreateMaybeMessage<::raltservice::CacheResult>(Arena*);
template<> ::raltservice::DeleteDomainReq* Arena::CreateMaybeMessage<::raltservice::DeleteDomainReq>(Arena*);
template<> ::raltservice::DeleteDomainRsp* Arena::CreateMaybeMessage<::raltservice::DeleteDomainRsp>(Arena*);
template<> ::raltservice::Domain* Arena::CreateMaybeMessage<::raltservice::Domain>(Arena*);
template<> ::raltservice::ExecCmdReq* Arena::CreateMaybeMessage<::raltservice::ExecCmdReq>(Arena*);
template<> ::raltservice::ExecCmdRsp* Arena::CreateMaybeMessage<::raltservice::ExecCmdRsp>(Arena*);
template<> ::raltservice::FlowResult* Arena::CreateMaybeMessage<::raltservice::FlowResult>(Arena*);
template<> ::raltservice::FlowStatLookUpReq* Arena::CreateMaybeMessage<::raltservice::FlowStatLookUpReq>(Arena*);
template<> ::raltservice::GetAllDomainReq* Arena::CreateMaybeMessage<::raltservice::GetAllDomainReq>(Arena*);
template<> ::raltservice::GetCpuTempReq* Arena::CreateMaybeMessage<::raltservice::GetCpuTempReq>(Arena*);
template<> ::raltservice::GetCpuTempRsp* Arena::CreateMaybeMessage<::raltservice::GetCpuTempRsp>(Arena*);
template<> ::raltservice::GetCpuUsageReq* Arena::CreateMaybeMessage<::raltservice::GetCpuUsageReq>(Arena*);
template<> ::raltservice::GetCpuUsageRsp* Arena::CreateMaybeMessage<::raltservice::GetCpuUsageRsp>(Arena*);
template<> ::raltservice::GetDomainReq* Arena::CreateMaybeMessage<::raltservice::GetDomainReq>(Arena*);
template<> ::raltservice::GetMemUsageReq* Arena::CreateMaybeMessage<::raltservice::GetMemUsageReq>(Arena*);
template<> ::raltservice::GetMemUsageRsp* Arena::CreateMaybeMessage<::raltservice::GetMemUsageRsp>(Arena*);
template<> ::raltservice::GetMiscReq* Arena::CreateMaybeMessage<::raltservice::GetMiscReq>(Arena*);
template<> ::raltservice::GetMiscRsp* Arena::CreateMaybeMessage<::raltservice::GetMiscRsp>(Arena*);
template<> ::raltservice::GetNicInfoReq* Arena::CreateMaybeMessage<::raltservice::GetNicInfoReq>(Arena*);
template<> ::raltservice::GetNicInfoRsp* Arena::CreateMaybeMessage<::raltservice::GetNicInfoRsp>(Arena*);
template<> ::raltservice::GetRaltLogsReq* Arena::CreateMaybeMessage<::raltservice::GetRaltLogsReq>(Arena*);
template<> ::raltservice::GetRecordCfgReq* Arena::CreateMaybeMessage<::raltservice::GetRecordCfgReq>(Arena*);
template<> ::raltservice::GetRecordCfgRsp* Arena::CreateMaybeMessage<::raltservice::GetRecordCfgRsp>(Arena*);
template<> ::raltservice::HomePageReq* Arena::CreateMaybeMessage<::raltservice::HomePageReq>(Arena*);
template<> ::raltservice::HomePageRsp* Arena::CreateMaybeMessage<::raltservice::HomePageRsp>(Arena*);
template<> ::raltservice::LogInfoLookUpReq* Arena::CreateMaybeMessage<::raltservice::LogInfoLookUpReq>(Arena*);
template<> ::raltservice::LogResult* Arena::CreateMaybeMessage<::raltservice::LogResult>(Arena*);
template<> ::raltservice::Misc* Arena::CreateMaybeMessage<::raltservice::Misc>(Arena*);
template<> ::raltservice::ModMiscOpRsp* Arena::CreateMaybeMessage<::raltservice::ModMiscOpRsp>(Arena*);
template<> ::raltservice::RaltLogs* Arena::CreateMaybeMessage<::raltservice::RaltLogs>(Arena*);
template<> ::raltservice::RaltStatus* Arena::CreateMaybeMessage<::raltservice::RaltStatus>(Arena*);
template<> ::raltservice::RaltStatusReq* Arena::CreateMaybeMessage<::raltservice::RaltStatusReq>(Arena*);
template<> ::raltservice::SetRecordCfgReq* Arena::CreateMaybeMessage<::raltservice::SetRecordCfgReq>(Arena*);
template<> ::raltservice::SetRecordCfgRsp* Arena::CreateMaybeMessage<::raltservice::SetRecordCfgRsp>(Arena*);
template<> ::raltservice::StatsFieldName* Arena::CreateMaybeMessage<::raltservice::StatsFieldName>(Arena*);
template<> ::raltservice::StatsFieldValue* Arena::CreateMaybeMessage<::raltservice::StatsFieldValue>(Arena*);
template<> ::raltservice::UpdateDomainRsp* Arena::CreateMaybeMessage<::raltservice::UpdateDomainRsp>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace raltservice {

enum RecordCfgType {
  enum_logging_enabled = 0,
  enum_max_space_mb_for_logs = 1,
  enum_rolling_enabled = 2,
  enum_server_ports = 3,
  RecordCfgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RecordCfgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RecordCfgType_IsValid(int value);
const RecordCfgType RecordCfgType_MIN = enum_logging_enabled;
const RecordCfgType RecordCfgType_MAX = enum_server_ports;
const int RecordCfgType_ARRAYSIZE = RecordCfgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RecordCfgType_descriptor();
inline const ::std::string& RecordCfgType_Name(RecordCfgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RecordCfgType_descriptor(), value);
}
inline bool RecordCfgType_Parse(
    const ::std::string& name, RecordCfgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecordCfgType>(
    RecordCfgType_descriptor(), name, value);
}
enum DomainType {
  enum_member_domain = 0,
  enum_subs_domain = 1,
  DomainType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DomainType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DomainType_IsValid(int value);
const DomainType DomainType_MIN = enum_member_domain;
const DomainType DomainType_MAX = enum_subs_domain;
const int DomainType_ARRAYSIZE = DomainType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DomainType_descriptor();
inline const ::std::string& DomainType_Name(DomainType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DomainType_descriptor(), value);
}
inline bool DomainType_Parse(
    const ::std::string& name, DomainType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DomainType>(
    DomainType_descriptor(), name, value);
}
enum MiscKey {
  enum_ralt_filter_type_default = 0,
  MiscKey_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MiscKey_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MiscKey_IsValid(int value);
const MiscKey MiscKey_MIN = enum_ralt_filter_type_default;
const MiscKey MiscKey_MAX = enum_ralt_filter_type_default;
const int MiscKey_ARRAYSIZE = MiscKey_MAX + 1;

const ::google::protobuf::EnumDescriptor* MiscKey_descriptor();
inline const ::std::string& MiscKey_Name(MiscKey value) {
  return ::google::protobuf::internal::NameOfEnum(
    MiscKey_descriptor(), value);
}
inline bool MiscKey_Parse(
    const ::std::string& name, MiscKey* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MiscKey>(
    MiscKey_descriptor(), name, value);
}
enum MiscSwitch {
  switch_off = 0,
  switch_on = 1,
  MiscSwitch_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MiscSwitch_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MiscSwitch_IsValid(int value);
const MiscSwitch MiscSwitch_MIN = switch_off;
const MiscSwitch MiscSwitch_MAX = switch_on;
const int MiscSwitch_ARRAYSIZE = MiscSwitch_MAX + 1;

const ::google::protobuf::EnumDescriptor* MiscSwitch_descriptor();
inline const ::std::string& MiscSwitch_Name(MiscSwitch value) {
  return ::google::protobuf::internal::NameOfEnum(
    MiscSwitch_descriptor(), value);
}
inline bool MiscSwitch_Parse(
    const ::std::string& name, MiscSwitch* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MiscSwitch>(
    MiscSwitch_descriptor(), name, value);
}
enum CommandType {
  ralt_start = 0,
  ralt_stop = 1,
  ralt_restart = 2,
  cache_clear = 3,
  reload_config = 4,
  CommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommandType_IsValid(int value);
const CommandType CommandType_MIN = ralt_start;
const CommandType CommandType_MAX = reload_config;
const int CommandType_ARRAYSIZE = CommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommandType_descriptor();
inline const ::std::string& CommandType_Name(CommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommandType_descriptor(), value);
}
inline bool CommandType_Parse(
    const ::std::string& name, CommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommandType>(
    CommandType_descriptor(), name, value);
}
// ===================================================================

class GetCpuUsageReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.GetCpuUsageReq) */ {
 public:
  GetCpuUsageReq();
  virtual ~GetCpuUsageReq();

  GetCpuUsageReq(const GetCpuUsageReq& from);

  inline GetCpuUsageReq& operator=(const GetCpuUsageReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCpuUsageReq(GetCpuUsageReq&& from) noexcept
    : GetCpuUsageReq() {
    *this = ::std::move(from);
  }

  inline GetCpuUsageReq& operator=(GetCpuUsageReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCpuUsageReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCpuUsageReq* internal_default_instance() {
    return reinterpret_cast<const GetCpuUsageReq*>(
               &_GetCpuUsageReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetCpuUsageReq* other);
  friend void swap(GetCpuUsageReq& a, GetCpuUsageReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCpuUsageReq* New() const final {
    return CreateMaybeMessage<GetCpuUsageReq>(NULL);
  }

  GetCpuUsageReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetCpuUsageReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetCpuUsageReq& from);
  void MergeFrom(const GetCpuUsageReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCpuUsageReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // @@protoc_insertion_point(class_scope:raltservice.GetCpuUsageReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetCpuUsageRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.GetCpuUsageRsp) */ {
 public:
  GetCpuUsageRsp();
  virtual ~GetCpuUsageRsp();

  GetCpuUsageRsp(const GetCpuUsageRsp& from);

  inline GetCpuUsageRsp& operator=(const GetCpuUsageRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCpuUsageRsp(GetCpuUsageRsp&& from) noexcept
    : GetCpuUsageRsp() {
    *this = ::std::move(from);
  }

  inline GetCpuUsageRsp& operator=(GetCpuUsageRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCpuUsageRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCpuUsageRsp* internal_default_instance() {
    return reinterpret_cast<const GetCpuUsageRsp*>(
               &_GetCpuUsageRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetCpuUsageRsp* other);
  friend void swap(GetCpuUsageRsp& a, GetCpuUsageRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCpuUsageRsp* New() const final {
    return CreateMaybeMessage<GetCpuUsageRsp>(NULL);
  }

  GetCpuUsageRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetCpuUsageRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetCpuUsageRsp& from);
  void MergeFrom(const GetCpuUsageRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCpuUsageRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cpu_usage = 1;
  void clear_cpu_usage();
  static const int kCpuUsageFieldNumber = 1;
  const ::std::string& cpu_usage() const;
  void set_cpu_usage(const ::std::string& value);
  #if LANG_CXX11
  void set_cpu_usage(::std::string&& value);
  #endif
  void set_cpu_usage(const char* value);
  void set_cpu_usage(const char* value, size_t size);
  ::std::string* mutable_cpu_usage();
  ::std::string* release_cpu_usage();
  void set_allocated_cpu_usage(::std::string* cpu_usage);

  // @@protoc_insertion_point(class_scope:raltservice.GetCpuUsageRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cpu_usage_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetCpuTempReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.GetCpuTempReq) */ {
 public:
  GetCpuTempReq();
  virtual ~GetCpuTempReq();

  GetCpuTempReq(const GetCpuTempReq& from);

  inline GetCpuTempReq& operator=(const GetCpuTempReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCpuTempReq(GetCpuTempReq&& from) noexcept
    : GetCpuTempReq() {
    *this = ::std::move(from);
  }

  inline GetCpuTempReq& operator=(GetCpuTempReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCpuTempReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCpuTempReq* internal_default_instance() {
    return reinterpret_cast<const GetCpuTempReq*>(
               &_GetCpuTempReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GetCpuTempReq* other);
  friend void swap(GetCpuTempReq& a, GetCpuTempReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCpuTempReq* New() const final {
    return CreateMaybeMessage<GetCpuTempReq>(NULL);
  }

  GetCpuTempReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetCpuTempReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetCpuTempReq& from);
  void MergeFrom(const GetCpuTempReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCpuTempReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // @@protoc_insertion_point(class_scope:raltservice.GetCpuTempReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetCpuTempRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.GetCpuTempRsp) */ {
 public:
  GetCpuTempRsp();
  virtual ~GetCpuTempRsp();

  GetCpuTempRsp(const GetCpuTempRsp& from);

  inline GetCpuTempRsp& operator=(const GetCpuTempRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCpuTempRsp(GetCpuTempRsp&& from) noexcept
    : GetCpuTempRsp() {
    *this = ::std::move(from);
  }

  inline GetCpuTempRsp& operator=(GetCpuTempRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCpuTempRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCpuTempRsp* internal_default_instance() {
    return reinterpret_cast<const GetCpuTempRsp*>(
               &_GetCpuTempRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GetCpuTempRsp* other);
  friend void swap(GetCpuTempRsp& a, GetCpuTempRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCpuTempRsp* New() const final {
    return CreateMaybeMessage<GetCpuTempRsp>(NULL);
  }

  GetCpuTempRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetCpuTempRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetCpuTempRsp& from);
  void MergeFrom(const GetCpuTempRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCpuTempRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cpu_temp = 1;
  void clear_cpu_temp();
  static const int kCpuTempFieldNumber = 1;
  const ::std::string& cpu_temp() const;
  void set_cpu_temp(const ::std::string& value);
  #if LANG_CXX11
  void set_cpu_temp(::std::string&& value);
  #endif
  void set_cpu_temp(const char* value);
  void set_cpu_temp(const char* value, size_t size);
  ::std::string* mutable_cpu_temp();
  ::std::string* release_cpu_temp();
  void set_allocated_cpu_temp(::std::string* cpu_temp);

  // @@protoc_insertion_point(class_scope:raltservice.GetCpuTempRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cpu_temp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetMemUsageReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.GetMemUsageReq) */ {
 public:
  GetMemUsageReq();
  virtual ~GetMemUsageReq();

  GetMemUsageReq(const GetMemUsageReq& from);

  inline GetMemUsageReq& operator=(const GetMemUsageReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMemUsageReq(GetMemUsageReq&& from) noexcept
    : GetMemUsageReq() {
    *this = ::std::move(from);
  }

  inline GetMemUsageReq& operator=(GetMemUsageReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMemUsageReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMemUsageReq* internal_default_instance() {
    return reinterpret_cast<const GetMemUsageReq*>(
               &_GetMemUsageReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GetMemUsageReq* other);
  friend void swap(GetMemUsageReq& a, GetMemUsageReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMemUsageReq* New() const final {
    return CreateMaybeMessage<GetMemUsageReq>(NULL);
  }

  GetMemUsageReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetMemUsageReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetMemUsageReq& from);
  void MergeFrom(const GetMemUsageReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMemUsageReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // @@protoc_insertion_point(class_scope:raltservice.GetMemUsageReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetMemUsageRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.GetMemUsageRsp) */ {
 public:
  GetMemUsageRsp();
  virtual ~GetMemUsageRsp();

  GetMemUsageRsp(const GetMemUsageRsp& from);

  inline GetMemUsageRsp& operator=(const GetMemUsageRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMemUsageRsp(GetMemUsageRsp&& from) noexcept
    : GetMemUsageRsp() {
    *this = ::std::move(from);
  }

  inline GetMemUsageRsp& operator=(GetMemUsageRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMemUsageRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMemUsageRsp* internal_default_instance() {
    return reinterpret_cast<const GetMemUsageRsp*>(
               &_GetMemUsageRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GetMemUsageRsp* other);
  friend void swap(GetMemUsageRsp& a, GetMemUsageRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMemUsageRsp* New() const final {
    return CreateMaybeMessage<GetMemUsageRsp>(NULL);
  }

  GetMemUsageRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetMemUsageRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetMemUsageRsp& from);
  void MergeFrom(const GetMemUsageRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMemUsageRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string mem_usage = 1;
  void clear_mem_usage();
  static const int kMemUsageFieldNumber = 1;
  const ::std::string& mem_usage() const;
  void set_mem_usage(const ::std::string& value);
  #if LANG_CXX11
  void set_mem_usage(::std::string&& value);
  #endif
  void set_mem_usage(const char* value);
  void set_mem_usage(const char* value, size_t size);
  ::std::string* mutable_mem_usage();
  ::std::string* release_mem_usage();
  void set_allocated_mem_usage(::std::string* mem_usage);

  // @@protoc_insertion_point(class_scope:raltservice.GetMemUsageRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mem_usage_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetNicInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.GetNicInfoReq) */ {
 public:
  GetNicInfoReq();
  virtual ~GetNicInfoReq();

  GetNicInfoReq(const GetNicInfoReq& from);

  inline GetNicInfoReq& operator=(const GetNicInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetNicInfoReq(GetNicInfoReq&& from) noexcept
    : GetNicInfoReq() {
    *this = ::std::move(from);
  }

  inline GetNicInfoReq& operator=(GetNicInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNicInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNicInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetNicInfoReq*>(
               &_GetNicInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GetNicInfoReq* other);
  friend void swap(GetNicInfoReq& a, GetNicInfoReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetNicInfoReq* New() const final {
    return CreateMaybeMessage<GetNicInfoReq>(NULL);
  }

  GetNicInfoReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetNicInfoReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetNicInfoReq& from);
  void MergeFrom(const GetNicInfoReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNicInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // @@protoc_insertion_point(class_scope:raltservice.GetNicInfoReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetNicInfoRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.GetNicInfoRsp) */ {
 public:
  GetNicInfoRsp();
  virtual ~GetNicInfoRsp();

  GetNicInfoRsp(const GetNicInfoRsp& from);

  inline GetNicInfoRsp& operator=(const GetNicInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetNicInfoRsp(GetNicInfoRsp&& from) noexcept
    : GetNicInfoRsp() {
    *this = ::std::move(from);
  }

  inline GetNicInfoRsp& operator=(GetNicInfoRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNicInfoRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNicInfoRsp* internal_default_instance() {
    return reinterpret_cast<const GetNicInfoRsp*>(
               &_GetNicInfoRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GetNicInfoRsp* other);
  friend void swap(GetNicInfoRsp& a, GetNicInfoRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetNicInfoRsp* New() const final {
    return CreateMaybeMessage<GetNicInfoRsp>(NULL);
  }

  GetNicInfoRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetNicInfoRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetNicInfoRsp& from);
  void MergeFrom(const GetNicInfoRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNicInfoRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string os_version = 1;
  void clear_os_version();
  static const int kOsVersionFieldNumber = 1;
  const ::std::string& os_version() const;
  void set_os_version(const ::std::string& value);
  #if LANG_CXX11
  void set_os_version(::std::string&& value);
  #endif
  void set_os_version(const char* value);
  void set_os_version(const char* value, size_t size);
  ::std::string* mutable_os_version();
  ::std::string* release_os_version();
  void set_allocated_os_version(::std::string* os_version);

  // string nic_info = 2;
  void clear_nic_info();
  static const int kNicInfoFieldNumber = 2;
  const ::std::string& nic_info() const;
  void set_nic_info(const ::std::string& value);
  #if LANG_CXX11
  void set_nic_info(::std::string&& value);
  #endif
  void set_nic_info(const char* value);
  void set_nic_info(const char* value, size_t size);
  ::std::string* mutable_nic_info();
  ::std::string* release_nic_info();
  void set_allocated_nic_info(::std::string* nic_info);

  // @@protoc_insertion_point(class_scope:raltservice.GetNicInfoRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr os_version_;
  ::google::protobuf::internal::ArenaStringPtr nic_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StatsFieldName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.StatsFieldName) */ {
 public:
  StatsFieldName();
  virtual ~StatsFieldName();

  StatsFieldName(const StatsFieldName& from);

  inline StatsFieldName& operator=(const StatsFieldName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatsFieldName(StatsFieldName&& from) noexcept
    : StatsFieldName() {
    *this = ::std::move(from);
  }

  inline StatsFieldName& operator=(StatsFieldName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatsFieldName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatsFieldName* internal_default_instance() {
    return reinterpret_cast<const StatsFieldName*>(
               &_StatsFieldName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(StatsFieldName* other);
  friend void swap(StatsFieldName& a, StatsFieldName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatsFieldName* New() const final {
    return CreateMaybeMessage<StatsFieldName>(NULL);
  }

  StatsFieldName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StatsFieldName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StatsFieldName& from);
  void MergeFrom(const StatsFieldName& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatsFieldName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // string field_name = 2;
  void clear_field_name();
  static const int kFieldNameFieldNumber = 2;
  const ::std::string& field_name() const;
  void set_field_name(const ::std::string& value);
  #if LANG_CXX11
  void set_field_name(::std::string&& value);
  #endif
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  ::std::string* mutable_field_name();
  ::std::string* release_field_name();
  void set_allocated_field_name(::std::string* field_name);

  // @@protoc_insertion_point(class_scope:raltservice.StatsFieldName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  ::google::protobuf::internal::ArenaStringPtr field_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StatsFieldValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.StatsFieldValue) */ {
 public:
  StatsFieldValue();
  virtual ~StatsFieldValue();

  StatsFieldValue(const StatsFieldValue& from);

  inline StatsFieldValue& operator=(const StatsFieldValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatsFieldValue(StatsFieldValue&& from) noexcept
    : StatsFieldValue() {
    *this = ::std::move(from);
  }

  inline StatsFieldValue& operator=(StatsFieldValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatsFieldValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatsFieldValue* internal_default_instance() {
    return reinterpret_cast<const StatsFieldValue*>(
               &_StatsFieldValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(StatsFieldValue* other);
  friend void swap(StatsFieldValue& a, StatsFieldValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatsFieldValue* New() const final {
    return CreateMaybeMessage<StatsFieldValue>(NULL);
  }

  StatsFieldValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StatsFieldValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StatsFieldValue& from);
  void MergeFrom(const StatsFieldValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatsFieldValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:raltservice.StatsFieldValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HomePageReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.HomePageReq) */ {
 public:
  HomePageReq();
  virtual ~HomePageReq();

  HomePageReq(const HomePageReq& from);

  inline HomePageReq& operator=(const HomePageReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HomePageReq(HomePageReq&& from) noexcept
    : HomePageReq() {
    *this = ::std::move(from);
  }

  inline HomePageReq& operator=(HomePageReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HomePageReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HomePageReq* internal_default_instance() {
    return reinterpret_cast<const HomePageReq*>(
               &_HomePageReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(HomePageReq* other);
  friend void swap(HomePageReq& a, HomePageReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HomePageReq* New() const final {
    return CreateMaybeMessage<HomePageReq>(NULL);
  }

  HomePageReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HomePageReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HomePageReq& from);
  void MergeFrom(const HomePageReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HomePageReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.HomePageReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HomePageRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.HomePageRsp) */ {
 public:
  HomePageRsp();
  virtual ~HomePageRsp();

  HomePageRsp(const HomePageRsp& from);

  inline HomePageRsp& operator=(const HomePageRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HomePageRsp(HomePageRsp&& from) noexcept
    : HomePageRsp() {
    *this = ::std::move(from);
  }

  inline HomePageRsp& operator=(HomePageRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HomePageRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HomePageRsp* internal_default_instance() {
    return reinterpret_cast<const HomePageRsp*>(
               &_HomePageRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(HomePageRsp* other);
  friend void swap(HomePageRsp& a, HomePageRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HomePageRsp* New() const final {
    return CreateMaybeMessage<HomePageRsp>(NULL);
  }

  HomePageRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HomePageRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HomePageRsp& from);
  void MergeFrom(const HomePageRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HomePageRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 domain_num = 1;
  void clear_domain_num();
  static const int kDomainNumFieldNumber = 1;
  ::google::protobuf::uint32 domain_num() const;
  void set_domain_num(::google::protobuf::uint32 value);

  // uint32 cluster_device = 2;
  void clear_cluster_device();
  static const int kClusterDeviceFieldNumber = 2;
  ::google::protobuf::uint32 cluster_device() const;
  void set_cluster_device(::google::protobuf::uint32 value);

  // uint64 app_transfor_bytes = 3;
  void clear_app_transfor_bytes();
  static const int kAppTransforBytesFieldNumber = 3;
  ::google::protobuf::uint64 app_transfor_bytes() const;
  void set_app_transfor_bytes(::google::protobuf::uint64 value);

  // uint32 app_transfor_connections = 4;
  void clear_app_transfor_connections();
  static const int kAppTransforConnectionsFieldNumber = 4;
  ::google::protobuf::uint32 app_transfor_connections() const;
  void set_app_transfor_connections(::google::protobuf::uint32 value);

  // uint32 cache_total_hits = 5;
  void clear_cache_total_hits();
  static const int kCacheTotalHitsFieldNumber = 5;
  ::google::protobuf::uint32 cache_total_hits() const;
  void set_cache_total_hits(::google::protobuf::uint32 value);

  // uint64 cache_bytes_total = 6;
  void clear_cache_bytes_total();
  static const int kCacheBytesTotalFieldNumber = 6;
  ::google::protobuf::uint64 cache_bytes_total() const;
  void set_cache_bytes_total(::google::protobuf::uint64 value);

  // uint64 cache_bytes_used = 7;
  void clear_cache_bytes_used();
  static const int kCacheBytesUsedFieldNumber = 7;
  ::google::protobuf::uint64 cache_bytes_used() const;
  void set_cache_bytes_used(::google::protobuf::uint64 value);

  // uint32 cache_num_docs = 8;
  void clear_cache_num_docs();
  static const int kCacheNumDocsFieldNumber = 8;
  ::google::protobuf::uint32 cache_num_docs() const;
  void set_cache_num_docs(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.HomePageRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 domain_num_;
  ::google::protobuf::uint32 cluster_device_;
  ::google::protobuf::uint64 app_transfor_bytes_;
  ::google::protobuf::uint32 app_transfor_connections_;
  ::google::protobuf::uint32 cache_total_hits_;
  ::google::protobuf::uint64 cache_bytes_total_;
  ::google::protobuf::uint64 cache_bytes_used_;
  ::google::protobuf::uint32 cache_num_docs_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CacheLookUpReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.CacheLookUpReq) */ {
 public:
  CacheLookUpReq();
  virtual ~CacheLookUpReq();

  CacheLookUpReq(const CacheLookUpReq& from);

  inline CacheLookUpReq& operator=(const CacheLookUpReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CacheLookUpReq(CacheLookUpReq&& from) noexcept
    : CacheLookUpReq() {
    *this = ::std::move(from);
  }

  inline CacheLookUpReq& operator=(CacheLookUpReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CacheLookUpReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CacheLookUpReq* internal_default_instance() {
    return reinterpret_cast<const CacheLookUpReq*>(
               &_CacheLookUpReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CacheLookUpReq* other);
  friend void swap(CacheLookUpReq& a, CacheLookUpReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CacheLookUpReq* New() const final {
    return CreateMaybeMessage<CacheLookUpReq>(NULL);
  }

  CacheLookUpReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CacheLookUpReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CacheLookUpReq& from);
  void MergeFrom(const CacheLookUpReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacheLookUpReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // @@protoc_insertion_point(class_scope:raltservice.CacheLookUpReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FlowStatLookUpReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.FlowStatLookUpReq) */ {
 public:
  FlowStatLookUpReq();
  virtual ~FlowStatLookUpReq();

  FlowStatLookUpReq(const FlowStatLookUpReq& from);

  inline FlowStatLookUpReq& operator=(const FlowStatLookUpReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlowStatLookUpReq(FlowStatLookUpReq&& from) noexcept
    : FlowStatLookUpReq() {
    *this = ::std::move(from);
  }

  inline FlowStatLookUpReq& operator=(FlowStatLookUpReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlowStatLookUpReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlowStatLookUpReq* internal_default_instance() {
    return reinterpret_cast<const FlowStatLookUpReq*>(
               &_FlowStatLookUpReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(FlowStatLookUpReq* other);
  friend void swap(FlowStatLookUpReq& a, FlowStatLookUpReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlowStatLookUpReq* New() const final {
    return CreateMaybeMessage<FlowStatLookUpReq>(NULL);
  }

  FlowStatLookUpReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FlowStatLookUpReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FlowStatLookUpReq& from);
  void MergeFrom(const FlowStatLookUpReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowStatLookUpReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // @@protoc_insertion_point(class_scope:raltservice.FlowStatLookUpReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogInfoLookUpReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.LogInfoLookUpReq) */ {
 public:
  LogInfoLookUpReq();
  virtual ~LogInfoLookUpReq();

  LogInfoLookUpReq(const LogInfoLookUpReq& from);

  inline LogInfoLookUpReq& operator=(const LogInfoLookUpReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogInfoLookUpReq(LogInfoLookUpReq&& from) noexcept
    : LogInfoLookUpReq() {
    *this = ::std::move(from);
  }

  inline LogInfoLookUpReq& operator=(LogInfoLookUpReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogInfoLookUpReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogInfoLookUpReq* internal_default_instance() {
    return reinterpret_cast<const LogInfoLookUpReq*>(
               &_LogInfoLookUpReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(LogInfoLookUpReq* other);
  friend void swap(LogInfoLookUpReq& a, LogInfoLookUpReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogInfoLookUpReq* New() const final {
    return CreateMaybeMessage<LogInfoLookUpReq>(NULL);
  }

  LogInfoLookUpReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogInfoLookUpReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogInfoLookUpReq& from);
  void MergeFrom(const LogInfoLookUpReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogInfoLookUpReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // @@protoc_insertion_point(class_scope:raltservice.LogInfoLookUpReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CacheResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.CacheResult) */ {
 public:
  CacheResult();
  virtual ~CacheResult();

  CacheResult(const CacheResult& from);

  inline CacheResult& operator=(const CacheResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CacheResult(CacheResult&& from) noexcept
    : CacheResult() {
    *this = ::std::move(from);
  }

  inline CacheResult& operator=(CacheResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CacheResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CacheResult* internal_default_instance() {
    return reinterpret_cast<const CacheResult*>(
               &_CacheResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(CacheResult* other);
  friend void swap(CacheResult& a, CacheResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CacheResult* New() const final {
    return CreateMaybeMessage<CacheResult>(NULL);
  }

  CacheResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CacheResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CacheResult& from);
  void MergeFrom(const CacheResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacheResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 bytes_total = 2;
  void clear_bytes_total();
  static const int kBytesTotalFieldNumber = 2;
  ::google::protobuf::uint64 bytes_total() const;
  void set_bytes_total(::google::protobuf::uint64 value);

  // uint32 cache_total_hits = 1;
  void clear_cache_total_hits();
  static const int kCacheTotalHitsFieldNumber = 1;
  ::google::protobuf::uint32 cache_total_hits() const;
  void set_cache_total_hits(::google::protobuf::uint32 value);

  // uint32 num_docs = 4;
  void clear_num_docs();
  static const int kNumDocsFieldNumber = 4;
  ::google::protobuf::uint32 num_docs() const;
  void set_num_docs(::google::protobuf::uint32 value);

  // uint64 bytes_used = 3;
  void clear_bytes_used();
  static const int kBytesUsedFieldNumber = 3;
  ::google::protobuf::uint64 bytes_used() const;
  void set_bytes_used(::google::protobuf::uint64 value);

  // float cache_hit_ratio = 5;
  void clear_cache_hit_ratio();
  static const int kCacheHitRatioFieldNumber = 5;
  float cache_hit_ratio() const;
  void set_cache_hit_ratio(float value);

  // @@protoc_insertion_point(class_scope:raltservice.CacheResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 bytes_total_;
  ::google::protobuf::uint32 cache_total_hits_;
  ::google::protobuf::uint32 num_docs_;
  ::google::protobuf::uint64 bytes_used_;
  float cache_hit_ratio_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FlowResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.FlowResult) */ {
 public:
  FlowResult();
  virtual ~FlowResult();

  FlowResult(const FlowResult& from);

  inline FlowResult& operator=(const FlowResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlowResult(FlowResult&& from) noexcept
    : FlowResult() {
    *this = ::std::move(from);
  }

  inline FlowResult& operator=(FlowResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlowResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlowResult* internal_default_instance() {
    return reinterpret_cast<const FlowResult*>(
               &_FlowResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(FlowResult* other);
  friend void swap(FlowResult& a, FlowResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlowResult* New() const final {
    return CreateMaybeMessage<FlowResult>(NULL);
  }

  FlowResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FlowResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FlowResult& from);
  void MergeFrom(const FlowResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 user_agent_current_connections_count = 1;
  void clear_user_agent_current_connections_count();
  static const int kUserAgentCurrentConnectionsCountFieldNumber = 1;
  ::google::protobuf::uint32 user_agent_current_connections_count() const;
  void set_user_agent_current_connections_count(::google::protobuf::uint32 value);

  // uint32 origin_server_current_connections_count = 2;
  void clear_origin_server_current_connections_count();
  static const int kOriginServerCurrentConnectionsCountFieldNumber = 2;
  ::google::protobuf::uint32 origin_server_current_connections_count() const;
  void set_origin_server_current_connections_count(::google::protobuf::uint32 value);

  // uint32 completed_requests = 3;
  void clear_completed_requests();
  static const int kCompletedRequestsFieldNumber = 3;
  ::google::protobuf::uint32 completed_requests() const;
  void set_completed_requests(::google::protobuf::uint32 value);

  // uint32 total_incoming_connections = 4;
  void clear_total_incoming_connections();
  static const int kTotalIncomingConnectionsFieldNumber = 4;
  ::google::protobuf::uint32 total_incoming_connections() const;
  void set_total_incoming_connections(::google::protobuf::uint32 value);

  // uint32 incoming_requests = 5;
  void clear_incoming_requests();
  static const int kIncomingRequestsFieldNumber = 5;
  ::google::protobuf::uint32 incoming_requests() const;
  void set_incoming_requests(::google::protobuf::uint32 value);

  // uint32 outgoing_requests = 6;
  void clear_outgoing_requests();
  static const int kOutgoingRequestsFieldNumber = 6;
  ::google::protobuf::uint32 outgoing_requests() const;
  void set_outgoing_requests(::google::protobuf::uint32 value);

  // uint32 incoming_responses = 7;
  void clear_incoming_responses();
  static const int kIncomingResponsesFieldNumber = 7;
  ::google::protobuf::uint32 incoming_responses() const;
  void set_incoming_responses(::google::protobuf::uint32 value);

  // uint32 total_client_connections = 8;
  void clear_total_client_connections();
  static const int kTotalClientConnectionsFieldNumber = 8;
  ::google::protobuf::uint32 total_client_connections() const;
  void set_total_client_connections(::google::protobuf::uint32 value);

  // uint32 total_client_connections_ipv4 = 9;
  void clear_total_client_connections_ipv4();
  static const int kTotalClientConnectionsIpv4FieldNumber = 9;
  ::google::protobuf::uint32 total_client_connections_ipv4() const;
  void set_total_client_connections_ipv4(::google::protobuf::uint32 value);

  // uint32 total_client_connections_ipv6 = 10;
  void clear_total_client_connections_ipv6();
  static const int kTotalClientConnectionsIpv6FieldNumber = 10;
  ::google::protobuf::uint32 total_client_connections_ipv6() const;
  void set_total_client_connections_ipv6(::google::protobuf::uint32 value);

  // uint64 user_agent_total_bytes = 12;
  void clear_user_agent_total_bytes();
  static const int kUserAgentTotalBytesFieldNumber = 12;
  ::google::protobuf::uint64 user_agent_total_bytes() const;
  void set_user_agent_total_bytes(::google::protobuf::uint64 value);

  // uint32 total_server_connections = 11;
  void clear_total_server_connections();
  static const int kTotalServerConnectionsFieldNumber = 11;
  ::google::protobuf::uint32 total_server_connections() const;
  void set_total_server_connections(::google::protobuf::uint32 value);

  // float bandwidth_hit_ratio = 14;
  void clear_bandwidth_hit_ratio();
  static const int kBandwidthHitRatioFieldNumber = 14;
  float bandwidth_hit_ratio() const;
  void set_bandwidth_hit_ratio(float value);

  // uint64 origin_server_total_bytes = 13;
  void clear_origin_server_total_bytes();
  static const int kOriginServerTotalBytesFieldNumber = 13;
  ::google::protobuf::uint64 origin_server_total_bytes() const;
  void set_origin_server_total_bytes(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raltservice.FlowResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 user_agent_current_connections_count_;
  ::google::protobuf::uint32 origin_server_current_connections_count_;
  ::google::protobuf::uint32 completed_requests_;
  ::google::protobuf::uint32 total_incoming_connections_;
  ::google::protobuf::uint32 incoming_requests_;
  ::google::protobuf::uint32 outgoing_requests_;
  ::google::protobuf::uint32 incoming_responses_;
  ::google::protobuf::uint32 total_client_connections_;
  ::google::protobuf::uint32 total_client_connections_ipv4_;
  ::google::protobuf::uint32 total_client_connections_ipv6_;
  ::google::protobuf::uint64 user_agent_total_bytes_;
  ::google::protobuf::uint32 total_server_connections_;
  float bandwidth_hit_ratio_;
  ::google::protobuf::uint64 origin_server_total_bytes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.LogResult) */ {
 public:
  LogResult();
  virtual ~LogResult();

  LogResult(const LogResult& from);

  inline LogResult& operator=(const LogResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogResult(LogResult&& from) noexcept
    : LogResult() {
    *this = ::std::move(from);
  }

  inline LogResult& operator=(LogResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogResult* internal_default_instance() {
    return reinterpret_cast<const LogResult*>(
               &_LogResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(LogResult* other);
  friend void swap(LogResult& a, LogResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogResult* New() const final {
    return CreateMaybeMessage<LogResult>(NULL);
  }

  LogResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogResult& from);
  void MergeFrom(const LogResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 log_files_space_mb_used = 1;
  void clear_log_files_space_mb_used();
  static const int kLogFilesSpaceMbUsedFieldNumber = 1;
  ::google::protobuf::uint32 log_files_space_mb_used() const;
  void set_log_files_space_mb_used(::google::protobuf::uint32 value);

  // uint32 max_space_mb_for_logs = 2;
  void clear_max_space_mb_for_logs();
  static const int kMaxSpaceMbForLogsFieldNumber = 2;
  ::google::protobuf::uint32 max_space_mb_for_logs() const;
  void set_max_space_mb_for_logs(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.LogResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 log_files_space_mb_used_;
  ::google::protobuf::uint32 max_space_mb_for_logs_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetRaltLogsReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.GetRaltLogsReq) */ {
 public:
  GetRaltLogsReq();
  virtual ~GetRaltLogsReq();

  GetRaltLogsReq(const GetRaltLogsReq& from);

  inline GetRaltLogsReq& operator=(const GetRaltLogsReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRaltLogsReq(GetRaltLogsReq&& from) noexcept
    : GetRaltLogsReq() {
    *this = ::std::move(from);
  }

  inline GetRaltLogsReq& operator=(GetRaltLogsReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRaltLogsReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRaltLogsReq* internal_default_instance() {
    return reinterpret_cast<const GetRaltLogsReq*>(
               &_GetRaltLogsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(GetRaltLogsReq* other);
  friend void swap(GetRaltLogsReq& a, GetRaltLogsReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRaltLogsReq* New() const final {
    return CreateMaybeMessage<GetRaltLogsReq>(NULL);
  }

  GetRaltLogsReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetRaltLogsReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetRaltLogsReq& from);
  void MergeFrom(const GetRaltLogsReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRaltLogsReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // @@protoc_insertion_point(class_scope:raltservice.GetRaltLogsReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RaltLogs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.RaltLogs) */ {
 public:
  RaltLogs();
  virtual ~RaltLogs();

  RaltLogs(const RaltLogs& from);

  inline RaltLogs& operator=(const RaltLogs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RaltLogs(RaltLogs&& from) noexcept
    : RaltLogs() {
    *this = ::std::move(from);
  }

  inline RaltLogs& operator=(RaltLogs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RaltLogs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RaltLogs* internal_default_instance() {
    return reinterpret_cast<const RaltLogs*>(
               &_RaltLogs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(RaltLogs* other);
  friend void swap(RaltLogs& a, RaltLogs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RaltLogs* New() const final {
    return CreateMaybeMessage<RaltLogs>(NULL);
  }

  RaltLogs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RaltLogs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RaltLogs& from);
  void MergeFrom(const RaltLogs& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaltLogs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes logs = 1;
  void clear_logs();
  static const int kLogsFieldNumber = 1;
  const ::std::string& logs() const;
  void set_logs(const ::std::string& value);
  #if LANG_CXX11
  void set_logs(::std::string&& value);
  #endif
  void set_logs(const char* value);
  void set_logs(const void* value, size_t size);
  ::std::string* mutable_logs();
  ::std::string* release_logs();
  void set_allocated_logs(::std::string* logs);

  // @@protoc_insertion_point(class_scope:raltservice.RaltLogs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr logs_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetRecordCfgReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.GetRecordCfgReq) */ {
 public:
  GetRecordCfgReq();
  virtual ~GetRecordCfgReq();

  GetRecordCfgReq(const GetRecordCfgReq& from);

  inline GetRecordCfgReq& operator=(const GetRecordCfgReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRecordCfgReq(GetRecordCfgReq&& from) noexcept
    : GetRecordCfgReq() {
    *this = ::std::move(from);
  }

  inline GetRecordCfgReq& operator=(GetRecordCfgReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRecordCfgReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRecordCfgReq* internal_default_instance() {
    return reinterpret_cast<const GetRecordCfgReq*>(
               &_GetRecordCfgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(GetRecordCfgReq* other);
  friend void swap(GetRecordCfgReq& a, GetRecordCfgReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRecordCfgReq* New() const final {
    return CreateMaybeMessage<GetRecordCfgReq>(NULL);
  }

  GetRecordCfgReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetRecordCfgReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetRecordCfgReq& from);
  void MergeFrom(const GetRecordCfgReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecordCfgReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.GetRecordCfgReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetRecordCfgRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.GetRecordCfgRsp) */ {
 public:
  GetRecordCfgRsp();
  virtual ~GetRecordCfgRsp();

  GetRecordCfgRsp(const GetRecordCfgRsp& from);

  inline GetRecordCfgRsp& operator=(const GetRecordCfgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRecordCfgRsp(GetRecordCfgRsp&& from) noexcept
    : GetRecordCfgRsp() {
    *this = ::std::move(from);
  }

  inline GetRecordCfgRsp& operator=(GetRecordCfgRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRecordCfgRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRecordCfgRsp* internal_default_instance() {
    return reinterpret_cast<const GetRecordCfgRsp*>(
               &_GetRecordCfgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(GetRecordCfgRsp* other);
  friend void swap(GetRecordCfgRsp& a, GetRecordCfgRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRecordCfgRsp* New() const final {
    return CreateMaybeMessage<GetRecordCfgRsp>(NULL);
  }

  GetRecordCfgRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetRecordCfgRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetRecordCfgRsp& from);
  void MergeFrom(const GetRecordCfgRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecordCfgRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_ports = 4;
  void clear_server_ports();
  static const int kServerPortsFieldNumber = 4;
  const ::std::string& server_ports() const;
  void set_server_ports(const ::std::string& value);
  #if LANG_CXX11
  void set_server_ports(::std::string&& value);
  #endif
  void set_server_ports(const char* value);
  void set_server_ports(const char* value, size_t size);
  ::std::string* mutable_server_ports();
  ::std::string* release_server_ports();
  void set_allocated_server_ports(::std::string* server_ports);

  // uint32 logging_enabled = 1;
  void clear_logging_enabled();
  static const int kLoggingEnabledFieldNumber = 1;
  ::google::protobuf::uint32 logging_enabled() const;
  void set_logging_enabled(::google::protobuf::uint32 value);

  // uint32 max_space_mb_for_logs = 2;
  void clear_max_space_mb_for_logs();
  static const int kMaxSpaceMbForLogsFieldNumber = 2;
  ::google::protobuf::uint32 max_space_mb_for_logs() const;
  void set_max_space_mb_for_logs(::google::protobuf::uint32 value);

  // uint32 rolling_enabled = 3;
  void clear_rolling_enabled();
  static const int kRollingEnabledFieldNumber = 3;
  ::google::protobuf::uint32 rolling_enabled() const;
  void set_rolling_enabled(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.GetRecordCfgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_ports_;
  ::google::protobuf::uint32 logging_enabled_;
  ::google::protobuf::uint32 max_space_mb_for_logs_;
  ::google::protobuf::uint32 rolling_enabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetRecordCfgReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.SetRecordCfgReq) */ {
 public:
  SetRecordCfgReq();
  virtual ~SetRecordCfgReq();

  SetRecordCfgReq(const SetRecordCfgReq& from);

  inline SetRecordCfgReq& operator=(const SetRecordCfgReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetRecordCfgReq(SetRecordCfgReq&& from) noexcept
    : SetRecordCfgReq() {
    *this = ::std::move(from);
  }

  inline SetRecordCfgReq& operator=(SetRecordCfgReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetRecordCfgReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetRecordCfgReq* internal_default_instance() {
    return reinterpret_cast<const SetRecordCfgReq*>(
               &_SetRecordCfgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(SetRecordCfgReq* other);
  friend void swap(SetRecordCfgReq& a, SetRecordCfgReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetRecordCfgReq* New() const final {
    return CreateMaybeMessage<SetRecordCfgReq>(NULL);
  }

  SetRecordCfgReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetRecordCfgReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetRecordCfgReq& from);
  void MergeFrom(const SetRecordCfgReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRecordCfgReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .raltservice.RecordCfgType key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::raltservice::RecordCfgType key() const;
  void set_key(::raltservice::RecordCfgType value);

  // @@protoc_insertion_point(class_scope:raltservice.SetRecordCfgReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  int key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetRecordCfgRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.SetRecordCfgRsp) */ {
 public:
  SetRecordCfgRsp();
  virtual ~SetRecordCfgRsp();

  SetRecordCfgRsp(const SetRecordCfgRsp& from);

  inline SetRecordCfgRsp& operator=(const SetRecordCfgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetRecordCfgRsp(SetRecordCfgRsp&& from) noexcept
    : SetRecordCfgRsp() {
    *this = ::std::move(from);
  }

  inline SetRecordCfgRsp& operator=(SetRecordCfgRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetRecordCfgRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetRecordCfgRsp* internal_default_instance() {
    return reinterpret_cast<const SetRecordCfgRsp*>(
               &_SetRecordCfgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(SetRecordCfgRsp* other);
  friend void swap(SetRecordCfgRsp& a, SetRecordCfgRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetRecordCfgRsp* New() const final {
    return CreateMaybeMessage<SetRecordCfgRsp>(NULL);
  }

  SetRecordCfgRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetRecordCfgRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetRecordCfgRsp& from);
  void MergeFrom(const SetRecordCfgRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRecordCfgRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.SetRecordCfgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetAllDomainReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.GetAllDomainReq) */ {
 public:
  GetAllDomainReq();
  virtual ~GetAllDomainReq();

  GetAllDomainReq(const GetAllDomainReq& from);

  inline GetAllDomainReq& operator=(const GetAllDomainReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetAllDomainReq(GetAllDomainReq&& from) noexcept
    : GetAllDomainReq() {
    *this = ::std::move(from);
  }

  inline GetAllDomainReq& operator=(GetAllDomainReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAllDomainReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllDomainReq* internal_default_instance() {
    return reinterpret_cast<const GetAllDomainReq*>(
               &_GetAllDomainReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(GetAllDomainReq* other);
  friend void swap(GetAllDomainReq& a, GetAllDomainReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAllDomainReq* New() const final {
    return CreateMaybeMessage<GetAllDomainReq>(NULL);
  }

  GetAllDomainReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetAllDomainReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetAllDomainReq& from);
  void MergeFrom(const GetAllDomainReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllDomainReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.GetAllDomainReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Domain : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.Domain) */ {
 public:
  Domain();
  virtual ~Domain();

  Domain(const Domain& from);

  inline Domain& operator=(const Domain& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Domain(Domain&& from) noexcept
    : Domain() {
    *this = ::std::move(from);
  }

  inline Domain& operator=(Domain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Domain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Domain* internal_default_instance() {
    return reinterpret_cast<const Domain*>(
               &_Domain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(Domain* other);
  friend void swap(Domain& a, Domain& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Domain* New() const final {
    return CreateMaybeMessage<Domain>(NULL);
  }

  Domain* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Domain>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Domain& from);
  void MergeFrom(const Domain& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Domain* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string domain_str = 2;
  void clear_domain_str();
  static const int kDomainStrFieldNumber = 2;
  const ::std::string& domain_str() const;
  void set_domain_str(const ::std::string& value);
  #if LANG_CXX11
  void set_domain_str(::std::string&& value);
  #endif
  void set_domain_str(const char* value);
  void set_domain_str(const char* value, size_t size);
  ::std::string* mutable_domain_str();
  ::std::string* release_domain_str();
  void set_allocated_domain_str(::std::string* domain_str);

  // string append_or_replace_str = 3;
  void clear_append_or_replace_str();
  static const int kAppendOrReplaceStrFieldNumber = 3;
  const ::std::string& append_or_replace_str() const;
  void set_append_or_replace_str(const ::std::string& value);
  #if LANG_CXX11
  void set_append_or_replace_str(::std::string&& value);
  #endif
  void set_append_or_replace_str(const char* value);
  void set_append_or_replace_str(const char* value, size_t size);
  ::std::string* mutable_append_or_replace_str();
  ::std::string* release_append_or_replace_str();
  void set_allocated_append_or_replace_str(::std::string* append_or_replace_str);

  // string port = 4;
  void clear_port();
  static const int kPortFieldNumber = 4;
  const ::std::string& port() const;
  void set_port(const ::std::string& value);
  #if LANG_CXX11
  void set_port(::std::string&& value);
  #endif
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  ::std::string* mutable_port();
  ::std::string* release_port();
  void set_allocated_port(::std::string* port);

  // .raltservice.DomainType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::raltservice::DomainType type() const;
  void set_type(::raltservice::DomainType value);

  // @@protoc_insertion_point(class_scope:raltservice.Domain)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr domain_str_;
  ::google::protobuf::internal::ArenaStringPtr append_or_replace_str_;
  ::google::protobuf::internal::ArenaStringPtr port_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateDomainRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.UpdateDomainRsp) */ {
 public:
  UpdateDomainRsp();
  virtual ~UpdateDomainRsp();

  UpdateDomainRsp(const UpdateDomainRsp& from);

  inline UpdateDomainRsp& operator=(const UpdateDomainRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateDomainRsp(UpdateDomainRsp&& from) noexcept
    : UpdateDomainRsp() {
    *this = ::std::move(from);
  }

  inline UpdateDomainRsp& operator=(UpdateDomainRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateDomainRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateDomainRsp* internal_default_instance() {
    return reinterpret_cast<const UpdateDomainRsp*>(
               &_UpdateDomainRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(UpdateDomainRsp* other);
  friend void swap(UpdateDomainRsp& a, UpdateDomainRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateDomainRsp* New() const final {
    return CreateMaybeMessage<UpdateDomainRsp>(NULL);
  }

  UpdateDomainRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDomainRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateDomainRsp& from);
  void MergeFrom(const UpdateDomainRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDomainRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.UpdateDomainRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetDomainReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.GetDomainReq) */ {
 public:
  GetDomainReq();
  virtual ~GetDomainReq();

  GetDomainReq(const GetDomainReq& from);

  inline GetDomainReq& operator=(const GetDomainReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDomainReq(GetDomainReq&& from) noexcept
    : GetDomainReq() {
    *this = ::std::move(from);
  }

  inline GetDomainReq& operator=(GetDomainReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDomainReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDomainReq* internal_default_instance() {
    return reinterpret_cast<const GetDomainReq*>(
               &_GetDomainReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(GetDomainReq* other);
  friend void swap(GetDomainReq& a, GetDomainReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDomainReq* New() const final {
    return CreateMaybeMessage<GetDomainReq>(NULL);
  }

  GetDomainReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetDomainReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetDomainReq& from);
  void MergeFrom(const GetDomainReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDomainReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string domain_str = 1;
  void clear_domain_str();
  static const int kDomainStrFieldNumber = 1;
  const ::std::string& domain_str() const;
  void set_domain_str(const ::std::string& value);
  #if LANG_CXX11
  void set_domain_str(::std::string&& value);
  #endif
  void set_domain_str(const char* value);
  void set_domain_str(const char* value, size_t size);
  ::std::string* mutable_domain_str();
  ::std::string* release_domain_str();
  void set_allocated_domain_str(::std::string* domain_str);

  // @@protoc_insertion_point(class_scope:raltservice.GetDomainReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr domain_str_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddDomainRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.AddDomainRsp) */ {
 public:
  AddDomainRsp();
  virtual ~AddDomainRsp();

  AddDomainRsp(const AddDomainRsp& from);

  inline AddDomainRsp& operator=(const AddDomainRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddDomainRsp(AddDomainRsp&& from) noexcept
    : AddDomainRsp() {
    *this = ::std::move(from);
  }

  inline AddDomainRsp& operator=(AddDomainRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddDomainRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddDomainRsp* internal_default_instance() {
    return reinterpret_cast<const AddDomainRsp*>(
               &_AddDomainRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(AddDomainRsp* other);
  friend void swap(AddDomainRsp& a, AddDomainRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddDomainRsp* New() const final {
    return CreateMaybeMessage<AddDomainRsp>(NULL);
  }

  AddDomainRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddDomainRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddDomainRsp& from);
  void MergeFrom(const AddDomainRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddDomainRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.AddDomainRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteDomainReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.DeleteDomainReq) */ {
 public:
  DeleteDomainReq();
  virtual ~DeleteDomainReq();

  DeleteDomainReq(const DeleteDomainReq& from);

  inline DeleteDomainReq& operator=(const DeleteDomainReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteDomainReq(DeleteDomainReq&& from) noexcept
    : DeleteDomainReq() {
    *this = ::std::move(from);
  }

  inline DeleteDomainReq& operator=(DeleteDomainReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteDomainReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteDomainReq* internal_default_instance() {
    return reinterpret_cast<const DeleteDomainReq*>(
               &_DeleteDomainReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(DeleteDomainReq* other);
  friend void swap(DeleteDomainReq& a, DeleteDomainReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteDomainReq* New() const final {
    return CreateMaybeMessage<DeleteDomainReq>(NULL);
  }

  DeleteDomainReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteDomainReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteDomainReq& from);
  void MergeFrom(const DeleteDomainReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDomainReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string domain_str = 1;
  void clear_domain_str();
  static const int kDomainStrFieldNumber = 1;
  const ::std::string& domain_str() const;
  void set_domain_str(const ::std::string& value);
  #if LANG_CXX11
  void set_domain_str(::std::string&& value);
  #endif
  void set_domain_str(const char* value);
  void set_domain_str(const char* value, size_t size);
  ::std::string* mutable_domain_str();
  ::std::string* release_domain_str();
  void set_allocated_domain_str(::std::string* domain_str);

  // @@protoc_insertion_point(class_scope:raltservice.DeleteDomainReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr domain_str_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteDomainRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.DeleteDomainRsp) */ {
 public:
  DeleteDomainRsp();
  virtual ~DeleteDomainRsp();

  DeleteDomainRsp(const DeleteDomainRsp& from);

  inline DeleteDomainRsp& operator=(const DeleteDomainRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteDomainRsp(DeleteDomainRsp&& from) noexcept
    : DeleteDomainRsp() {
    *this = ::std::move(from);
  }

  inline DeleteDomainRsp& operator=(DeleteDomainRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteDomainRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteDomainRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteDomainRsp*>(
               &_DeleteDomainRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(DeleteDomainRsp* other);
  friend void swap(DeleteDomainRsp& a, DeleteDomainRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteDomainRsp* New() const final {
    return CreateMaybeMessage<DeleteDomainRsp>(NULL);
  }

  DeleteDomainRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteDomainRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteDomainRsp& from);
  void MergeFrom(const DeleteDomainRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDomainRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.DeleteDomainRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetMiscReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.GetMiscReq) */ {
 public:
  GetMiscReq();
  virtual ~GetMiscReq();

  GetMiscReq(const GetMiscReq& from);

  inline GetMiscReq& operator=(const GetMiscReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMiscReq(GetMiscReq&& from) noexcept
    : GetMiscReq() {
    *this = ::std::move(from);
  }

  inline GetMiscReq& operator=(GetMiscReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMiscReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMiscReq* internal_default_instance() {
    return reinterpret_cast<const GetMiscReq*>(
               &_GetMiscReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(GetMiscReq* other);
  friend void swap(GetMiscReq& a, GetMiscReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMiscReq* New() const final {
    return CreateMaybeMessage<GetMiscReq>(NULL);
  }

  GetMiscReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetMiscReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetMiscReq& from);
  void MergeFrom(const GetMiscReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMiscReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.GetMiscReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetMiscRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.GetMiscRsp) */ {
 public:
  GetMiscRsp();
  virtual ~GetMiscRsp();

  GetMiscRsp(const GetMiscRsp& from);

  inline GetMiscRsp& operator=(const GetMiscRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMiscRsp(GetMiscRsp&& from) noexcept
    : GetMiscRsp() {
    *this = ::std::move(from);
  }

  inline GetMiscRsp& operator=(GetMiscRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMiscRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMiscRsp* internal_default_instance() {
    return reinterpret_cast<const GetMiscRsp*>(
               &_GetMiscRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(GetMiscRsp* other);
  friend void swap(GetMiscRsp& a, GetMiscRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMiscRsp* New() const final {
    return CreateMaybeMessage<GetMiscRsp>(NULL);
  }

  GetMiscRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetMiscRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetMiscRsp& from);
  void MergeFrom(const GetMiscRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMiscRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .raltservice.MiscSwitch ralt_filter_type_default = 1;
  void clear_ralt_filter_type_default();
  static const int kRaltFilterTypeDefaultFieldNumber = 1;
  ::raltservice::MiscSwitch ralt_filter_type_default() const;
  void set_ralt_filter_type_default(::raltservice::MiscSwitch value);

  // @@protoc_insertion_point(class_scope:raltservice.GetMiscRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int ralt_filter_type_default_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Misc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.Misc) */ {
 public:
  Misc();
  virtual ~Misc();

  Misc(const Misc& from);

  inline Misc& operator=(const Misc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Misc(Misc&& from) noexcept
    : Misc() {
    *this = ::std::move(from);
  }

  inline Misc& operator=(Misc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Misc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Misc* internal_default_instance() {
    return reinterpret_cast<const Misc*>(
               &_Misc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(Misc* other);
  friend void swap(Misc& a, Misc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Misc* New() const final {
    return CreateMaybeMessage<Misc>(NULL);
  }

  Misc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Misc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Misc& from);
  void MergeFrom(const Misc& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Misc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .raltservice.MiscKey key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::raltservice::MiscKey key() const;
  void set_key(::raltservice::MiscKey value);

  // .raltservice.MiscSwitch value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::raltservice::MiscSwitch value() const;
  void set_value(::raltservice::MiscSwitch value);

  // @@protoc_insertion_point(class_scope:raltservice.Misc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int key_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ModMiscOpRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.ModMiscOpRsp) */ {
 public:
  ModMiscOpRsp();
  virtual ~ModMiscOpRsp();

  ModMiscOpRsp(const ModMiscOpRsp& from);

  inline ModMiscOpRsp& operator=(const ModMiscOpRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModMiscOpRsp(ModMiscOpRsp&& from) noexcept
    : ModMiscOpRsp() {
    *this = ::std::move(from);
  }

  inline ModMiscOpRsp& operator=(ModMiscOpRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ModMiscOpRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModMiscOpRsp* internal_default_instance() {
    return reinterpret_cast<const ModMiscOpRsp*>(
               &_ModMiscOpRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(ModMiscOpRsp* other);
  friend void swap(ModMiscOpRsp& a, ModMiscOpRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModMiscOpRsp* New() const final {
    return CreateMaybeMessage<ModMiscOpRsp>(NULL);
  }

  ModMiscOpRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ModMiscOpRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ModMiscOpRsp& from);
  void MergeFrom(const ModMiscOpRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModMiscOpRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.ModMiscOpRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RaltStatusReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.RaltStatusReq) */ {
 public:
  RaltStatusReq();
  virtual ~RaltStatusReq();

  RaltStatusReq(const RaltStatusReq& from);

  inline RaltStatusReq& operator=(const RaltStatusReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RaltStatusReq(RaltStatusReq&& from) noexcept
    : RaltStatusReq() {
    *this = ::std::move(from);
  }

  inline RaltStatusReq& operator=(RaltStatusReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RaltStatusReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RaltStatusReq* internal_default_instance() {
    return reinterpret_cast<const RaltStatusReq*>(
               &_RaltStatusReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(RaltStatusReq* other);
  friend void swap(RaltStatusReq& a, RaltStatusReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RaltStatusReq* New() const final {
    return CreateMaybeMessage<RaltStatusReq>(NULL);
  }

  RaltStatusReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RaltStatusReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RaltStatusReq& from);
  void MergeFrom(const RaltStatusReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaltStatusReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.RaltStatusReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RaltStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.RaltStatus) */ {
 public:
  RaltStatus();
  virtual ~RaltStatus();

  RaltStatus(const RaltStatus& from);

  inline RaltStatus& operator=(const RaltStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RaltStatus(RaltStatus&& from) noexcept
    : RaltStatus() {
    *this = ::std::move(from);
  }

  inline RaltStatus& operator=(RaltStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RaltStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RaltStatus* internal_default_instance() {
    return reinterpret_cast<const RaltStatus*>(
               &_RaltStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(RaltStatus* other);
  friend void swap(RaltStatus& a, RaltStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RaltStatus* New() const final {
    return CreateMaybeMessage<RaltStatus>(NULL);
  }

  RaltStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RaltStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RaltStatus& from);
  void MergeFrom(const RaltStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaltStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // uint32 status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.RaltStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  ::google::protobuf::uint32 status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExecCmdReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.ExecCmdReq) */ {
 public:
  ExecCmdReq();
  virtual ~ExecCmdReq();

  ExecCmdReq(const ExecCmdReq& from);

  inline ExecCmdReq& operator=(const ExecCmdReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecCmdReq(ExecCmdReq&& from) noexcept
    : ExecCmdReq() {
    *this = ::std::move(from);
  }

  inline ExecCmdReq& operator=(ExecCmdReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecCmdReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecCmdReq* internal_default_instance() {
    return reinterpret_cast<const ExecCmdReq*>(
               &_ExecCmdReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(ExecCmdReq* other);
  friend void swap(ExecCmdReq& a, ExecCmdReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecCmdReq* New() const final {
    return CreateMaybeMessage<ExecCmdReq>(NULL);
  }

  ExecCmdReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecCmdReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecCmdReq& from);
  void MergeFrom(const ExecCmdReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecCmdReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // .raltservice.CommandType cmd = 2;
  void clear_cmd();
  static const int kCmdFieldNumber = 2;
  ::raltservice::CommandType cmd() const;
  void set_cmd(::raltservice::CommandType value);

  // @@protoc_insertion_point(class_scope:raltservice.ExecCmdReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  int cmd_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExecCmdRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raltservice.ExecCmdRsp) */ {
 public:
  ExecCmdRsp();
  virtual ~ExecCmdRsp();

  ExecCmdRsp(const ExecCmdRsp& from);

  inline ExecCmdRsp& operator=(const ExecCmdRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecCmdRsp(ExecCmdRsp&& from) noexcept
    : ExecCmdRsp() {
    *this = ::std::move(from);
  }

  inline ExecCmdRsp& operator=(ExecCmdRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecCmdRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecCmdRsp* internal_default_instance() {
    return reinterpret_cast<const ExecCmdRsp*>(
               &_ExecCmdRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(ExecCmdRsp* other);
  friend void swap(ExecCmdRsp& a, ExecCmdRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecCmdRsp* New() const final {
    return CreateMaybeMessage<ExecCmdRsp>(NULL);
  }

  ExecCmdRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecCmdRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecCmdRsp& from);
  void MergeFrom(const ExecCmdRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecCmdRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raltservice.ExecCmdRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ralt_2dservice_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetCpuUsageReq

// string ip_addr = 1;
inline void GetCpuUsageReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetCpuUsageReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:raltservice.GetCpuUsageReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void GetCpuUsageReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.GetCpuUsageReq.ip_addr)
}
#if LANG_CXX11
inline void GetCpuUsageReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.GetCpuUsageReq.ip_addr)
}
#endif
inline void GetCpuUsageReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.GetCpuUsageReq.ip_addr)
}
inline void GetCpuUsageReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.GetCpuUsageReq.ip_addr)
}
inline ::std::string* GetCpuUsageReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.GetCpuUsageReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetCpuUsageReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:raltservice.GetCpuUsageReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetCpuUsageReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:raltservice.GetCpuUsageReq.ip_addr)
}

// -------------------------------------------------------------------

// GetCpuUsageRsp

// string cpu_usage = 1;
inline void GetCpuUsageRsp::clear_cpu_usage() {
  cpu_usage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetCpuUsageRsp::cpu_usage() const {
  // @@protoc_insertion_point(field_get:raltservice.GetCpuUsageRsp.cpu_usage)
  return cpu_usage_.GetNoArena();
}
inline void GetCpuUsageRsp::set_cpu_usage(const ::std::string& value) {
  
  cpu_usage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.GetCpuUsageRsp.cpu_usage)
}
#if LANG_CXX11
inline void GetCpuUsageRsp::set_cpu_usage(::std::string&& value) {
  
  cpu_usage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.GetCpuUsageRsp.cpu_usage)
}
#endif
inline void GetCpuUsageRsp::set_cpu_usage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cpu_usage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.GetCpuUsageRsp.cpu_usage)
}
inline void GetCpuUsageRsp::set_cpu_usage(const char* value, size_t size) {
  
  cpu_usage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.GetCpuUsageRsp.cpu_usage)
}
inline ::std::string* GetCpuUsageRsp::mutable_cpu_usage() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.GetCpuUsageRsp.cpu_usage)
  return cpu_usage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetCpuUsageRsp::release_cpu_usage() {
  // @@protoc_insertion_point(field_release:raltservice.GetCpuUsageRsp.cpu_usage)
  
  return cpu_usage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetCpuUsageRsp::set_allocated_cpu_usage(::std::string* cpu_usage) {
  if (cpu_usage != NULL) {
    
  } else {
    
  }
  cpu_usage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpu_usage);
  // @@protoc_insertion_point(field_set_allocated:raltservice.GetCpuUsageRsp.cpu_usage)
}

// -------------------------------------------------------------------

// GetCpuTempReq

// string ip_addr = 1;
inline void GetCpuTempReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetCpuTempReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:raltservice.GetCpuTempReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void GetCpuTempReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.GetCpuTempReq.ip_addr)
}
#if LANG_CXX11
inline void GetCpuTempReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.GetCpuTempReq.ip_addr)
}
#endif
inline void GetCpuTempReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.GetCpuTempReq.ip_addr)
}
inline void GetCpuTempReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.GetCpuTempReq.ip_addr)
}
inline ::std::string* GetCpuTempReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.GetCpuTempReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetCpuTempReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:raltservice.GetCpuTempReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetCpuTempReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:raltservice.GetCpuTempReq.ip_addr)
}

// -------------------------------------------------------------------

// GetCpuTempRsp

// string cpu_temp = 1;
inline void GetCpuTempRsp::clear_cpu_temp() {
  cpu_temp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetCpuTempRsp::cpu_temp() const {
  // @@protoc_insertion_point(field_get:raltservice.GetCpuTempRsp.cpu_temp)
  return cpu_temp_.GetNoArena();
}
inline void GetCpuTempRsp::set_cpu_temp(const ::std::string& value) {
  
  cpu_temp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.GetCpuTempRsp.cpu_temp)
}
#if LANG_CXX11
inline void GetCpuTempRsp::set_cpu_temp(::std::string&& value) {
  
  cpu_temp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.GetCpuTempRsp.cpu_temp)
}
#endif
inline void GetCpuTempRsp::set_cpu_temp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cpu_temp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.GetCpuTempRsp.cpu_temp)
}
inline void GetCpuTempRsp::set_cpu_temp(const char* value, size_t size) {
  
  cpu_temp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.GetCpuTempRsp.cpu_temp)
}
inline ::std::string* GetCpuTempRsp::mutable_cpu_temp() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.GetCpuTempRsp.cpu_temp)
  return cpu_temp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetCpuTempRsp::release_cpu_temp() {
  // @@protoc_insertion_point(field_release:raltservice.GetCpuTempRsp.cpu_temp)
  
  return cpu_temp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetCpuTempRsp::set_allocated_cpu_temp(::std::string* cpu_temp) {
  if (cpu_temp != NULL) {
    
  } else {
    
  }
  cpu_temp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpu_temp);
  // @@protoc_insertion_point(field_set_allocated:raltservice.GetCpuTempRsp.cpu_temp)
}

// -------------------------------------------------------------------

// GetMemUsageReq

// string ip_addr = 1;
inline void GetMemUsageReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMemUsageReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:raltservice.GetMemUsageReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void GetMemUsageReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.GetMemUsageReq.ip_addr)
}
#if LANG_CXX11
inline void GetMemUsageReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.GetMemUsageReq.ip_addr)
}
#endif
inline void GetMemUsageReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.GetMemUsageReq.ip_addr)
}
inline void GetMemUsageReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.GetMemUsageReq.ip_addr)
}
inline ::std::string* GetMemUsageReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.GetMemUsageReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMemUsageReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:raltservice.GetMemUsageReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMemUsageReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:raltservice.GetMemUsageReq.ip_addr)
}

// -------------------------------------------------------------------

// GetMemUsageRsp

// string mem_usage = 1;
inline void GetMemUsageRsp::clear_mem_usage() {
  mem_usage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMemUsageRsp::mem_usage() const {
  // @@protoc_insertion_point(field_get:raltservice.GetMemUsageRsp.mem_usage)
  return mem_usage_.GetNoArena();
}
inline void GetMemUsageRsp::set_mem_usage(const ::std::string& value) {
  
  mem_usage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.GetMemUsageRsp.mem_usage)
}
#if LANG_CXX11
inline void GetMemUsageRsp::set_mem_usage(::std::string&& value) {
  
  mem_usage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.GetMemUsageRsp.mem_usage)
}
#endif
inline void GetMemUsageRsp::set_mem_usage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mem_usage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.GetMemUsageRsp.mem_usage)
}
inline void GetMemUsageRsp::set_mem_usage(const char* value, size_t size) {
  
  mem_usage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.GetMemUsageRsp.mem_usage)
}
inline ::std::string* GetMemUsageRsp::mutable_mem_usage() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.GetMemUsageRsp.mem_usage)
  return mem_usage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMemUsageRsp::release_mem_usage() {
  // @@protoc_insertion_point(field_release:raltservice.GetMemUsageRsp.mem_usage)
  
  return mem_usage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMemUsageRsp::set_allocated_mem_usage(::std::string* mem_usage) {
  if (mem_usage != NULL) {
    
  } else {
    
  }
  mem_usage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mem_usage);
  // @@protoc_insertion_point(field_set_allocated:raltservice.GetMemUsageRsp.mem_usage)
}

// -------------------------------------------------------------------

// GetNicInfoReq

// string ip_addr = 1;
inline void GetNicInfoReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNicInfoReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:raltservice.GetNicInfoReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void GetNicInfoReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.GetNicInfoReq.ip_addr)
}
#if LANG_CXX11
inline void GetNicInfoReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.GetNicInfoReq.ip_addr)
}
#endif
inline void GetNicInfoReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.GetNicInfoReq.ip_addr)
}
inline void GetNicInfoReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.GetNicInfoReq.ip_addr)
}
inline ::std::string* GetNicInfoReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.GetNicInfoReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNicInfoReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:raltservice.GetNicInfoReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNicInfoReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:raltservice.GetNicInfoReq.ip_addr)
}

// -------------------------------------------------------------------

// GetNicInfoRsp

// string os_version = 1;
inline void GetNicInfoRsp::clear_os_version() {
  os_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNicInfoRsp::os_version() const {
  // @@protoc_insertion_point(field_get:raltservice.GetNicInfoRsp.os_version)
  return os_version_.GetNoArena();
}
inline void GetNicInfoRsp::set_os_version(const ::std::string& value) {
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.GetNicInfoRsp.os_version)
}
#if LANG_CXX11
inline void GetNicInfoRsp::set_os_version(::std::string&& value) {
  
  os_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.GetNicInfoRsp.os_version)
}
#endif
inline void GetNicInfoRsp::set_os_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.GetNicInfoRsp.os_version)
}
inline void GetNicInfoRsp::set_os_version(const char* value, size_t size) {
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.GetNicInfoRsp.os_version)
}
inline ::std::string* GetNicInfoRsp::mutable_os_version() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.GetNicInfoRsp.os_version)
  return os_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNicInfoRsp::release_os_version() {
  // @@protoc_insertion_point(field_release:raltservice.GetNicInfoRsp.os_version)
  
  return os_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNicInfoRsp::set_allocated_os_version(::std::string* os_version) {
  if (os_version != NULL) {
    
  } else {
    
  }
  os_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_version);
  // @@protoc_insertion_point(field_set_allocated:raltservice.GetNicInfoRsp.os_version)
}

// string nic_info = 2;
inline void GetNicInfoRsp::clear_nic_info() {
  nic_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNicInfoRsp::nic_info() const {
  // @@protoc_insertion_point(field_get:raltservice.GetNicInfoRsp.nic_info)
  return nic_info_.GetNoArena();
}
inline void GetNicInfoRsp::set_nic_info(const ::std::string& value) {
  
  nic_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.GetNicInfoRsp.nic_info)
}
#if LANG_CXX11
inline void GetNicInfoRsp::set_nic_info(::std::string&& value) {
  
  nic_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.GetNicInfoRsp.nic_info)
}
#endif
inline void GetNicInfoRsp::set_nic_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nic_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.GetNicInfoRsp.nic_info)
}
inline void GetNicInfoRsp::set_nic_info(const char* value, size_t size) {
  
  nic_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.GetNicInfoRsp.nic_info)
}
inline ::std::string* GetNicInfoRsp::mutable_nic_info() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.GetNicInfoRsp.nic_info)
  return nic_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNicInfoRsp::release_nic_info() {
  // @@protoc_insertion_point(field_release:raltservice.GetNicInfoRsp.nic_info)
  
  return nic_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNicInfoRsp::set_allocated_nic_info(::std::string* nic_info) {
  if (nic_info != NULL) {
    
  } else {
    
  }
  nic_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nic_info);
  // @@protoc_insertion_point(field_set_allocated:raltservice.GetNicInfoRsp.nic_info)
}

// -------------------------------------------------------------------

// StatsFieldName

// string ip_addr = 1;
inline void StatsFieldName::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatsFieldName::ip_addr() const {
  // @@protoc_insertion_point(field_get:raltservice.StatsFieldName.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void StatsFieldName::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.StatsFieldName.ip_addr)
}
#if LANG_CXX11
inline void StatsFieldName::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.StatsFieldName.ip_addr)
}
#endif
inline void StatsFieldName::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.StatsFieldName.ip_addr)
}
inline void StatsFieldName::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.StatsFieldName.ip_addr)
}
inline ::std::string* StatsFieldName::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.StatsFieldName.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatsFieldName::release_ip_addr() {
  // @@protoc_insertion_point(field_release:raltservice.StatsFieldName.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatsFieldName::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:raltservice.StatsFieldName.ip_addr)
}

// string field_name = 2;
inline void StatsFieldName::clear_field_name() {
  field_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatsFieldName::field_name() const {
  // @@protoc_insertion_point(field_get:raltservice.StatsFieldName.field_name)
  return field_name_.GetNoArena();
}
inline void StatsFieldName::set_field_name(const ::std::string& value) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.StatsFieldName.field_name)
}
#if LANG_CXX11
inline void StatsFieldName::set_field_name(::std::string&& value) {
  
  field_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.StatsFieldName.field_name)
}
#endif
inline void StatsFieldName::set_field_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.StatsFieldName.field_name)
}
inline void StatsFieldName::set_field_name(const char* value, size_t size) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.StatsFieldName.field_name)
}
inline ::std::string* StatsFieldName::mutable_field_name() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.StatsFieldName.field_name)
  return field_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatsFieldName::release_field_name() {
  // @@protoc_insertion_point(field_release:raltservice.StatsFieldName.field_name)
  
  return field_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatsFieldName::set_allocated_field_name(::std::string* field_name) {
  if (field_name != NULL) {
    
  } else {
    
  }
  field_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field_name);
  // @@protoc_insertion_point(field_set_allocated:raltservice.StatsFieldName.field_name)
}

// -------------------------------------------------------------------

// StatsFieldValue

// string value = 1;
inline void StatsFieldValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatsFieldValue::value() const {
  // @@protoc_insertion_point(field_get:raltservice.StatsFieldValue.value)
  return value_.GetNoArena();
}
inline void StatsFieldValue::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.StatsFieldValue.value)
}
#if LANG_CXX11
inline void StatsFieldValue::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.StatsFieldValue.value)
}
#endif
inline void StatsFieldValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.StatsFieldValue.value)
}
inline void StatsFieldValue::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.StatsFieldValue.value)
}
inline ::std::string* StatsFieldValue::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.StatsFieldValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatsFieldValue::release_value() {
  // @@protoc_insertion_point(field_release:raltservice.StatsFieldValue.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatsFieldValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raltservice.StatsFieldValue.value)
}

// -------------------------------------------------------------------

// HomePageReq

// uint32 type = 1;
inline void HomePageReq::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 HomePageReq::type() const {
  // @@protoc_insertion_point(field_get:raltservice.HomePageReq.type)
  return type_;
}
inline void HomePageReq::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:raltservice.HomePageReq.type)
}

// -------------------------------------------------------------------

// HomePageRsp

// uint32 domain_num = 1;
inline void HomePageRsp::clear_domain_num() {
  domain_num_ = 0u;
}
inline ::google::protobuf::uint32 HomePageRsp::domain_num() const {
  // @@protoc_insertion_point(field_get:raltservice.HomePageRsp.domain_num)
  return domain_num_;
}
inline void HomePageRsp::set_domain_num(::google::protobuf::uint32 value) {
  
  domain_num_ = value;
  // @@protoc_insertion_point(field_set:raltservice.HomePageRsp.domain_num)
}

// uint32 cluster_device = 2;
inline void HomePageRsp::clear_cluster_device() {
  cluster_device_ = 0u;
}
inline ::google::protobuf::uint32 HomePageRsp::cluster_device() const {
  // @@protoc_insertion_point(field_get:raltservice.HomePageRsp.cluster_device)
  return cluster_device_;
}
inline void HomePageRsp::set_cluster_device(::google::protobuf::uint32 value) {
  
  cluster_device_ = value;
  // @@protoc_insertion_point(field_set:raltservice.HomePageRsp.cluster_device)
}

// uint64 app_transfor_bytes = 3;
inline void HomePageRsp::clear_app_transfor_bytes() {
  app_transfor_bytes_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HomePageRsp::app_transfor_bytes() const {
  // @@protoc_insertion_point(field_get:raltservice.HomePageRsp.app_transfor_bytes)
  return app_transfor_bytes_;
}
inline void HomePageRsp::set_app_transfor_bytes(::google::protobuf::uint64 value) {
  
  app_transfor_bytes_ = value;
  // @@protoc_insertion_point(field_set:raltservice.HomePageRsp.app_transfor_bytes)
}

// uint32 app_transfor_connections = 4;
inline void HomePageRsp::clear_app_transfor_connections() {
  app_transfor_connections_ = 0u;
}
inline ::google::protobuf::uint32 HomePageRsp::app_transfor_connections() const {
  // @@protoc_insertion_point(field_get:raltservice.HomePageRsp.app_transfor_connections)
  return app_transfor_connections_;
}
inline void HomePageRsp::set_app_transfor_connections(::google::protobuf::uint32 value) {
  
  app_transfor_connections_ = value;
  // @@protoc_insertion_point(field_set:raltservice.HomePageRsp.app_transfor_connections)
}

// uint32 cache_total_hits = 5;
inline void HomePageRsp::clear_cache_total_hits() {
  cache_total_hits_ = 0u;
}
inline ::google::protobuf::uint32 HomePageRsp::cache_total_hits() const {
  // @@protoc_insertion_point(field_get:raltservice.HomePageRsp.cache_total_hits)
  return cache_total_hits_;
}
inline void HomePageRsp::set_cache_total_hits(::google::protobuf::uint32 value) {
  
  cache_total_hits_ = value;
  // @@protoc_insertion_point(field_set:raltservice.HomePageRsp.cache_total_hits)
}

// uint64 cache_bytes_total = 6;
inline void HomePageRsp::clear_cache_bytes_total() {
  cache_bytes_total_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HomePageRsp::cache_bytes_total() const {
  // @@protoc_insertion_point(field_get:raltservice.HomePageRsp.cache_bytes_total)
  return cache_bytes_total_;
}
inline void HomePageRsp::set_cache_bytes_total(::google::protobuf::uint64 value) {
  
  cache_bytes_total_ = value;
  // @@protoc_insertion_point(field_set:raltservice.HomePageRsp.cache_bytes_total)
}

// uint64 cache_bytes_used = 7;
inline void HomePageRsp::clear_cache_bytes_used() {
  cache_bytes_used_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HomePageRsp::cache_bytes_used() const {
  // @@protoc_insertion_point(field_get:raltservice.HomePageRsp.cache_bytes_used)
  return cache_bytes_used_;
}
inline void HomePageRsp::set_cache_bytes_used(::google::protobuf::uint64 value) {
  
  cache_bytes_used_ = value;
  // @@protoc_insertion_point(field_set:raltservice.HomePageRsp.cache_bytes_used)
}

// uint32 cache_num_docs = 8;
inline void HomePageRsp::clear_cache_num_docs() {
  cache_num_docs_ = 0u;
}
inline ::google::protobuf::uint32 HomePageRsp::cache_num_docs() const {
  // @@protoc_insertion_point(field_get:raltservice.HomePageRsp.cache_num_docs)
  return cache_num_docs_;
}
inline void HomePageRsp::set_cache_num_docs(::google::protobuf::uint32 value) {
  
  cache_num_docs_ = value;
  // @@protoc_insertion_point(field_set:raltservice.HomePageRsp.cache_num_docs)
}

// -------------------------------------------------------------------

// CacheLookUpReq

// string ip_addr = 1;
inline void CacheLookUpReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CacheLookUpReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:raltservice.CacheLookUpReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void CacheLookUpReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.CacheLookUpReq.ip_addr)
}
#if LANG_CXX11
inline void CacheLookUpReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.CacheLookUpReq.ip_addr)
}
#endif
inline void CacheLookUpReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.CacheLookUpReq.ip_addr)
}
inline void CacheLookUpReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.CacheLookUpReq.ip_addr)
}
inline ::std::string* CacheLookUpReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.CacheLookUpReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CacheLookUpReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:raltservice.CacheLookUpReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CacheLookUpReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:raltservice.CacheLookUpReq.ip_addr)
}

// -------------------------------------------------------------------

// FlowStatLookUpReq

// string ip_addr = 1;
inline void FlowStatLookUpReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FlowStatLookUpReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowStatLookUpReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void FlowStatLookUpReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.FlowStatLookUpReq.ip_addr)
}
#if LANG_CXX11
inline void FlowStatLookUpReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.FlowStatLookUpReq.ip_addr)
}
#endif
inline void FlowStatLookUpReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.FlowStatLookUpReq.ip_addr)
}
inline void FlowStatLookUpReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.FlowStatLookUpReq.ip_addr)
}
inline ::std::string* FlowStatLookUpReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.FlowStatLookUpReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FlowStatLookUpReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:raltservice.FlowStatLookUpReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlowStatLookUpReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:raltservice.FlowStatLookUpReq.ip_addr)
}

// -------------------------------------------------------------------

// LogInfoLookUpReq

// string ip_addr = 1;
inline void LogInfoLookUpReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogInfoLookUpReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:raltservice.LogInfoLookUpReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void LogInfoLookUpReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.LogInfoLookUpReq.ip_addr)
}
#if LANG_CXX11
inline void LogInfoLookUpReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.LogInfoLookUpReq.ip_addr)
}
#endif
inline void LogInfoLookUpReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.LogInfoLookUpReq.ip_addr)
}
inline void LogInfoLookUpReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.LogInfoLookUpReq.ip_addr)
}
inline ::std::string* LogInfoLookUpReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.LogInfoLookUpReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogInfoLookUpReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:raltservice.LogInfoLookUpReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogInfoLookUpReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:raltservice.LogInfoLookUpReq.ip_addr)
}

// -------------------------------------------------------------------

// CacheResult

// uint32 cache_total_hits = 1;
inline void CacheResult::clear_cache_total_hits() {
  cache_total_hits_ = 0u;
}
inline ::google::protobuf::uint32 CacheResult::cache_total_hits() const {
  // @@protoc_insertion_point(field_get:raltservice.CacheResult.cache_total_hits)
  return cache_total_hits_;
}
inline void CacheResult::set_cache_total_hits(::google::protobuf::uint32 value) {
  
  cache_total_hits_ = value;
  // @@protoc_insertion_point(field_set:raltservice.CacheResult.cache_total_hits)
}

// uint64 bytes_total = 2;
inline void CacheResult::clear_bytes_total() {
  bytes_total_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CacheResult::bytes_total() const {
  // @@protoc_insertion_point(field_get:raltservice.CacheResult.bytes_total)
  return bytes_total_;
}
inline void CacheResult::set_bytes_total(::google::protobuf::uint64 value) {
  
  bytes_total_ = value;
  // @@protoc_insertion_point(field_set:raltservice.CacheResult.bytes_total)
}

// uint64 bytes_used = 3;
inline void CacheResult::clear_bytes_used() {
  bytes_used_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CacheResult::bytes_used() const {
  // @@protoc_insertion_point(field_get:raltservice.CacheResult.bytes_used)
  return bytes_used_;
}
inline void CacheResult::set_bytes_used(::google::protobuf::uint64 value) {
  
  bytes_used_ = value;
  // @@protoc_insertion_point(field_set:raltservice.CacheResult.bytes_used)
}

// uint32 num_docs = 4;
inline void CacheResult::clear_num_docs() {
  num_docs_ = 0u;
}
inline ::google::protobuf::uint32 CacheResult::num_docs() const {
  // @@protoc_insertion_point(field_get:raltservice.CacheResult.num_docs)
  return num_docs_;
}
inline void CacheResult::set_num_docs(::google::protobuf::uint32 value) {
  
  num_docs_ = value;
  // @@protoc_insertion_point(field_set:raltservice.CacheResult.num_docs)
}

// float cache_hit_ratio = 5;
inline void CacheResult::clear_cache_hit_ratio() {
  cache_hit_ratio_ = 0;
}
inline float CacheResult::cache_hit_ratio() const {
  // @@protoc_insertion_point(field_get:raltservice.CacheResult.cache_hit_ratio)
  return cache_hit_ratio_;
}
inline void CacheResult::set_cache_hit_ratio(float value) {
  
  cache_hit_ratio_ = value;
  // @@protoc_insertion_point(field_set:raltservice.CacheResult.cache_hit_ratio)
}

// -------------------------------------------------------------------

// FlowResult

// uint32 user_agent_current_connections_count = 1;
inline void FlowResult::clear_user_agent_current_connections_count() {
  user_agent_current_connections_count_ = 0u;
}
inline ::google::protobuf::uint32 FlowResult::user_agent_current_connections_count() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.user_agent_current_connections_count)
  return user_agent_current_connections_count_;
}
inline void FlowResult::set_user_agent_current_connections_count(::google::protobuf::uint32 value) {
  
  user_agent_current_connections_count_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.user_agent_current_connections_count)
}

// uint32 origin_server_current_connections_count = 2;
inline void FlowResult::clear_origin_server_current_connections_count() {
  origin_server_current_connections_count_ = 0u;
}
inline ::google::protobuf::uint32 FlowResult::origin_server_current_connections_count() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.origin_server_current_connections_count)
  return origin_server_current_connections_count_;
}
inline void FlowResult::set_origin_server_current_connections_count(::google::protobuf::uint32 value) {
  
  origin_server_current_connections_count_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.origin_server_current_connections_count)
}

// uint32 completed_requests = 3;
inline void FlowResult::clear_completed_requests() {
  completed_requests_ = 0u;
}
inline ::google::protobuf::uint32 FlowResult::completed_requests() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.completed_requests)
  return completed_requests_;
}
inline void FlowResult::set_completed_requests(::google::protobuf::uint32 value) {
  
  completed_requests_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.completed_requests)
}

// uint32 total_incoming_connections = 4;
inline void FlowResult::clear_total_incoming_connections() {
  total_incoming_connections_ = 0u;
}
inline ::google::protobuf::uint32 FlowResult::total_incoming_connections() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.total_incoming_connections)
  return total_incoming_connections_;
}
inline void FlowResult::set_total_incoming_connections(::google::protobuf::uint32 value) {
  
  total_incoming_connections_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.total_incoming_connections)
}

// uint32 incoming_requests = 5;
inline void FlowResult::clear_incoming_requests() {
  incoming_requests_ = 0u;
}
inline ::google::protobuf::uint32 FlowResult::incoming_requests() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.incoming_requests)
  return incoming_requests_;
}
inline void FlowResult::set_incoming_requests(::google::protobuf::uint32 value) {
  
  incoming_requests_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.incoming_requests)
}

// uint32 outgoing_requests = 6;
inline void FlowResult::clear_outgoing_requests() {
  outgoing_requests_ = 0u;
}
inline ::google::protobuf::uint32 FlowResult::outgoing_requests() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.outgoing_requests)
  return outgoing_requests_;
}
inline void FlowResult::set_outgoing_requests(::google::protobuf::uint32 value) {
  
  outgoing_requests_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.outgoing_requests)
}

// uint32 incoming_responses = 7;
inline void FlowResult::clear_incoming_responses() {
  incoming_responses_ = 0u;
}
inline ::google::protobuf::uint32 FlowResult::incoming_responses() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.incoming_responses)
  return incoming_responses_;
}
inline void FlowResult::set_incoming_responses(::google::protobuf::uint32 value) {
  
  incoming_responses_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.incoming_responses)
}

// uint32 total_client_connections = 8;
inline void FlowResult::clear_total_client_connections() {
  total_client_connections_ = 0u;
}
inline ::google::protobuf::uint32 FlowResult::total_client_connections() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.total_client_connections)
  return total_client_connections_;
}
inline void FlowResult::set_total_client_connections(::google::protobuf::uint32 value) {
  
  total_client_connections_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.total_client_connections)
}

// uint32 total_client_connections_ipv4 = 9;
inline void FlowResult::clear_total_client_connections_ipv4() {
  total_client_connections_ipv4_ = 0u;
}
inline ::google::protobuf::uint32 FlowResult::total_client_connections_ipv4() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.total_client_connections_ipv4)
  return total_client_connections_ipv4_;
}
inline void FlowResult::set_total_client_connections_ipv4(::google::protobuf::uint32 value) {
  
  total_client_connections_ipv4_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.total_client_connections_ipv4)
}

// uint32 total_client_connections_ipv6 = 10;
inline void FlowResult::clear_total_client_connections_ipv6() {
  total_client_connections_ipv6_ = 0u;
}
inline ::google::protobuf::uint32 FlowResult::total_client_connections_ipv6() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.total_client_connections_ipv6)
  return total_client_connections_ipv6_;
}
inline void FlowResult::set_total_client_connections_ipv6(::google::protobuf::uint32 value) {
  
  total_client_connections_ipv6_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.total_client_connections_ipv6)
}

// uint32 total_server_connections = 11;
inline void FlowResult::clear_total_server_connections() {
  total_server_connections_ = 0u;
}
inline ::google::protobuf::uint32 FlowResult::total_server_connections() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.total_server_connections)
  return total_server_connections_;
}
inline void FlowResult::set_total_server_connections(::google::protobuf::uint32 value) {
  
  total_server_connections_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.total_server_connections)
}

// uint64 user_agent_total_bytes = 12;
inline void FlowResult::clear_user_agent_total_bytes() {
  user_agent_total_bytes_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FlowResult::user_agent_total_bytes() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.user_agent_total_bytes)
  return user_agent_total_bytes_;
}
inline void FlowResult::set_user_agent_total_bytes(::google::protobuf::uint64 value) {
  
  user_agent_total_bytes_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.user_agent_total_bytes)
}

// uint64 origin_server_total_bytes = 13;
inline void FlowResult::clear_origin_server_total_bytes() {
  origin_server_total_bytes_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FlowResult::origin_server_total_bytes() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.origin_server_total_bytes)
  return origin_server_total_bytes_;
}
inline void FlowResult::set_origin_server_total_bytes(::google::protobuf::uint64 value) {
  
  origin_server_total_bytes_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.origin_server_total_bytes)
}

// float bandwidth_hit_ratio = 14;
inline void FlowResult::clear_bandwidth_hit_ratio() {
  bandwidth_hit_ratio_ = 0;
}
inline float FlowResult::bandwidth_hit_ratio() const {
  // @@protoc_insertion_point(field_get:raltservice.FlowResult.bandwidth_hit_ratio)
  return bandwidth_hit_ratio_;
}
inline void FlowResult::set_bandwidth_hit_ratio(float value) {
  
  bandwidth_hit_ratio_ = value;
  // @@protoc_insertion_point(field_set:raltservice.FlowResult.bandwidth_hit_ratio)
}

// -------------------------------------------------------------------

// LogResult

// uint32 log_files_space_mb_used = 1;
inline void LogResult::clear_log_files_space_mb_used() {
  log_files_space_mb_used_ = 0u;
}
inline ::google::protobuf::uint32 LogResult::log_files_space_mb_used() const {
  // @@protoc_insertion_point(field_get:raltservice.LogResult.log_files_space_mb_used)
  return log_files_space_mb_used_;
}
inline void LogResult::set_log_files_space_mb_used(::google::protobuf::uint32 value) {
  
  log_files_space_mb_used_ = value;
  // @@protoc_insertion_point(field_set:raltservice.LogResult.log_files_space_mb_used)
}

// uint32 max_space_mb_for_logs = 2;
inline void LogResult::clear_max_space_mb_for_logs() {
  max_space_mb_for_logs_ = 0u;
}
inline ::google::protobuf::uint32 LogResult::max_space_mb_for_logs() const {
  // @@protoc_insertion_point(field_get:raltservice.LogResult.max_space_mb_for_logs)
  return max_space_mb_for_logs_;
}
inline void LogResult::set_max_space_mb_for_logs(::google::protobuf::uint32 value) {
  
  max_space_mb_for_logs_ = value;
  // @@protoc_insertion_point(field_set:raltservice.LogResult.max_space_mb_for_logs)
}

// -------------------------------------------------------------------

// GetRaltLogsReq

// string ip_addr = 1;
inline void GetRaltLogsReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRaltLogsReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:raltservice.GetRaltLogsReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void GetRaltLogsReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.GetRaltLogsReq.ip_addr)
}
#if LANG_CXX11
inline void GetRaltLogsReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.GetRaltLogsReq.ip_addr)
}
#endif
inline void GetRaltLogsReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.GetRaltLogsReq.ip_addr)
}
inline void GetRaltLogsReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.GetRaltLogsReq.ip_addr)
}
inline ::std::string* GetRaltLogsReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.GetRaltLogsReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRaltLogsReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:raltservice.GetRaltLogsReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRaltLogsReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:raltservice.GetRaltLogsReq.ip_addr)
}

// -------------------------------------------------------------------

// RaltLogs

// bytes logs = 1;
inline void RaltLogs::clear_logs() {
  logs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RaltLogs::logs() const {
  // @@protoc_insertion_point(field_get:raltservice.RaltLogs.logs)
  return logs_.GetNoArena();
}
inline void RaltLogs::set_logs(const ::std::string& value) {
  
  logs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.RaltLogs.logs)
}
#if LANG_CXX11
inline void RaltLogs::set_logs(::std::string&& value) {
  
  logs_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.RaltLogs.logs)
}
#endif
inline void RaltLogs::set_logs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  logs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.RaltLogs.logs)
}
inline void RaltLogs::set_logs(const void* value, size_t size) {
  
  logs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.RaltLogs.logs)
}
inline ::std::string* RaltLogs::mutable_logs() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.RaltLogs.logs)
  return logs_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RaltLogs::release_logs() {
  // @@protoc_insertion_point(field_release:raltservice.RaltLogs.logs)
  
  return logs_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RaltLogs::set_allocated_logs(::std::string* logs) {
  if (logs != NULL) {
    
  } else {
    
  }
  logs_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logs);
  // @@protoc_insertion_point(field_set_allocated:raltservice.RaltLogs.logs)
}

// -------------------------------------------------------------------

// GetRecordCfgReq

// uint32 type = 1;
inline void GetRecordCfgReq::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 GetRecordCfgReq::type() const {
  // @@protoc_insertion_point(field_get:raltservice.GetRecordCfgReq.type)
  return type_;
}
inline void GetRecordCfgReq::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetRecordCfgReq.type)
}

// -------------------------------------------------------------------

// GetRecordCfgRsp

// uint32 logging_enabled = 1;
inline void GetRecordCfgRsp::clear_logging_enabled() {
  logging_enabled_ = 0u;
}
inline ::google::protobuf::uint32 GetRecordCfgRsp::logging_enabled() const {
  // @@protoc_insertion_point(field_get:raltservice.GetRecordCfgRsp.logging_enabled)
  return logging_enabled_;
}
inline void GetRecordCfgRsp::set_logging_enabled(::google::protobuf::uint32 value) {
  
  logging_enabled_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetRecordCfgRsp.logging_enabled)
}

// uint32 max_space_mb_for_logs = 2;
inline void GetRecordCfgRsp::clear_max_space_mb_for_logs() {
  max_space_mb_for_logs_ = 0u;
}
inline ::google::protobuf::uint32 GetRecordCfgRsp::max_space_mb_for_logs() const {
  // @@protoc_insertion_point(field_get:raltservice.GetRecordCfgRsp.max_space_mb_for_logs)
  return max_space_mb_for_logs_;
}
inline void GetRecordCfgRsp::set_max_space_mb_for_logs(::google::protobuf::uint32 value) {
  
  max_space_mb_for_logs_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetRecordCfgRsp.max_space_mb_for_logs)
}

// uint32 rolling_enabled = 3;
inline void GetRecordCfgRsp::clear_rolling_enabled() {
  rolling_enabled_ = 0u;
}
inline ::google::protobuf::uint32 GetRecordCfgRsp::rolling_enabled() const {
  // @@protoc_insertion_point(field_get:raltservice.GetRecordCfgRsp.rolling_enabled)
  return rolling_enabled_;
}
inline void GetRecordCfgRsp::set_rolling_enabled(::google::protobuf::uint32 value) {
  
  rolling_enabled_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetRecordCfgRsp.rolling_enabled)
}

// string server_ports = 4;
inline void GetRecordCfgRsp::clear_server_ports() {
  server_ports_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRecordCfgRsp::server_ports() const {
  // @@protoc_insertion_point(field_get:raltservice.GetRecordCfgRsp.server_ports)
  return server_ports_.GetNoArena();
}
inline void GetRecordCfgRsp::set_server_ports(const ::std::string& value) {
  
  server_ports_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.GetRecordCfgRsp.server_ports)
}
#if LANG_CXX11
inline void GetRecordCfgRsp::set_server_ports(::std::string&& value) {
  
  server_ports_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.GetRecordCfgRsp.server_ports)
}
#endif
inline void GetRecordCfgRsp::set_server_ports(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_ports_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.GetRecordCfgRsp.server_ports)
}
inline void GetRecordCfgRsp::set_server_ports(const char* value, size_t size) {
  
  server_ports_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.GetRecordCfgRsp.server_ports)
}
inline ::std::string* GetRecordCfgRsp::mutable_server_ports() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.GetRecordCfgRsp.server_ports)
  return server_ports_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRecordCfgRsp::release_server_ports() {
  // @@protoc_insertion_point(field_release:raltservice.GetRecordCfgRsp.server_ports)
  
  return server_ports_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRecordCfgRsp::set_allocated_server_ports(::std::string* server_ports) {
  if (server_ports != NULL) {
    
  } else {
    
  }
  server_ports_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_ports);
  // @@protoc_insertion_point(field_set_allocated:raltservice.GetRecordCfgRsp.server_ports)
}

// -------------------------------------------------------------------

// SetRecordCfgReq

// .raltservice.RecordCfgType key = 1;
inline void SetRecordCfgReq::clear_key() {
  key_ = 0;
}
inline ::raltservice::RecordCfgType SetRecordCfgReq::key() const {
  // @@protoc_insertion_point(field_get:raltservice.SetRecordCfgReq.key)
  return static_cast< ::raltservice::RecordCfgType >(key_);
}
inline void SetRecordCfgReq::set_key(::raltservice::RecordCfgType value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:raltservice.SetRecordCfgReq.key)
}

// string value = 2;
inline void SetRecordCfgReq::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetRecordCfgReq::value() const {
  // @@protoc_insertion_point(field_get:raltservice.SetRecordCfgReq.value)
  return value_.GetNoArena();
}
inline void SetRecordCfgReq::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.SetRecordCfgReq.value)
}
#if LANG_CXX11
inline void SetRecordCfgReq::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.SetRecordCfgReq.value)
}
#endif
inline void SetRecordCfgReq::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.SetRecordCfgReq.value)
}
inline void SetRecordCfgReq::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.SetRecordCfgReq.value)
}
inline ::std::string* SetRecordCfgReq::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.SetRecordCfgReq.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetRecordCfgReq::release_value() {
  // @@protoc_insertion_point(field_release:raltservice.SetRecordCfgReq.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetRecordCfgReq::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raltservice.SetRecordCfgReq.value)
}

// -------------------------------------------------------------------

// SetRecordCfgRsp

// uint32 result = 1;
inline void SetRecordCfgRsp::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 SetRecordCfgRsp::result() const {
  // @@protoc_insertion_point(field_get:raltservice.SetRecordCfgRsp.result)
  return result_;
}
inline void SetRecordCfgRsp::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:raltservice.SetRecordCfgRsp.result)
}

// -------------------------------------------------------------------

// GetAllDomainReq

// uint32 type = 1;
inline void GetAllDomainReq::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 GetAllDomainReq::type() const {
  // @@protoc_insertion_point(field_get:raltservice.GetAllDomainReq.type)
  return type_;
}
inline void GetAllDomainReq::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetAllDomainReq.type)
}

// -------------------------------------------------------------------

// Domain

// .raltservice.DomainType type = 1;
inline void Domain::clear_type() {
  type_ = 0;
}
inline ::raltservice::DomainType Domain::type() const {
  // @@protoc_insertion_point(field_get:raltservice.Domain.type)
  return static_cast< ::raltservice::DomainType >(type_);
}
inline void Domain::set_type(::raltservice::DomainType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:raltservice.Domain.type)
}

// string domain_str = 2;
inline void Domain::clear_domain_str() {
  domain_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Domain::domain_str() const {
  // @@protoc_insertion_point(field_get:raltservice.Domain.domain_str)
  return domain_str_.GetNoArena();
}
inline void Domain::set_domain_str(const ::std::string& value) {
  
  domain_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.Domain.domain_str)
}
#if LANG_CXX11
inline void Domain::set_domain_str(::std::string&& value) {
  
  domain_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.Domain.domain_str)
}
#endif
inline void Domain::set_domain_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.Domain.domain_str)
}
inline void Domain::set_domain_str(const char* value, size_t size) {
  
  domain_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.Domain.domain_str)
}
inline ::std::string* Domain::mutable_domain_str() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.Domain.domain_str)
  return domain_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Domain::release_domain_str() {
  // @@protoc_insertion_point(field_release:raltservice.Domain.domain_str)
  
  return domain_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Domain::set_allocated_domain_str(::std::string* domain_str) {
  if (domain_str != NULL) {
    
  } else {
    
  }
  domain_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain_str);
  // @@protoc_insertion_point(field_set_allocated:raltservice.Domain.domain_str)
}

// string append_or_replace_str = 3;
inline void Domain::clear_append_or_replace_str() {
  append_or_replace_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Domain::append_or_replace_str() const {
  // @@protoc_insertion_point(field_get:raltservice.Domain.append_or_replace_str)
  return append_or_replace_str_.GetNoArena();
}
inline void Domain::set_append_or_replace_str(const ::std::string& value) {
  
  append_or_replace_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.Domain.append_or_replace_str)
}
#if LANG_CXX11
inline void Domain::set_append_or_replace_str(::std::string&& value) {
  
  append_or_replace_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.Domain.append_or_replace_str)
}
#endif
inline void Domain::set_append_or_replace_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  append_or_replace_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.Domain.append_or_replace_str)
}
inline void Domain::set_append_or_replace_str(const char* value, size_t size) {
  
  append_or_replace_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.Domain.append_or_replace_str)
}
inline ::std::string* Domain::mutable_append_or_replace_str() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.Domain.append_or_replace_str)
  return append_or_replace_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Domain::release_append_or_replace_str() {
  // @@protoc_insertion_point(field_release:raltservice.Domain.append_or_replace_str)
  
  return append_or_replace_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Domain::set_allocated_append_or_replace_str(::std::string* append_or_replace_str) {
  if (append_or_replace_str != NULL) {
    
  } else {
    
  }
  append_or_replace_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), append_or_replace_str);
  // @@protoc_insertion_point(field_set_allocated:raltservice.Domain.append_or_replace_str)
}

// string port = 4;
inline void Domain::clear_port() {
  port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Domain::port() const {
  // @@protoc_insertion_point(field_get:raltservice.Domain.port)
  return port_.GetNoArena();
}
inline void Domain::set_port(const ::std::string& value) {
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.Domain.port)
}
#if LANG_CXX11
inline void Domain::set_port(::std::string&& value) {
  
  port_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.Domain.port)
}
#endif
inline void Domain::set_port(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.Domain.port)
}
inline void Domain::set_port(const char* value, size_t size) {
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.Domain.port)
}
inline ::std::string* Domain::mutable_port() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.Domain.port)
  return port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Domain::release_port() {
  // @@protoc_insertion_point(field_release:raltservice.Domain.port)
  
  return port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Domain::set_allocated_port(::std::string* port) {
  if (port != NULL) {
    
  } else {
    
  }
  port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port);
  // @@protoc_insertion_point(field_set_allocated:raltservice.Domain.port)
}

// -------------------------------------------------------------------

// UpdateDomainRsp

// uint32 result = 1;
inline void UpdateDomainRsp::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 UpdateDomainRsp::result() const {
  // @@protoc_insertion_point(field_get:raltservice.UpdateDomainRsp.result)
  return result_;
}
inline void UpdateDomainRsp::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:raltservice.UpdateDomainRsp.result)
}

// -------------------------------------------------------------------

// GetDomainReq

// string domain_str = 1;
inline void GetDomainReq::clear_domain_str() {
  domain_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetDomainReq::domain_str() const {
  // @@protoc_insertion_point(field_get:raltservice.GetDomainReq.domain_str)
  return domain_str_.GetNoArena();
}
inline void GetDomainReq::set_domain_str(const ::std::string& value) {
  
  domain_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.GetDomainReq.domain_str)
}
#if LANG_CXX11
inline void GetDomainReq::set_domain_str(::std::string&& value) {
  
  domain_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.GetDomainReq.domain_str)
}
#endif
inline void GetDomainReq::set_domain_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.GetDomainReq.domain_str)
}
inline void GetDomainReq::set_domain_str(const char* value, size_t size) {
  
  domain_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.GetDomainReq.domain_str)
}
inline ::std::string* GetDomainReq::mutable_domain_str() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.GetDomainReq.domain_str)
  return domain_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetDomainReq::release_domain_str() {
  // @@protoc_insertion_point(field_release:raltservice.GetDomainReq.domain_str)
  
  return domain_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetDomainReq::set_allocated_domain_str(::std::string* domain_str) {
  if (domain_str != NULL) {
    
  } else {
    
  }
  domain_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain_str);
  // @@protoc_insertion_point(field_set_allocated:raltservice.GetDomainReq.domain_str)
}

// -------------------------------------------------------------------

// AddDomainRsp

// uint32 result = 1;
inline void AddDomainRsp::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 AddDomainRsp::result() const {
  // @@protoc_insertion_point(field_get:raltservice.AddDomainRsp.result)
  return result_;
}
inline void AddDomainRsp::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:raltservice.AddDomainRsp.result)
}

// -------------------------------------------------------------------

// DeleteDomainReq

// string domain_str = 1;
inline void DeleteDomainReq::clear_domain_str() {
  domain_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteDomainReq::domain_str() const {
  // @@protoc_insertion_point(field_get:raltservice.DeleteDomainReq.domain_str)
  return domain_str_.GetNoArena();
}
inline void DeleteDomainReq::set_domain_str(const ::std::string& value) {
  
  domain_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.DeleteDomainReq.domain_str)
}
#if LANG_CXX11
inline void DeleteDomainReq::set_domain_str(::std::string&& value) {
  
  domain_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.DeleteDomainReq.domain_str)
}
#endif
inline void DeleteDomainReq::set_domain_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.DeleteDomainReq.domain_str)
}
inline void DeleteDomainReq::set_domain_str(const char* value, size_t size) {
  
  domain_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.DeleteDomainReq.domain_str)
}
inline ::std::string* DeleteDomainReq::mutable_domain_str() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.DeleteDomainReq.domain_str)
  return domain_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteDomainReq::release_domain_str() {
  // @@protoc_insertion_point(field_release:raltservice.DeleteDomainReq.domain_str)
  
  return domain_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteDomainReq::set_allocated_domain_str(::std::string* domain_str) {
  if (domain_str != NULL) {
    
  } else {
    
  }
  domain_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain_str);
  // @@protoc_insertion_point(field_set_allocated:raltservice.DeleteDomainReq.domain_str)
}

// -------------------------------------------------------------------

// DeleteDomainRsp

// uint32 result = 1;
inline void DeleteDomainRsp::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 DeleteDomainRsp::result() const {
  // @@protoc_insertion_point(field_get:raltservice.DeleteDomainRsp.result)
  return result_;
}
inline void DeleteDomainRsp::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:raltservice.DeleteDomainRsp.result)
}

// -------------------------------------------------------------------

// GetMiscReq

// uint32 type = 1;
inline void GetMiscReq::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 GetMiscReq::type() const {
  // @@protoc_insertion_point(field_get:raltservice.GetMiscReq.type)
  return type_;
}
inline void GetMiscReq::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetMiscReq.type)
}

// -------------------------------------------------------------------

// GetMiscRsp

// .raltservice.MiscSwitch ralt_filter_type_default = 1;
inline void GetMiscRsp::clear_ralt_filter_type_default() {
  ralt_filter_type_default_ = 0;
}
inline ::raltservice::MiscSwitch GetMiscRsp::ralt_filter_type_default() const {
  // @@protoc_insertion_point(field_get:raltservice.GetMiscRsp.ralt_filter_type_default)
  return static_cast< ::raltservice::MiscSwitch >(ralt_filter_type_default_);
}
inline void GetMiscRsp::set_ralt_filter_type_default(::raltservice::MiscSwitch value) {
  
  ralt_filter_type_default_ = value;
  // @@protoc_insertion_point(field_set:raltservice.GetMiscRsp.ralt_filter_type_default)
}

// -------------------------------------------------------------------

// Misc

// .raltservice.MiscKey key = 1;
inline void Misc::clear_key() {
  key_ = 0;
}
inline ::raltservice::MiscKey Misc::key() const {
  // @@protoc_insertion_point(field_get:raltservice.Misc.key)
  return static_cast< ::raltservice::MiscKey >(key_);
}
inline void Misc::set_key(::raltservice::MiscKey value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:raltservice.Misc.key)
}

// .raltservice.MiscSwitch value = 2;
inline void Misc::clear_value() {
  value_ = 0;
}
inline ::raltservice::MiscSwitch Misc::value() const {
  // @@protoc_insertion_point(field_get:raltservice.Misc.value)
  return static_cast< ::raltservice::MiscSwitch >(value_);
}
inline void Misc::set_value(::raltservice::MiscSwitch value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:raltservice.Misc.value)
}

// -------------------------------------------------------------------

// ModMiscOpRsp

// uint32 result = 1;
inline void ModMiscOpRsp::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 ModMiscOpRsp::result() const {
  // @@protoc_insertion_point(field_get:raltservice.ModMiscOpRsp.result)
  return result_;
}
inline void ModMiscOpRsp::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:raltservice.ModMiscOpRsp.result)
}

// -------------------------------------------------------------------

// RaltStatusReq

// uint32 type = 1;
inline void RaltStatusReq::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 RaltStatusReq::type() const {
  // @@protoc_insertion_point(field_get:raltservice.RaltStatusReq.type)
  return type_;
}
inline void RaltStatusReq::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:raltservice.RaltStatusReq.type)
}

// -------------------------------------------------------------------

// RaltStatus

// string ip_addr = 1;
inline void RaltStatus::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RaltStatus::ip_addr() const {
  // @@protoc_insertion_point(field_get:raltservice.RaltStatus.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void RaltStatus::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.RaltStatus.ip_addr)
}
#if LANG_CXX11
inline void RaltStatus::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.RaltStatus.ip_addr)
}
#endif
inline void RaltStatus::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.RaltStatus.ip_addr)
}
inline void RaltStatus::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.RaltStatus.ip_addr)
}
inline ::std::string* RaltStatus::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.RaltStatus.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RaltStatus::release_ip_addr() {
  // @@protoc_insertion_point(field_release:raltservice.RaltStatus.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RaltStatus::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:raltservice.RaltStatus.ip_addr)
}

// uint32 status = 2;
inline void RaltStatus::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 RaltStatus::status() const {
  // @@protoc_insertion_point(field_get:raltservice.RaltStatus.status)
  return status_;
}
inline void RaltStatus::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:raltservice.RaltStatus.status)
}

// -------------------------------------------------------------------

// ExecCmdReq

// string ip_addr = 1;
inline void ExecCmdReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecCmdReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:raltservice.ExecCmdReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void ExecCmdReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raltservice.ExecCmdReq.ip_addr)
}
#if LANG_CXX11
inline void ExecCmdReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raltservice.ExecCmdReq.ip_addr)
}
#endif
inline void ExecCmdReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raltservice.ExecCmdReq.ip_addr)
}
inline void ExecCmdReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raltservice.ExecCmdReq.ip_addr)
}
inline ::std::string* ExecCmdReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:raltservice.ExecCmdReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecCmdReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:raltservice.ExecCmdReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecCmdReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:raltservice.ExecCmdReq.ip_addr)
}

// .raltservice.CommandType cmd = 2;
inline void ExecCmdReq::clear_cmd() {
  cmd_ = 0;
}
inline ::raltservice::CommandType ExecCmdReq::cmd() const {
  // @@protoc_insertion_point(field_get:raltservice.ExecCmdReq.cmd)
  return static_cast< ::raltservice::CommandType >(cmd_);
}
inline void ExecCmdReq::set_cmd(::raltservice::CommandType value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:raltservice.ExecCmdReq.cmd)
}

// -------------------------------------------------------------------

// ExecCmdRsp

// uint32 result = 1;
inline void ExecCmdRsp::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 ExecCmdRsp::result() const {
  // @@protoc_insertion_point(field_get:raltservice.ExecCmdRsp.result)
  return result_;
}
inline void ExecCmdRsp::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:raltservice.ExecCmdRsp.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raltservice

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::raltservice::RecordCfgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raltservice::RecordCfgType>() {
  return ::raltservice::RecordCfgType_descriptor();
}
template <> struct is_proto_enum< ::raltservice::DomainType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raltservice::DomainType>() {
  return ::raltservice::DomainType_descriptor();
}
template <> struct is_proto_enum< ::raltservice::MiscKey> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raltservice::MiscKey>() {
  return ::raltservice::MiscKey_descriptor();
}
template <> struct is_proto_enum< ::raltservice::MiscSwitch> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raltservice::MiscSwitch>() {
  return ::raltservice::MiscSwitch_descriptor();
}
template <> struct is_proto_enum< ::raltservice::CommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raltservice::CommandType>() {
  return ::raltservice::CommandType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ralt_2dservice_2eproto
