// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sys-info.proto

#ifndef PROTOBUF_sys_2dinfo_2eproto__INCLUDED
#define PROTOBUF_sys_2dinfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_sys_2dinfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[24];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsGetNameAndIpInfoReqImpl();
void InitDefaultsGetNameAndIpInfoReq();
void InitDefaultsGetNameAndIpInfoRspImpl();
void InitDefaultsGetNameAndIpInfoRsp();
void InitDefaultsGetDeviceInfoReqImpl();
void InitDefaultsGetDeviceInfoReq();
void InitDefaultsGetDeviceInfoRspImpl();
void InitDefaultsGetDeviceInfoRsp();
void InitDefaultsGetCpuUsageReqImpl();
void InitDefaultsGetCpuUsageReq();
void InitDefaultsGetCpuUsageRspImpl();
void InitDefaultsGetCpuUsageRsp();
void InitDefaultsGetCpuTempReqImpl();
void InitDefaultsGetCpuTempReq();
void InitDefaultsGetCpuTempRspImpl();
void InitDefaultsGetCpuTempRsp();
void InitDefaultsGetMemUsageReqImpl();
void InitDefaultsGetMemUsageReq();
void InitDefaultsGetMemUsageRspImpl();
void InitDefaultsGetMemUsageRsp();
void InitDefaultsGetNicInfoReqImpl();
void InitDefaultsGetNicInfoReq();
void InitDefaultsGetNicInfoRspImpl();
void InitDefaultsGetNicInfoRsp();
void InitDefaultsGetHostNameReqImpl();
void InitDefaultsGetHostNameReq();
void InitDefaultsGetHostNameRspImpl();
void InitDefaultsGetHostNameRsp();
void InitDefaultsGetIpInfoReqImpl();
void InitDefaultsGetIpInfoReq();
void InitDefaultsGetIpInfoRspImpl();
void InitDefaultsGetIpInfoRsp();
void InitDefaultsGetCpuModelReqImpl();
void InitDefaultsGetCpuModelReq();
void InitDefaultsGetCpuModelRspImpl();
void InitDefaultsGetCpuModelRsp();
void InitDefaultsGetCpuCoresReqImpl();
void InitDefaultsGetCpuCoresReq();
void InitDefaultsGetCpuCoresRspImpl();
void InitDefaultsGetCpuCoresRsp();
void InitDefaultsGetMemTotalReqImpl();
void InitDefaultsGetMemTotalReq();
void InitDefaultsGetMemTotalRspImpl();
void InitDefaultsGetMemTotalRsp();
void InitDefaultsGetEthCtrlInfoReqImpl();
void InitDefaultsGetEthCtrlInfoReq();
void InitDefaultsGetEthCtrlInfoRspImpl();
void InitDefaultsGetEthCtrlInfoRsp();
inline void InitDefaults() {
  InitDefaultsGetNameAndIpInfoReq();
  InitDefaultsGetNameAndIpInfoRsp();
  InitDefaultsGetDeviceInfoReq();
  InitDefaultsGetDeviceInfoRsp();
  InitDefaultsGetCpuUsageReq();
  InitDefaultsGetCpuUsageRsp();
  InitDefaultsGetCpuTempReq();
  InitDefaultsGetCpuTempRsp();
  InitDefaultsGetMemUsageReq();
  InitDefaultsGetMemUsageRsp();
  InitDefaultsGetNicInfoReq();
  InitDefaultsGetNicInfoRsp();
  InitDefaultsGetHostNameReq();
  InitDefaultsGetHostNameRsp();
  InitDefaultsGetIpInfoReq();
  InitDefaultsGetIpInfoRsp();
  InitDefaultsGetCpuModelReq();
  InitDefaultsGetCpuModelRsp();
  InitDefaultsGetCpuCoresReq();
  InitDefaultsGetCpuCoresRsp();
  InitDefaultsGetMemTotalReq();
  InitDefaultsGetMemTotalRsp();
  InitDefaultsGetEthCtrlInfoReq();
  InitDefaultsGetEthCtrlInfoRsp();
}
}  // namespace protobuf_sys_2dinfo_2eproto
namespace sysinfo {
class GetCpuCoresReq;
class GetCpuCoresReqDefaultTypeInternal;
extern GetCpuCoresReqDefaultTypeInternal _GetCpuCoresReq_default_instance_;
class GetCpuCoresRsp;
class GetCpuCoresRspDefaultTypeInternal;
extern GetCpuCoresRspDefaultTypeInternal _GetCpuCoresRsp_default_instance_;
class GetCpuModelReq;
class GetCpuModelReqDefaultTypeInternal;
extern GetCpuModelReqDefaultTypeInternal _GetCpuModelReq_default_instance_;
class GetCpuModelRsp;
class GetCpuModelRspDefaultTypeInternal;
extern GetCpuModelRspDefaultTypeInternal _GetCpuModelRsp_default_instance_;
class GetCpuTempReq;
class GetCpuTempReqDefaultTypeInternal;
extern GetCpuTempReqDefaultTypeInternal _GetCpuTempReq_default_instance_;
class GetCpuTempRsp;
class GetCpuTempRspDefaultTypeInternal;
extern GetCpuTempRspDefaultTypeInternal _GetCpuTempRsp_default_instance_;
class GetCpuUsageReq;
class GetCpuUsageReqDefaultTypeInternal;
extern GetCpuUsageReqDefaultTypeInternal _GetCpuUsageReq_default_instance_;
class GetCpuUsageRsp;
class GetCpuUsageRspDefaultTypeInternal;
extern GetCpuUsageRspDefaultTypeInternal _GetCpuUsageRsp_default_instance_;
class GetDeviceInfoReq;
class GetDeviceInfoReqDefaultTypeInternal;
extern GetDeviceInfoReqDefaultTypeInternal _GetDeviceInfoReq_default_instance_;
class GetDeviceInfoRsp;
class GetDeviceInfoRspDefaultTypeInternal;
extern GetDeviceInfoRspDefaultTypeInternal _GetDeviceInfoRsp_default_instance_;
class GetEthCtrlInfoReq;
class GetEthCtrlInfoReqDefaultTypeInternal;
extern GetEthCtrlInfoReqDefaultTypeInternal _GetEthCtrlInfoReq_default_instance_;
class GetEthCtrlInfoRsp;
class GetEthCtrlInfoRspDefaultTypeInternal;
extern GetEthCtrlInfoRspDefaultTypeInternal _GetEthCtrlInfoRsp_default_instance_;
class GetHostNameReq;
class GetHostNameReqDefaultTypeInternal;
extern GetHostNameReqDefaultTypeInternal _GetHostNameReq_default_instance_;
class GetHostNameRsp;
class GetHostNameRspDefaultTypeInternal;
extern GetHostNameRspDefaultTypeInternal _GetHostNameRsp_default_instance_;
class GetIpInfoReq;
class GetIpInfoReqDefaultTypeInternal;
extern GetIpInfoReqDefaultTypeInternal _GetIpInfoReq_default_instance_;
class GetIpInfoRsp;
class GetIpInfoRspDefaultTypeInternal;
extern GetIpInfoRspDefaultTypeInternal _GetIpInfoRsp_default_instance_;
class GetMemTotalReq;
class GetMemTotalReqDefaultTypeInternal;
extern GetMemTotalReqDefaultTypeInternal _GetMemTotalReq_default_instance_;
class GetMemTotalRsp;
class GetMemTotalRspDefaultTypeInternal;
extern GetMemTotalRspDefaultTypeInternal _GetMemTotalRsp_default_instance_;
class GetMemUsageReq;
class GetMemUsageReqDefaultTypeInternal;
extern GetMemUsageReqDefaultTypeInternal _GetMemUsageReq_default_instance_;
class GetMemUsageRsp;
class GetMemUsageRspDefaultTypeInternal;
extern GetMemUsageRspDefaultTypeInternal _GetMemUsageRsp_default_instance_;
class GetNameAndIpInfoReq;
class GetNameAndIpInfoReqDefaultTypeInternal;
extern GetNameAndIpInfoReqDefaultTypeInternal _GetNameAndIpInfoReq_default_instance_;
class GetNameAndIpInfoRsp;
class GetNameAndIpInfoRspDefaultTypeInternal;
extern GetNameAndIpInfoRspDefaultTypeInternal _GetNameAndIpInfoRsp_default_instance_;
class GetNicInfoReq;
class GetNicInfoReqDefaultTypeInternal;
extern GetNicInfoReqDefaultTypeInternal _GetNicInfoReq_default_instance_;
class GetNicInfoRsp;
class GetNicInfoRspDefaultTypeInternal;
extern GetNicInfoRspDefaultTypeInternal _GetNicInfoRsp_default_instance_;
}  // namespace sysinfo
namespace sysinfo {

// ===================================================================

class GetNameAndIpInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sysinfo.GetNameAndIpInfoReq) */ {
 public:
  GetNameAndIpInfoReq();
  virtual ~GetNameAndIpInfoReq();

  GetNameAndIpInfoReq(const GetNameAndIpInfoReq& from);

  inline GetNameAndIpInfoReq& operator=(const GetNameAndIpInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetNameAndIpInfoReq(GetNameAndIpInfoReq&& from) noexcept
    : GetNameAndIpInfoReq() {
    *this = ::std::move(from);
  }

  inline GetNameAndIpInfoReq& operator=(GetNameAndIpInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNameAndIpInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNameAndIpInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetNameAndIpInfoReq*>(
               &_GetNameAndIpInfoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GetNameAndIpInfoReq* other);
  friend void swap(GetNameAndIpInfoReq& a, GetNameAndIpInfoReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetNameAndIpInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetNameAndIpInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetNameAndIpInfoReq& from);
  void MergeFrom(const GetNameAndIpInfoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetNameAndIpInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // @@protoc_insertion_point(class_scope:sysinfo.GetNameAndIpInfoReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_sys_2dinfo_2eproto::TableStruct;
  friend void ::protobuf_sys_2dinfo_2eproto::InitDefaultsGetNameAndIpInfoReqImpl();
};
// -------------------------------------------------------------------

class GetNameAndIpInfoRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sysinfo.GetNameAndIpInfoRsp) */ {
 public:
  GetNameAndIpInfoRsp();
  virtual ~GetNameAndIpInfoRsp();

  GetNameAndIpInfoRsp(const GetNameAndIpInfoRsp& from);

  inline GetNameAndIpInfoRsp& operator=(const GetNameAndIpInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetNameAndIpInfoRsp(GetNameAndIpInfoRsp&& from) noexcept
    : GetNameAndIpInfoRsp() {
    *this = ::std::move(from);
  }

  inline GetNameAndIpInfoRsp& operator=(GetNameAndIpInfoRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNameAndIpInfoRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNameAndIpInfoRsp* internal_default_instance() {
    return reinterpret_cast<const GetNameAndIpInfoRsp*>(
               &_GetNameAndIpInfoRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(GetNameAndIpInfoRsp* other);
  friend void swap(GetNameAndIpInfoRsp& a, GetNameAndIpInfoRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetNameAndIpInfoRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetNameAndIpInfoRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetNameAndIpInfoRsp& from);
  void MergeFrom(const GetNameAndIpInfoRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetNameAndIpInfoRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host_name = 1;
  void clear_host_name();
  static const int kHostNameFieldNumber = 1;
  const ::std::string& host_name() const;
  void set_host_name(const ::std::string& value);
  #if LANG_CXX11
  void set_host_name(::std::string&& value);
  #endif
  void set_host_name(const char* value);
  void set_host_name(const char* value, size_t size);
  ::std::string* mutable_host_name();
  ::std::string* release_host_name();
  void set_allocated_host_name(::std::string* host_name);

  // string ip_info = 2;
  void clear_ip_info();
  static const int kIpInfoFieldNumber = 2;
  const ::std::string& ip_info() const;
  void set_ip_info(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_info(::std::string&& value);
  #endif
  void set_ip_info(const char* value);
  void set_ip_info(const char* value, size_t size);
  ::std::string* mutable_ip_info();
  ::std::string* release_ip_info();
  void set_allocated_ip_info(::std::string* ip_info);

  // @@protoc_insertion_point(class_scope:sysinfo.GetNameAndIpInfoRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_name_;
  ::google::protobuf::internal::ArenaStringPtr ip_info_;
  mutable int _cached_size_;
  friend struct ::protobuf_sys_2dinfo_2eproto::TableStruct;
  friend void ::protobuf_sys_2dinfo_2eproto::InitDefaultsGetNameAndIpInfoRspImpl();
};
// -------------------------------------------------------------------

class GetDeviceInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sysinfo.GetDeviceInfoReq) */ {
 public:
  GetDeviceInfoReq();
  virtual ~GetDeviceInfoReq();

  GetDeviceInfoReq(const GetDeviceInfoReq& from);

  inline GetDeviceInfoReq& operator=(const GetDeviceInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDeviceInfoReq(GetDeviceInfoReq&& from) noexcept
    : GetDeviceInfoReq() {
    *this = ::std::move(from);
  }

  inline GetDeviceInfoReq& operator=(GetDeviceInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDeviceInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeviceInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetDeviceInfoReq*>(
               &_GetDeviceInfoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(GetDeviceInfoReq* other);
  friend void swap(GetDeviceInfoReq& a, GetDeviceInfoReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetDeviceInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetDeviceInfoReq& from);
  void MergeFrom(const GetDeviceInfoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetDeviceInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // @@protoc_insertion_point(class_scope:sysinfo.GetDeviceInfoReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_sys_2dinfo_2eproto::TableStruct;
  friend void ::protobuf_sys_2dinfo_2eproto::InitDefaultsGetDeviceInfoReqImpl();
};
// -------------------------------------------------------------------

class GetDeviceInfoRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sysinfo.GetDeviceInfoRsp) */ {
 public:
  GetDeviceInfoRsp();
  virtual ~GetDeviceInfoRsp();

  GetDeviceInfoRsp(const GetDeviceInfoRsp& from);

  inline GetDeviceInfoRsp& operator=(const GetDeviceInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDeviceInfoRsp(GetDeviceInfoRsp&& from) noexcept
    : GetDeviceInfoRsp() {
    *this = ::std::move(from);
  }

  inline GetDeviceInfoRsp& operator=(GetDeviceInfoRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDeviceInfoRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeviceInfoRsp* internal_default_instance() {
    return reinterpret_cast<const GetDeviceInfoRsp*>(
               &_GetDeviceInfoRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(GetDeviceInfoRsp* other);
  friend void swap(GetDeviceInfoRsp& a, GetDeviceInfoRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceInfoRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetDeviceInfoRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetDeviceInfoRsp& from);
  void MergeFrom(const GetDeviceInfoRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetDeviceInfoRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cpu_model = 1;
  void clear_cpu_model();
  static const int kCpuModelFieldNumber = 1;
  const ::std::string& cpu_model() const;
  void set_cpu_model(const ::std::string& value);
  #if LANG_CXX11
  void set_cpu_model(::std::string&& value);
  #endif
  void set_cpu_model(const char* value);
  void set_cpu_model(const char* value, size_t size);
  ::std::string* mutable_cpu_model();
  ::std::string* release_cpu_model();
  void set_allocated_cpu_model(::std::string* cpu_model);

  // string cpu_cores = 2;
  void clear_cpu_cores();
  static const int kCpuCoresFieldNumber = 2;
  const ::std::string& cpu_cores() const;
  void set_cpu_cores(const ::std::string& value);
  #if LANG_CXX11
  void set_cpu_cores(::std::string&& value);
  #endif
  void set_cpu_cores(const char* value);
  void set_cpu_cores(const char* value, size_t size);
  ::std::string* mutable_cpu_cores();
  ::std::string* release_cpu_cores();
  void set_allocated_cpu_cores(::std::string* cpu_cores);

  // string mem_total = 3;
  void clear_mem_total();
  static const int kMemTotalFieldNumber = 3;
  const ::std::string& mem_total() const;
  void set_mem_total(const ::std::string& value);
  #if LANG_CXX11
  void set_mem_total(::std::string&& value);
  #endif
  void set_mem_total(const char* value);
  void set_mem_total(const char* value, size_t size);
  ::std::string* mutable_mem_total();
  ::std::string* release_mem_total();
  void set_allocated_mem_total(::std::string* mem_total);

  // string eth_ctrl_info = 4;
  void clear_eth_ctrl_info();
  static const int kEthCtrlInfoFieldNumber = 4;
  const ::std::string& eth_ctrl_info() const;
  void set_eth_ctrl_info(const ::std::string& value);
  #if LANG_CXX11
  void set_eth_ctrl_info(::std::string&& value);
  #endif
  void set_eth_ctrl_info(const char* value);
  void set_eth_ctrl_info(const char* value, size_t size);
  ::std::string* mutable_eth_ctrl_info();
  ::std::string* release_eth_ctrl_info();
  void set_allocated_eth_ctrl_info(::std::string* eth_ctrl_info);

  // @@protoc_insertion_point(class_scope:sysinfo.GetDeviceInfoRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cpu_model_;
  ::google::protobuf::internal::ArenaStringPtr cpu_cores_;
  ::google::protobuf::internal::ArenaStringPtr mem_total_;
  ::google::protobuf::internal::ArenaStringPtr eth_ctrl_info_;
  mutable int _cached_size_;
  friend struct ::protobuf_sys_2dinfo_2eproto::TableStruct;
  friend void ::protobuf_sys_2dinfo_2eproto::InitDefaultsGetDeviceInfoRspImpl();
};
// -------------------------------------------------------------------

class GetCpuUsageReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sysinfo.GetCpuUsageReq) */ {
 public:
  GetCpuUsageReq();
  virtual ~GetCpuUsageReq();

  GetCpuUsageReq(const GetCpuUsageReq& from);

  inline GetCpuUsageReq& operator=(const GetCpuUsageReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCpuUsageReq(GetCpuUsageReq&& from) noexcept
    : GetCpuUsageReq() {
    *this = ::std::move(from);
  }

  inline GetCpuUsageReq& operator=(GetCpuUsageReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCpuUsageReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCpuUsageReq* internal_default_instance() {
    return reinterpret_cast<const GetCpuUsageReq*>(
               &_GetCpuUsageReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(GetCpuUsageReq* other);
  friend void swap(GetCpuUsageReq& a, GetCpuUsageReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCpuUsageReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetCpuUsageReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetCpuUsageReq& from);
  void MergeFrom(const GetCpuUsageReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetCpuUsageReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // @@protoc_insertion_point(class_scope:sysinfo.GetCpuUsageReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_sys_2dinfo_2eproto::TableStruct;
  friend void ::protobuf_sys_2dinfo_2eproto::InitDefaultsGetCpuUsageReqImpl();
};
// -------------------------------------------------------------------

class GetCpuUsageRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sysinfo.GetCpuUsageRsp) */ {
 public:
  GetCpuUsageRsp();
  virtual ~GetCpuUsageRsp();

  GetCpuUsageRsp(const GetCpuUsageRsp& from);

  inline GetCpuUsageRsp& operator=(const GetCpuUsageRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCpuUsageRsp(GetCpuUsageRsp&& from) noexcept
    : GetCpuUsageRsp() {
    *this = ::std::move(from);
  }

  inline GetCpuUsageRsp& operator=(GetCpuUsageRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCpuUsageRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCpuUsageRsp* internal_default_instance() {
    return reinterpret_cast<const GetCpuUsageRsp*>(
               &_GetCpuUsageRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(GetCpuUsageRsp* other);
  friend void swap(GetCpuUsageRsp& a, GetCpuUsageRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCpuUsageRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetCpuUsageRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetCpuUsageRsp& from);
  void MergeFrom(const GetCpuUsageRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetCpuUsageRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cpu_usage = 1;
  void clear_cpu_usage();
  static const int kCpuUsageFieldNumber = 1;
  const ::std::string& cpu_usage() const;
  void set_cpu_usage(const ::std::string& value);
  #if LANG_CXX11
  void set_cpu_usage(::std::string&& value);
  #endif
  void set_cpu_usage(const char* value);
  void set_cpu_usage(const char* value, size_t size);
  ::std::string* mutable_cpu_usage();
  ::std::string* release_cpu_usage();
  void set_allocated_cpu_usage(::std::string* cpu_usage);

  // @@protoc_insertion_point(class_scope:sysinfo.GetCpuUsageRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cpu_usage_;
  mutable int _cached_size_;
  friend struct ::protobuf_sys_2dinfo_2eproto::TableStruct;
  friend void ::protobuf_sys_2dinfo_2eproto::InitDefaultsGetCpuUsageRspImpl();
};
// -------------------------------------------------------------------

class GetCpuTempReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sysinfo.GetCpuTempReq) */ {
 public:
  GetCpuTempReq();
  virtual ~GetCpuTempReq();

  GetCpuTempReq(const GetCpuTempReq& from);

  inline GetCpuTempReq& operator=(const GetCpuTempReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCpuTempReq(GetCpuTempReq&& from) noexcept
    : GetCpuTempReq() {
    *this = ::std::move(from);
  }

  inline GetCpuTempReq& operator=(GetCpuTempReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCpuTempReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCpuTempReq* internal_default_instance() {
    return reinterpret_cast<const GetCpuTempReq*>(
               &_GetCpuTempReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(GetCpuTempReq* other);
  friend void swap(GetCpuTempReq& a, GetCpuTempReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCpuTempReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetCpuTempReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetCpuTempReq& from);
  void MergeFrom(const GetCpuTempReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetCpuTempReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // @@protoc_insertion_point(class_scope:sysinfo.GetCpuTempReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_sys_2dinfo_2eproto::TableStruct;
  friend void ::protobuf_sys_2dinfo_2eproto::InitDefaultsGetCpuTempReqImpl();
};
// -------------------------------------------------------------------

class GetCpuTempRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sysinfo.GetCpuTempRsp) */ {
 public:
  GetCpuTempRsp();
  virtual ~GetCpuTempRsp();

  GetCpuTempRsp(const GetCpuTempRsp& from);

  inline GetCpuTempRsp& operator=(const GetCpuTempRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCpuTempRsp(GetCpuTempRsp&& from) noexcept
    : GetCpuTempRsp() {
    *this = ::std::move(from);
  }

  inline GetCpuTempRsp& operator=(GetCpuTempRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCpuTempRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCpuTempRsp* internal_default_instance() {
    return reinterpret_cast<const GetCpuTempRsp*>(
               &_GetCpuTempRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(GetCpuTempRsp* other);
  friend void swap(GetCpuTempRsp& a, GetCpuTempRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCpuTempRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetCpuTempRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetCpuTempRsp& from);
  void MergeFrom(const GetCpuTempRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetCpuTempRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cpu_temp = 1;
  void clear_cpu_temp();
  static const int kCpuTempFieldNumber = 1;
  const ::std::string& cpu_temp() const;
  void set_cpu_temp(const ::std::string& value);
  #if LANG_CXX11
  void set_cpu_temp(::std::string&& value);
  #endif
  void set_cpu_temp(const char* value);
  void set_cpu_temp(const char* value, size_t size);
  ::std::string* mutable_cpu_temp();
  ::std::string* release_cpu_temp();
  void set_allocated_cpu_temp(::std::string* cpu_temp);

  // @@protoc_insertion_point(class_scope:sysinfo.GetCpuTempRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cpu_temp_;
  mutable int _cached_size_;
  friend struct ::protobuf_sys_2dinfo_2eproto::TableStruct;
  friend void ::protobuf_sys_2dinfo_2eproto::InitDefaultsGetCpuTempRspImpl();
};
// -------------------------------------------------------------------

class GetMemUsageReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sysinfo.GetMemUsageReq) */ {
 public:
  GetMemUsageReq();
  virtual ~GetMemUsageReq();

  GetMemUsageReq(const GetMemUsageReq& from);

  inline GetMemUsageReq& operator=(const GetMemUsageReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMemUsageReq(GetMemUsageReq&& from) noexcept
    : GetMemUsageReq() {
    *this = ::std::move(from);
  }

  inline GetMemUsageReq& operator=(GetMemUsageReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMemUsageReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMemUsageReq* internal_default_instance() {
    return reinterpret_cast<const GetMemUsageReq*>(
               &_GetMemUsageReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(GetMemUsageReq* other);
  friend void swap(GetMemUsageReq& a, GetMemUsageReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMemUsageReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetMemUsageReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetMemUsageReq& from);
  void MergeFrom(const GetMemUsageReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetMemUsageReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // @@protoc_insertion_point(class_scope:sysinfo.GetMemUsageReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_sys_2dinfo_2eproto::TableStruct;
  friend void ::protobuf_sys_2dinfo_2eproto::InitDefaultsGetMemUsageReqImpl();
};
// -------------------------------------------------------------------

class GetMemUsageRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sysinfo.GetMemUsageRsp) */ {
 public:
  GetMemUsageRsp();
  virtual ~GetMemUsageRsp();

  GetMemUsageRsp(const GetMemUsageRsp& from);

  inline GetMemUsageRsp& operator=(const GetMemUsageRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMemUsageRsp(GetMemUsageRsp&& from) noexcept
    : GetMemUsageRsp() {
    *this = ::std::move(from);
  }

  inline GetMemUsageRsp& operator=(GetMemUsageRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMemUsageRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMemUsageRsp* internal_default_instance() {
    return reinterpret_cast<const GetMemUsageRsp*>(
               &_GetMemUsageRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(GetMemUsageRsp* other);
  friend void swap(GetMemUsageRsp& a, GetMemUsageRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMemUsageRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetMemUsageRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetMemUsageRsp& from);
  void MergeFrom(const GetMemUsageRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetMemUsageRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string mem_usage = 1;
  void clear_mem_usage();
  static const int kMemUsageFieldNumber = 1;
  const ::std::string& mem_usage() const;
  void set_mem_usage(const ::std::string& value);
  #if LANG_CXX11
  void set_mem_usage(::std::string&& value);
  #endif
  void set_mem_usage(const char* value);
  void set_mem_usage(const char* value, size_t size);
  ::std::string* mutable_mem_usage();
  ::std::string* release_mem_usage();
  void set_allocated_mem_usage(::std::string* mem_usage);

  // @@protoc_insertion_point(class_scope:sysinfo.GetMemUsageRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mem_usage_;
  mutable int _cached_size_;
  friend struct ::protobuf_sys_2dinfo_2eproto::TableStruct;
  friend void ::protobuf_sys_2dinfo_2eproto::InitDefaultsGetMemUsageRspImpl();
};
// -------------------------------------------------------------------

class GetNicInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sysinfo.GetNicInfoReq) */ {
 public:
  GetNicInfoReq();
  virtual ~GetNicInfoReq();

  GetNicInfoReq(const GetNicInfoReq& from);

  inline GetNicInfoReq& operator=(const GetNicInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetNicInfoReq(GetNicInfoReq&& from) noexcept
    : GetNicInfoReq() {
    *this = ::std::move(from);
  }

  inline GetNicInfoReq& operator=(GetNicInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNicInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNicInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetNicInfoReq*>(
               &_GetNicInfoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(GetNicInfoReq* other);
  friend void swap(GetNicInfoReq& a, GetNicInfoReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetNicInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetNicInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetNicInfoReq& from);
  void MergeFrom(const GetNicInfoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetNicInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // bool is_depend_os_version = 2;
  void clear_is_depend_os_version();
  static const int kIsDependOsVersionFieldNumber = 2;
  bool is_depend_os_version() const;
  void set_is_depend_os_version(bool value);

  // @@protoc_insertion_point(class_scope:sysinfo.GetNicInfoReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  bool is_depend_os_version_;
  mutable int _cached_size_;
  friend struct ::protobuf_sys_2dinfo_2eproto::TableStruct;
  friend void ::protobuf_sys_2dinfo_2eproto::InitDefaultsGetNicInfoReqImpl();
};
// -------------------------------------------------------------------

class GetNicInfoRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sysinfo.GetNicInfoRsp) */ {
 public:
  GetNicInfoRsp();
  virtual ~GetNicInfoRsp();

  GetNicInfoRsp(const GetNicInfoRsp& from);

  inline GetNicInfoRsp& operator=(const GetNicInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetNicInfoRsp(GetNicInfoRsp&& from) noexcept
    : GetNicInfoRsp() {
    *this = ::std::move(from);
  }

  inline GetNicInfoRsp& operator=(GetNicInfoRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNicInfoRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNicInfoRsp* internal_default_instance() {
    return reinterpret_cast<const GetNicInfoRsp*>(
               &_GetNicInfoRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(GetNicInfoRsp* other);
  friend void swap(GetNicInfoRsp& a, GetNicInfoRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetNicInfoRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetNicInfoRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetNicInfoRsp& from);
  void MergeFrom(const GetNicInfoRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetNicInfoRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string os_version = 1;
  void clear_os_version();
  static const int kOsVersionFieldNumber = 1;
  const ::std::string& os_version() const;
  void set_os_version(const ::std::string& value);
  #if LANG_CXX11
  void set_os_version(::std::string&& value);
  #endif
  void set_os_version(const char* value);
  void set_os_version(const char* value, size_t size);
  ::std::string* mutable_os_version();
  ::std::string* release_os_version();
  void set_allocated_os_version(::std::string* os_version);

  // string nic_info = 2;
  void clear_nic_info();
  static const int kNicInfoFieldNumber = 2;
  const ::std::string& nic_info() const;
  void set_nic_info(const ::std::string& value);
  #if LANG_CXX11
  void set_nic_info(::std::string&& value);
  #endif
  void set_nic_info(const char* value);
  void set_nic_info(const char* value, size_t size);
  ::std::string* mutable_nic_info();
  ::std::string* release_nic_info();
  void set_allocated_nic_info(::std::string* nic_info);

  // @@protoc_insertion_point(class_scope:sysinfo.GetNicInfoRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr os_version_;
  ::google::protobuf::internal::ArenaStringPtr nic_info_;
  mutable int _cached_size_;
  friend struct ::protobuf_sys_2dinfo_2eproto::TableStruct;
  friend void ::protobuf_sys_2dinfo_2eproto::InitDefaultsGetNicInfoRspImpl();
};
// -------------------------------------------------------------------

class GetHostNameReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sysinfo.GetHostNameReq) */ {
 public:
  GetHostNameReq();
  virtual ~GetHostNameReq();

  GetHostNameReq(const GetHostNameReq& from);

  inline GetHostNameReq& operator=(const GetHostNameReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetHostNameReq(GetHostNameReq&& from) noexcept
    : GetHostNameReq() {
    *this = ::std::move(from);
  }

  inline GetHostNameReq& operator=(GetHostNameReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetHostNameReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHostNameReq* internal_default_instance() {
    return reinterpret_cast<const GetHostNameReq*>(
               &_GetHostNameReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(GetHostNameReq* other);
  friend void swap(GetHostNameReq& a, GetHostNameReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetHostNameReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetHostNameReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetHostNameReq& from);
  void MergeFrom(const GetHostNameReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetHostNameReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // @@protoc_insertion_point(class_scope:sysinfo.GetHostNameReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_sys_2dinfo_2eproto::TableStruct;
  friend void ::protobuf_sys_2dinfo_2eproto::InitDefaultsGetHostNameReqImpl();
};
// -------------------------------------------------------------------

class GetHostNameRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sysinfo.GetHostNameRsp) */ {
 public:
  GetHostNameRsp();
  virtual ~GetHostNameRsp();

  GetHostNameRsp(const GetHostNameRsp& from);

  inline GetHostNameRsp& operator=(const GetHostNameRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetHostNameRsp(GetHostNameRsp&& from) noexcept
    : GetHostNameRsp() {
    *this = ::std::move(from);
  }

  inline GetHostNameRsp& operator=(GetHostNameRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetHostNameRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHostNameRsp* internal_default_instance() {
    return reinterpret_cast<const GetHostNameRsp*>(
               &_GetHostNameRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(GetHostNameRsp* other);
  friend void swap(GetHostNameRsp& a, GetHostNameRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetHostNameRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetHostNameRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetHostNameRsp& from);
  void MergeFrom(const GetHostNameRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetHostNameRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host_name = 1;
  void clear_host_name();
  static const int kHostNameFieldNumber = 1;
  const ::std::string& host_name() const;
  void set_host_name(const ::std::string& value);
  #if LANG_CXX11
  void set_host_name(::std::string&& value);
  #endif
  void set_host_name(const char* value);
  void set_host_name(const char* value, size_t size);
  ::std::string* mutable_host_name();
  ::std::string* release_host_name();
  void set_allocated_host_name(::std::string* host_name);

  // @@protoc_insertion_point(class_scope:sysinfo.GetHostNameRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_sys_2dinfo_2eproto::TableStruct;
  friend void ::protobuf_sys_2dinfo_2eproto::InitDefaultsGetHostNameRspImpl();
};
// -------------------------------------------------------------------

class GetIpInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sysinfo.GetIpInfoReq) */ {
 public:
  GetIpInfoReq();
  virtual ~GetIpInfoReq();

  GetIpInfoReq(const GetIpInfoReq& from);

  inline GetIpInfoReq& operator=(const GetIpInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetIpInfoReq(GetIpInfoReq&& from) noexcept
    : GetIpInfoReq() {
    *this = ::std::move(from);
  }

  inline GetIpInfoReq& operator=(GetIpInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetIpInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIpInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetIpInfoReq*>(
               &_GetIpInfoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(GetIpInfoReq* other);
  friend void swap(GetIpInfoReq& a, GetIpInfoReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetIpInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetIpInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetIpInfoReq& from);
  void MergeFrom(const GetIpInfoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetIpInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // @@protoc_insertion_point(class_scope:sysinfo.GetIpInfoReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_sys_2dinfo_2eproto::TableStruct;
  friend void ::protobuf_sys_2dinfo_2eproto::InitDefaultsGetIpInfoReqImpl();
};
// -------------------------------------------------------------------

class GetIpInfoRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sysinfo.GetIpInfoRsp) */ {
 public:
  GetIpInfoRsp();
  virtual ~GetIpInfoRsp();

  GetIpInfoRsp(const GetIpInfoRsp& from);

  inline GetIpInfoRsp& operator=(const GetIpInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetIpInfoRsp(GetIpInfoRsp&& from) noexcept
    : GetIpInfoRsp() {
    *this = ::std::move(from);
  }

  inline GetIpInfoRsp& operator=(GetIpInfoRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetIpInfoRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIpInfoRsp* internal_default_instance() {
    return reinterpret_cast<const GetIpInfoRsp*>(
               &_GetIpInfoRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(GetIpInfoRsp* other);
  friend void swap(GetIpInfoRsp& a, GetIpInfoRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetIpInfoRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetIpInfoRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetIpInfoRsp& from);
  void MergeFrom(const GetIpInfoRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetIpInfoRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_info = 1;
  void clear_ip_info();
  static const int kIpInfoFieldNumber = 1;
  const ::std::string& ip_info() const;
  void set_ip_info(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_info(::std::string&& value);
  #endif
  void set_ip_info(const char* value);
  void set_ip_info(const char* value, size_t size);
  ::std::string* mutable_ip_info();
  ::std::string* release_ip_info();
  void set_allocated_ip_info(::std::string* ip_info);

  // @@protoc_insertion_point(class_scope:sysinfo.GetIpInfoRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_info_;
  mutable int _cached_size_;
  friend struct ::protobuf_sys_2dinfo_2eproto::TableStruct;
  friend void ::protobuf_sys_2dinfo_2eproto::InitDefaultsGetIpInfoRspImpl();
};
// -------------------------------------------------------------------

class GetCpuModelReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sysinfo.GetCpuModelReq) */ {
 public:
  GetCpuModelReq();
  virtual ~GetCpuModelReq();

  GetCpuModelReq(const GetCpuModelReq& from);

  inline GetCpuModelReq& operator=(const GetCpuModelReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCpuModelReq(GetCpuModelReq&& from) noexcept
    : GetCpuModelReq() {
    *this = ::std::move(from);
  }

  inline GetCpuModelReq& operator=(GetCpuModelReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCpuModelReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCpuModelReq* internal_default_instance() {
    return reinterpret_cast<const GetCpuModelReq*>(
               &_GetCpuModelReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(GetCpuModelReq* other);
  friend void swap(GetCpuModelReq& a, GetCpuModelReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCpuModelReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetCpuModelReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetCpuModelReq& from);
  void MergeFrom(const GetCpuModelReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetCpuModelReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // @@protoc_insertion_point(class_scope:sysinfo.GetCpuModelReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_sys_2dinfo_2eproto::TableStruct;
  friend void ::protobuf_sys_2dinfo_2eproto::InitDefaultsGetCpuModelReqImpl();
};
// -------------------------------------------------------------------

class GetCpuModelRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sysinfo.GetCpuModelRsp) */ {
 public:
  GetCpuModelRsp();
  virtual ~GetCpuModelRsp();

  GetCpuModelRsp(const GetCpuModelRsp& from);

  inline GetCpuModelRsp& operator=(const GetCpuModelRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCpuModelRsp(GetCpuModelRsp&& from) noexcept
    : GetCpuModelRsp() {
    *this = ::std::move(from);
  }

  inline GetCpuModelRsp& operator=(GetCpuModelRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCpuModelRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCpuModelRsp* internal_default_instance() {
    return reinterpret_cast<const GetCpuModelRsp*>(
               &_GetCpuModelRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(GetCpuModelRsp* other);
  friend void swap(GetCpuModelRsp& a, GetCpuModelRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCpuModelRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetCpuModelRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetCpuModelRsp& from);
  void MergeFrom(const GetCpuModelRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetCpuModelRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cpu_model = 1;
  void clear_cpu_model();
  static const int kCpuModelFieldNumber = 1;
  const ::std::string& cpu_model() const;
  void set_cpu_model(const ::std::string& value);
  #if LANG_CXX11
  void set_cpu_model(::std::string&& value);
  #endif
  void set_cpu_model(const char* value);
  void set_cpu_model(const char* value, size_t size);
  ::std::string* mutable_cpu_model();
  ::std::string* release_cpu_model();
  void set_allocated_cpu_model(::std::string* cpu_model);

  // @@protoc_insertion_point(class_scope:sysinfo.GetCpuModelRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cpu_model_;
  mutable int _cached_size_;
  friend struct ::protobuf_sys_2dinfo_2eproto::TableStruct;
  friend void ::protobuf_sys_2dinfo_2eproto::InitDefaultsGetCpuModelRspImpl();
};
// -------------------------------------------------------------------

class GetCpuCoresReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sysinfo.GetCpuCoresReq) */ {
 public:
  GetCpuCoresReq();
  virtual ~GetCpuCoresReq();

  GetCpuCoresReq(const GetCpuCoresReq& from);

  inline GetCpuCoresReq& operator=(const GetCpuCoresReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCpuCoresReq(GetCpuCoresReq&& from) noexcept
    : GetCpuCoresReq() {
    *this = ::std::move(from);
  }

  inline GetCpuCoresReq& operator=(GetCpuCoresReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCpuCoresReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCpuCoresReq* internal_default_instance() {
    return reinterpret_cast<const GetCpuCoresReq*>(
               &_GetCpuCoresReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(GetCpuCoresReq* other);
  friend void swap(GetCpuCoresReq& a, GetCpuCoresReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCpuCoresReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetCpuCoresReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetCpuCoresReq& from);
  void MergeFrom(const GetCpuCoresReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetCpuCoresReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // @@protoc_insertion_point(class_scope:sysinfo.GetCpuCoresReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_sys_2dinfo_2eproto::TableStruct;
  friend void ::protobuf_sys_2dinfo_2eproto::InitDefaultsGetCpuCoresReqImpl();
};
// -------------------------------------------------------------------

class GetCpuCoresRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sysinfo.GetCpuCoresRsp) */ {
 public:
  GetCpuCoresRsp();
  virtual ~GetCpuCoresRsp();

  GetCpuCoresRsp(const GetCpuCoresRsp& from);

  inline GetCpuCoresRsp& operator=(const GetCpuCoresRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCpuCoresRsp(GetCpuCoresRsp&& from) noexcept
    : GetCpuCoresRsp() {
    *this = ::std::move(from);
  }

  inline GetCpuCoresRsp& operator=(GetCpuCoresRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCpuCoresRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCpuCoresRsp* internal_default_instance() {
    return reinterpret_cast<const GetCpuCoresRsp*>(
               &_GetCpuCoresRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(GetCpuCoresRsp* other);
  friend void swap(GetCpuCoresRsp& a, GetCpuCoresRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCpuCoresRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetCpuCoresRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetCpuCoresRsp& from);
  void MergeFrom(const GetCpuCoresRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetCpuCoresRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cpu_cores = 1;
  void clear_cpu_cores();
  static const int kCpuCoresFieldNumber = 1;
  const ::std::string& cpu_cores() const;
  void set_cpu_cores(const ::std::string& value);
  #if LANG_CXX11
  void set_cpu_cores(::std::string&& value);
  #endif
  void set_cpu_cores(const char* value);
  void set_cpu_cores(const char* value, size_t size);
  ::std::string* mutable_cpu_cores();
  ::std::string* release_cpu_cores();
  void set_allocated_cpu_cores(::std::string* cpu_cores);

  // @@protoc_insertion_point(class_scope:sysinfo.GetCpuCoresRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cpu_cores_;
  mutable int _cached_size_;
  friend struct ::protobuf_sys_2dinfo_2eproto::TableStruct;
  friend void ::protobuf_sys_2dinfo_2eproto::InitDefaultsGetCpuCoresRspImpl();
};
// -------------------------------------------------------------------

class GetMemTotalReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sysinfo.GetMemTotalReq) */ {
 public:
  GetMemTotalReq();
  virtual ~GetMemTotalReq();

  GetMemTotalReq(const GetMemTotalReq& from);

  inline GetMemTotalReq& operator=(const GetMemTotalReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMemTotalReq(GetMemTotalReq&& from) noexcept
    : GetMemTotalReq() {
    *this = ::std::move(from);
  }

  inline GetMemTotalReq& operator=(GetMemTotalReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMemTotalReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMemTotalReq* internal_default_instance() {
    return reinterpret_cast<const GetMemTotalReq*>(
               &_GetMemTotalReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(GetMemTotalReq* other);
  friend void swap(GetMemTotalReq& a, GetMemTotalReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMemTotalReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetMemTotalReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetMemTotalReq& from);
  void MergeFrom(const GetMemTotalReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetMemTotalReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // @@protoc_insertion_point(class_scope:sysinfo.GetMemTotalReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_sys_2dinfo_2eproto::TableStruct;
  friend void ::protobuf_sys_2dinfo_2eproto::InitDefaultsGetMemTotalReqImpl();
};
// -------------------------------------------------------------------

class GetMemTotalRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sysinfo.GetMemTotalRsp) */ {
 public:
  GetMemTotalRsp();
  virtual ~GetMemTotalRsp();

  GetMemTotalRsp(const GetMemTotalRsp& from);

  inline GetMemTotalRsp& operator=(const GetMemTotalRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMemTotalRsp(GetMemTotalRsp&& from) noexcept
    : GetMemTotalRsp() {
    *this = ::std::move(from);
  }

  inline GetMemTotalRsp& operator=(GetMemTotalRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMemTotalRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMemTotalRsp* internal_default_instance() {
    return reinterpret_cast<const GetMemTotalRsp*>(
               &_GetMemTotalRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(GetMemTotalRsp* other);
  friend void swap(GetMemTotalRsp& a, GetMemTotalRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMemTotalRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetMemTotalRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetMemTotalRsp& from);
  void MergeFrom(const GetMemTotalRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetMemTotalRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string mem_total = 1;
  void clear_mem_total();
  static const int kMemTotalFieldNumber = 1;
  const ::std::string& mem_total() const;
  void set_mem_total(const ::std::string& value);
  #if LANG_CXX11
  void set_mem_total(::std::string&& value);
  #endif
  void set_mem_total(const char* value);
  void set_mem_total(const char* value, size_t size);
  ::std::string* mutable_mem_total();
  ::std::string* release_mem_total();
  void set_allocated_mem_total(::std::string* mem_total);

  // @@protoc_insertion_point(class_scope:sysinfo.GetMemTotalRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mem_total_;
  mutable int _cached_size_;
  friend struct ::protobuf_sys_2dinfo_2eproto::TableStruct;
  friend void ::protobuf_sys_2dinfo_2eproto::InitDefaultsGetMemTotalRspImpl();
};
// -------------------------------------------------------------------

class GetEthCtrlInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sysinfo.GetEthCtrlInfoReq) */ {
 public:
  GetEthCtrlInfoReq();
  virtual ~GetEthCtrlInfoReq();

  GetEthCtrlInfoReq(const GetEthCtrlInfoReq& from);

  inline GetEthCtrlInfoReq& operator=(const GetEthCtrlInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetEthCtrlInfoReq(GetEthCtrlInfoReq&& from) noexcept
    : GetEthCtrlInfoReq() {
    *this = ::std::move(from);
  }

  inline GetEthCtrlInfoReq& operator=(GetEthCtrlInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetEthCtrlInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEthCtrlInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetEthCtrlInfoReq*>(
               &_GetEthCtrlInfoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(GetEthCtrlInfoReq* other);
  friend void swap(GetEthCtrlInfoReq& a, GetEthCtrlInfoReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetEthCtrlInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetEthCtrlInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetEthCtrlInfoReq& from);
  void MergeFrom(const GetEthCtrlInfoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetEthCtrlInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip_addr = 1;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 1;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // @@protoc_insertion_point(class_scope:sysinfo.GetEthCtrlInfoReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_sys_2dinfo_2eproto::TableStruct;
  friend void ::protobuf_sys_2dinfo_2eproto::InitDefaultsGetEthCtrlInfoReqImpl();
};
// -------------------------------------------------------------------

class GetEthCtrlInfoRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sysinfo.GetEthCtrlInfoRsp) */ {
 public:
  GetEthCtrlInfoRsp();
  virtual ~GetEthCtrlInfoRsp();

  GetEthCtrlInfoRsp(const GetEthCtrlInfoRsp& from);

  inline GetEthCtrlInfoRsp& operator=(const GetEthCtrlInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetEthCtrlInfoRsp(GetEthCtrlInfoRsp&& from) noexcept
    : GetEthCtrlInfoRsp() {
    *this = ::std::move(from);
  }

  inline GetEthCtrlInfoRsp& operator=(GetEthCtrlInfoRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetEthCtrlInfoRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEthCtrlInfoRsp* internal_default_instance() {
    return reinterpret_cast<const GetEthCtrlInfoRsp*>(
               &_GetEthCtrlInfoRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(GetEthCtrlInfoRsp* other);
  friend void swap(GetEthCtrlInfoRsp& a, GetEthCtrlInfoRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetEthCtrlInfoRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetEthCtrlInfoRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetEthCtrlInfoRsp& from);
  void MergeFrom(const GetEthCtrlInfoRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetEthCtrlInfoRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string eth_ctrl_info = 1;
  void clear_eth_ctrl_info();
  static const int kEthCtrlInfoFieldNumber = 1;
  const ::std::string& eth_ctrl_info() const;
  void set_eth_ctrl_info(const ::std::string& value);
  #if LANG_CXX11
  void set_eth_ctrl_info(::std::string&& value);
  #endif
  void set_eth_ctrl_info(const char* value);
  void set_eth_ctrl_info(const char* value, size_t size);
  ::std::string* mutable_eth_ctrl_info();
  ::std::string* release_eth_ctrl_info();
  void set_allocated_eth_ctrl_info(::std::string* eth_ctrl_info);

  // @@protoc_insertion_point(class_scope:sysinfo.GetEthCtrlInfoRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr eth_ctrl_info_;
  mutable int _cached_size_;
  friend struct ::protobuf_sys_2dinfo_2eproto::TableStruct;
  friend void ::protobuf_sys_2dinfo_2eproto::InitDefaultsGetEthCtrlInfoRspImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetNameAndIpInfoReq

// string ip_addr = 1;
inline void GetNameAndIpInfoReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNameAndIpInfoReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetNameAndIpInfoReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void GetNameAndIpInfoReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetNameAndIpInfoReq.ip_addr)
}
#if LANG_CXX11
inline void GetNameAndIpInfoReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetNameAndIpInfoReq.ip_addr)
}
#endif
inline void GetNameAndIpInfoReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetNameAndIpInfoReq.ip_addr)
}
inline void GetNameAndIpInfoReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetNameAndIpInfoReq.ip_addr)
}
inline ::std::string* GetNameAndIpInfoReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetNameAndIpInfoReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNameAndIpInfoReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:sysinfo.GetNameAndIpInfoReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNameAndIpInfoReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetNameAndIpInfoReq.ip_addr)
}

// -------------------------------------------------------------------

// GetNameAndIpInfoRsp

// string host_name = 1;
inline void GetNameAndIpInfoRsp::clear_host_name() {
  host_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNameAndIpInfoRsp::host_name() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetNameAndIpInfoRsp.host_name)
  return host_name_.GetNoArena();
}
inline void GetNameAndIpInfoRsp::set_host_name(const ::std::string& value) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetNameAndIpInfoRsp.host_name)
}
#if LANG_CXX11
inline void GetNameAndIpInfoRsp::set_host_name(::std::string&& value) {
  
  host_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetNameAndIpInfoRsp.host_name)
}
#endif
inline void GetNameAndIpInfoRsp::set_host_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetNameAndIpInfoRsp.host_name)
}
inline void GetNameAndIpInfoRsp::set_host_name(const char* value, size_t size) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetNameAndIpInfoRsp.host_name)
}
inline ::std::string* GetNameAndIpInfoRsp::mutable_host_name() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetNameAndIpInfoRsp.host_name)
  return host_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNameAndIpInfoRsp::release_host_name() {
  // @@protoc_insertion_point(field_release:sysinfo.GetNameAndIpInfoRsp.host_name)
  
  return host_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNameAndIpInfoRsp::set_allocated_host_name(::std::string* host_name) {
  if (host_name != NULL) {
    
  } else {
    
  }
  host_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_name);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetNameAndIpInfoRsp.host_name)
}

// string ip_info = 2;
inline void GetNameAndIpInfoRsp::clear_ip_info() {
  ip_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNameAndIpInfoRsp::ip_info() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetNameAndIpInfoRsp.ip_info)
  return ip_info_.GetNoArena();
}
inline void GetNameAndIpInfoRsp::set_ip_info(const ::std::string& value) {
  
  ip_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetNameAndIpInfoRsp.ip_info)
}
#if LANG_CXX11
inline void GetNameAndIpInfoRsp::set_ip_info(::std::string&& value) {
  
  ip_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetNameAndIpInfoRsp.ip_info)
}
#endif
inline void GetNameAndIpInfoRsp::set_ip_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetNameAndIpInfoRsp.ip_info)
}
inline void GetNameAndIpInfoRsp::set_ip_info(const char* value, size_t size) {
  
  ip_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetNameAndIpInfoRsp.ip_info)
}
inline ::std::string* GetNameAndIpInfoRsp::mutable_ip_info() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetNameAndIpInfoRsp.ip_info)
  return ip_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNameAndIpInfoRsp::release_ip_info() {
  // @@protoc_insertion_point(field_release:sysinfo.GetNameAndIpInfoRsp.ip_info)
  
  return ip_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNameAndIpInfoRsp::set_allocated_ip_info(::std::string* ip_info) {
  if (ip_info != NULL) {
    
  } else {
    
  }
  ip_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_info);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetNameAndIpInfoRsp.ip_info)
}

// -------------------------------------------------------------------

// GetDeviceInfoReq

// string ip_addr = 1;
inline void GetDeviceInfoReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetDeviceInfoReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetDeviceInfoReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void GetDeviceInfoReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetDeviceInfoReq.ip_addr)
}
#if LANG_CXX11
inline void GetDeviceInfoReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetDeviceInfoReq.ip_addr)
}
#endif
inline void GetDeviceInfoReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetDeviceInfoReq.ip_addr)
}
inline void GetDeviceInfoReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetDeviceInfoReq.ip_addr)
}
inline ::std::string* GetDeviceInfoReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetDeviceInfoReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetDeviceInfoReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:sysinfo.GetDeviceInfoReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetDeviceInfoReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetDeviceInfoReq.ip_addr)
}

// -------------------------------------------------------------------

// GetDeviceInfoRsp

// string cpu_model = 1;
inline void GetDeviceInfoRsp::clear_cpu_model() {
  cpu_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetDeviceInfoRsp::cpu_model() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetDeviceInfoRsp.cpu_model)
  return cpu_model_.GetNoArena();
}
inline void GetDeviceInfoRsp::set_cpu_model(const ::std::string& value) {
  
  cpu_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetDeviceInfoRsp.cpu_model)
}
#if LANG_CXX11
inline void GetDeviceInfoRsp::set_cpu_model(::std::string&& value) {
  
  cpu_model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetDeviceInfoRsp.cpu_model)
}
#endif
inline void GetDeviceInfoRsp::set_cpu_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cpu_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetDeviceInfoRsp.cpu_model)
}
inline void GetDeviceInfoRsp::set_cpu_model(const char* value, size_t size) {
  
  cpu_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetDeviceInfoRsp.cpu_model)
}
inline ::std::string* GetDeviceInfoRsp::mutable_cpu_model() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetDeviceInfoRsp.cpu_model)
  return cpu_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetDeviceInfoRsp::release_cpu_model() {
  // @@protoc_insertion_point(field_release:sysinfo.GetDeviceInfoRsp.cpu_model)
  
  return cpu_model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetDeviceInfoRsp::set_allocated_cpu_model(::std::string* cpu_model) {
  if (cpu_model != NULL) {
    
  } else {
    
  }
  cpu_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpu_model);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetDeviceInfoRsp.cpu_model)
}

// string cpu_cores = 2;
inline void GetDeviceInfoRsp::clear_cpu_cores() {
  cpu_cores_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetDeviceInfoRsp::cpu_cores() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetDeviceInfoRsp.cpu_cores)
  return cpu_cores_.GetNoArena();
}
inline void GetDeviceInfoRsp::set_cpu_cores(const ::std::string& value) {
  
  cpu_cores_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetDeviceInfoRsp.cpu_cores)
}
#if LANG_CXX11
inline void GetDeviceInfoRsp::set_cpu_cores(::std::string&& value) {
  
  cpu_cores_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetDeviceInfoRsp.cpu_cores)
}
#endif
inline void GetDeviceInfoRsp::set_cpu_cores(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cpu_cores_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetDeviceInfoRsp.cpu_cores)
}
inline void GetDeviceInfoRsp::set_cpu_cores(const char* value, size_t size) {
  
  cpu_cores_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetDeviceInfoRsp.cpu_cores)
}
inline ::std::string* GetDeviceInfoRsp::mutable_cpu_cores() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetDeviceInfoRsp.cpu_cores)
  return cpu_cores_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetDeviceInfoRsp::release_cpu_cores() {
  // @@protoc_insertion_point(field_release:sysinfo.GetDeviceInfoRsp.cpu_cores)
  
  return cpu_cores_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetDeviceInfoRsp::set_allocated_cpu_cores(::std::string* cpu_cores) {
  if (cpu_cores != NULL) {
    
  } else {
    
  }
  cpu_cores_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpu_cores);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetDeviceInfoRsp.cpu_cores)
}

// string mem_total = 3;
inline void GetDeviceInfoRsp::clear_mem_total() {
  mem_total_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetDeviceInfoRsp::mem_total() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetDeviceInfoRsp.mem_total)
  return mem_total_.GetNoArena();
}
inline void GetDeviceInfoRsp::set_mem_total(const ::std::string& value) {
  
  mem_total_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetDeviceInfoRsp.mem_total)
}
#if LANG_CXX11
inline void GetDeviceInfoRsp::set_mem_total(::std::string&& value) {
  
  mem_total_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetDeviceInfoRsp.mem_total)
}
#endif
inline void GetDeviceInfoRsp::set_mem_total(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mem_total_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetDeviceInfoRsp.mem_total)
}
inline void GetDeviceInfoRsp::set_mem_total(const char* value, size_t size) {
  
  mem_total_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetDeviceInfoRsp.mem_total)
}
inline ::std::string* GetDeviceInfoRsp::mutable_mem_total() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetDeviceInfoRsp.mem_total)
  return mem_total_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetDeviceInfoRsp::release_mem_total() {
  // @@protoc_insertion_point(field_release:sysinfo.GetDeviceInfoRsp.mem_total)
  
  return mem_total_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetDeviceInfoRsp::set_allocated_mem_total(::std::string* mem_total) {
  if (mem_total != NULL) {
    
  } else {
    
  }
  mem_total_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mem_total);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetDeviceInfoRsp.mem_total)
}

// string eth_ctrl_info = 4;
inline void GetDeviceInfoRsp::clear_eth_ctrl_info() {
  eth_ctrl_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetDeviceInfoRsp::eth_ctrl_info() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetDeviceInfoRsp.eth_ctrl_info)
  return eth_ctrl_info_.GetNoArena();
}
inline void GetDeviceInfoRsp::set_eth_ctrl_info(const ::std::string& value) {
  
  eth_ctrl_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetDeviceInfoRsp.eth_ctrl_info)
}
#if LANG_CXX11
inline void GetDeviceInfoRsp::set_eth_ctrl_info(::std::string&& value) {
  
  eth_ctrl_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetDeviceInfoRsp.eth_ctrl_info)
}
#endif
inline void GetDeviceInfoRsp::set_eth_ctrl_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  eth_ctrl_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetDeviceInfoRsp.eth_ctrl_info)
}
inline void GetDeviceInfoRsp::set_eth_ctrl_info(const char* value, size_t size) {
  
  eth_ctrl_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetDeviceInfoRsp.eth_ctrl_info)
}
inline ::std::string* GetDeviceInfoRsp::mutable_eth_ctrl_info() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetDeviceInfoRsp.eth_ctrl_info)
  return eth_ctrl_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetDeviceInfoRsp::release_eth_ctrl_info() {
  // @@protoc_insertion_point(field_release:sysinfo.GetDeviceInfoRsp.eth_ctrl_info)
  
  return eth_ctrl_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetDeviceInfoRsp::set_allocated_eth_ctrl_info(::std::string* eth_ctrl_info) {
  if (eth_ctrl_info != NULL) {
    
  } else {
    
  }
  eth_ctrl_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), eth_ctrl_info);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetDeviceInfoRsp.eth_ctrl_info)
}

// -------------------------------------------------------------------

// GetCpuUsageReq

// string ip_addr = 1;
inline void GetCpuUsageReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetCpuUsageReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetCpuUsageReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void GetCpuUsageReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetCpuUsageReq.ip_addr)
}
#if LANG_CXX11
inline void GetCpuUsageReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetCpuUsageReq.ip_addr)
}
#endif
inline void GetCpuUsageReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetCpuUsageReq.ip_addr)
}
inline void GetCpuUsageReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetCpuUsageReq.ip_addr)
}
inline ::std::string* GetCpuUsageReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetCpuUsageReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetCpuUsageReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:sysinfo.GetCpuUsageReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetCpuUsageReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetCpuUsageReq.ip_addr)
}

// -------------------------------------------------------------------

// GetCpuUsageRsp

// string cpu_usage = 1;
inline void GetCpuUsageRsp::clear_cpu_usage() {
  cpu_usage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetCpuUsageRsp::cpu_usage() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetCpuUsageRsp.cpu_usage)
  return cpu_usage_.GetNoArena();
}
inline void GetCpuUsageRsp::set_cpu_usage(const ::std::string& value) {
  
  cpu_usage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetCpuUsageRsp.cpu_usage)
}
#if LANG_CXX11
inline void GetCpuUsageRsp::set_cpu_usage(::std::string&& value) {
  
  cpu_usage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetCpuUsageRsp.cpu_usage)
}
#endif
inline void GetCpuUsageRsp::set_cpu_usage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cpu_usage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetCpuUsageRsp.cpu_usage)
}
inline void GetCpuUsageRsp::set_cpu_usage(const char* value, size_t size) {
  
  cpu_usage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetCpuUsageRsp.cpu_usage)
}
inline ::std::string* GetCpuUsageRsp::mutable_cpu_usage() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetCpuUsageRsp.cpu_usage)
  return cpu_usage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetCpuUsageRsp::release_cpu_usage() {
  // @@protoc_insertion_point(field_release:sysinfo.GetCpuUsageRsp.cpu_usage)
  
  return cpu_usage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetCpuUsageRsp::set_allocated_cpu_usage(::std::string* cpu_usage) {
  if (cpu_usage != NULL) {
    
  } else {
    
  }
  cpu_usage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpu_usage);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetCpuUsageRsp.cpu_usage)
}

// -------------------------------------------------------------------

// GetCpuTempReq

// string ip_addr = 1;
inline void GetCpuTempReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetCpuTempReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetCpuTempReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void GetCpuTempReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetCpuTempReq.ip_addr)
}
#if LANG_CXX11
inline void GetCpuTempReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetCpuTempReq.ip_addr)
}
#endif
inline void GetCpuTempReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetCpuTempReq.ip_addr)
}
inline void GetCpuTempReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetCpuTempReq.ip_addr)
}
inline ::std::string* GetCpuTempReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetCpuTempReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetCpuTempReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:sysinfo.GetCpuTempReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetCpuTempReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetCpuTempReq.ip_addr)
}

// -------------------------------------------------------------------

// GetCpuTempRsp

// string cpu_temp = 1;
inline void GetCpuTempRsp::clear_cpu_temp() {
  cpu_temp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetCpuTempRsp::cpu_temp() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetCpuTempRsp.cpu_temp)
  return cpu_temp_.GetNoArena();
}
inline void GetCpuTempRsp::set_cpu_temp(const ::std::string& value) {
  
  cpu_temp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetCpuTempRsp.cpu_temp)
}
#if LANG_CXX11
inline void GetCpuTempRsp::set_cpu_temp(::std::string&& value) {
  
  cpu_temp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetCpuTempRsp.cpu_temp)
}
#endif
inline void GetCpuTempRsp::set_cpu_temp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cpu_temp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetCpuTempRsp.cpu_temp)
}
inline void GetCpuTempRsp::set_cpu_temp(const char* value, size_t size) {
  
  cpu_temp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetCpuTempRsp.cpu_temp)
}
inline ::std::string* GetCpuTempRsp::mutable_cpu_temp() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetCpuTempRsp.cpu_temp)
  return cpu_temp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetCpuTempRsp::release_cpu_temp() {
  // @@protoc_insertion_point(field_release:sysinfo.GetCpuTempRsp.cpu_temp)
  
  return cpu_temp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetCpuTempRsp::set_allocated_cpu_temp(::std::string* cpu_temp) {
  if (cpu_temp != NULL) {
    
  } else {
    
  }
  cpu_temp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpu_temp);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetCpuTempRsp.cpu_temp)
}

// -------------------------------------------------------------------

// GetMemUsageReq

// string ip_addr = 1;
inline void GetMemUsageReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMemUsageReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetMemUsageReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void GetMemUsageReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetMemUsageReq.ip_addr)
}
#if LANG_CXX11
inline void GetMemUsageReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetMemUsageReq.ip_addr)
}
#endif
inline void GetMemUsageReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetMemUsageReq.ip_addr)
}
inline void GetMemUsageReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetMemUsageReq.ip_addr)
}
inline ::std::string* GetMemUsageReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetMemUsageReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMemUsageReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:sysinfo.GetMemUsageReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMemUsageReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetMemUsageReq.ip_addr)
}

// -------------------------------------------------------------------

// GetMemUsageRsp

// string mem_usage = 1;
inline void GetMemUsageRsp::clear_mem_usage() {
  mem_usage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMemUsageRsp::mem_usage() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetMemUsageRsp.mem_usage)
  return mem_usage_.GetNoArena();
}
inline void GetMemUsageRsp::set_mem_usage(const ::std::string& value) {
  
  mem_usage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetMemUsageRsp.mem_usage)
}
#if LANG_CXX11
inline void GetMemUsageRsp::set_mem_usage(::std::string&& value) {
  
  mem_usage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetMemUsageRsp.mem_usage)
}
#endif
inline void GetMemUsageRsp::set_mem_usage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mem_usage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetMemUsageRsp.mem_usage)
}
inline void GetMemUsageRsp::set_mem_usage(const char* value, size_t size) {
  
  mem_usage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetMemUsageRsp.mem_usage)
}
inline ::std::string* GetMemUsageRsp::mutable_mem_usage() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetMemUsageRsp.mem_usage)
  return mem_usage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMemUsageRsp::release_mem_usage() {
  // @@protoc_insertion_point(field_release:sysinfo.GetMemUsageRsp.mem_usage)
  
  return mem_usage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMemUsageRsp::set_allocated_mem_usage(::std::string* mem_usage) {
  if (mem_usage != NULL) {
    
  } else {
    
  }
  mem_usage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mem_usage);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetMemUsageRsp.mem_usage)
}

// -------------------------------------------------------------------

// GetNicInfoReq

// string ip_addr = 1;
inline void GetNicInfoReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNicInfoReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetNicInfoReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void GetNicInfoReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetNicInfoReq.ip_addr)
}
#if LANG_CXX11
inline void GetNicInfoReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetNicInfoReq.ip_addr)
}
#endif
inline void GetNicInfoReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetNicInfoReq.ip_addr)
}
inline void GetNicInfoReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetNicInfoReq.ip_addr)
}
inline ::std::string* GetNicInfoReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetNicInfoReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNicInfoReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:sysinfo.GetNicInfoReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNicInfoReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetNicInfoReq.ip_addr)
}

// bool is_depend_os_version = 2;
inline void GetNicInfoReq::clear_is_depend_os_version() {
  is_depend_os_version_ = false;
}
inline bool GetNicInfoReq::is_depend_os_version() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetNicInfoReq.is_depend_os_version)
  return is_depend_os_version_;
}
inline void GetNicInfoReq::set_is_depend_os_version(bool value) {
  
  is_depend_os_version_ = value;
  // @@protoc_insertion_point(field_set:sysinfo.GetNicInfoReq.is_depend_os_version)
}

// -------------------------------------------------------------------

// GetNicInfoRsp

// string os_version = 1;
inline void GetNicInfoRsp::clear_os_version() {
  os_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNicInfoRsp::os_version() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetNicInfoRsp.os_version)
  return os_version_.GetNoArena();
}
inline void GetNicInfoRsp::set_os_version(const ::std::string& value) {
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetNicInfoRsp.os_version)
}
#if LANG_CXX11
inline void GetNicInfoRsp::set_os_version(::std::string&& value) {
  
  os_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetNicInfoRsp.os_version)
}
#endif
inline void GetNicInfoRsp::set_os_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetNicInfoRsp.os_version)
}
inline void GetNicInfoRsp::set_os_version(const char* value, size_t size) {
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetNicInfoRsp.os_version)
}
inline ::std::string* GetNicInfoRsp::mutable_os_version() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetNicInfoRsp.os_version)
  return os_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNicInfoRsp::release_os_version() {
  // @@protoc_insertion_point(field_release:sysinfo.GetNicInfoRsp.os_version)
  
  return os_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNicInfoRsp::set_allocated_os_version(::std::string* os_version) {
  if (os_version != NULL) {
    
  } else {
    
  }
  os_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_version);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetNicInfoRsp.os_version)
}

// string nic_info = 2;
inline void GetNicInfoRsp::clear_nic_info() {
  nic_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNicInfoRsp::nic_info() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetNicInfoRsp.nic_info)
  return nic_info_.GetNoArena();
}
inline void GetNicInfoRsp::set_nic_info(const ::std::string& value) {
  
  nic_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetNicInfoRsp.nic_info)
}
#if LANG_CXX11
inline void GetNicInfoRsp::set_nic_info(::std::string&& value) {
  
  nic_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetNicInfoRsp.nic_info)
}
#endif
inline void GetNicInfoRsp::set_nic_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nic_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetNicInfoRsp.nic_info)
}
inline void GetNicInfoRsp::set_nic_info(const char* value, size_t size) {
  
  nic_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetNicInfoRsp.nic_info)
}
inline ::std::string* GetNicInfoRsp::mutable_nic_info() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetNicInfoRsp.nic_info)
  return nic_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNicInfoRsp::release_nic_info() {
  // @@protoc_insertion_point(field_release:sysinfo.GetNicInfoRsp.nic_info)
  
  return nic_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNicInfoRsp::set_allocated_nic_info(::std::string* nic_info) {
  if (nic_info != NULL) {
    
  } else {
    
  }
  nic_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nic_info);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetNicInfoRsp.nic_info)
}

// -------------------------------------------------------------------

// GetHostNameReq

// string ip_addr = 1;
inline void GetHostNameReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetHostNameReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetHostNameReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void GetHostNameReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetHostNameReq.ip_addr)
}
#if LANG_CXX11
inline void GetHostNameReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetHostNameReq.ip_addr)
}
#endif
inline void GetHostNameReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetHostNameReq.ip_addr)
}
inline void GetHostNameReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetHostNameReq.ip_addr)
}
inline ::std::string* GetHostNameReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetHostNameReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetHostNameReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:sysinfo.GetHostNameReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetHostNameReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetHostNameReq.ip_addr)
}

// -------------------------------------------------------------------

// GetHostNameRsp

// string host_name = 1;
inline void GetHostNameRsp::clear_host_name() {
  host_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetHostNameRsp::host_name() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetHostNameRsp.host_name)
  return host_name_.GetNoArena();
}
inline void GetHostNameRsp::set_host_name(const ::std::string& value) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetHostNameRsp.host_name)
}
#if LANG_CXX11
inline void GetHostNameRsp::set_host_name(::std::string&& value) {
  
  host_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetHostNameRsp.host_name)
}
#endif
inline void GetHostNameRsp::set_host_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetHostNameRsp.host_name)
}
inline void GetHostNameRsp::set_host_name(const char* value, size_t size) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetHostNameRsp.host_name)
}
inline ::std::string* GetHostNameRsp::mutable_host_name() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetHostNameRsp.host_name)
  return host_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetHostNameRsp::release_host_name() {
  // @@protoc_insertion_point(field_release:sysinfo.GetHostNameRsp.host_name)
  
  return host_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetHostNameRsp::set_allocated_host_name(::std::string* host_name) {
  if (host_name != NULL) {
    
  } else {
    
  }
  host_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_name);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetHostNameRsp.host_name)
}

// -------------------------------------------------------------------

// GetIpInfoReq

// string ip_addr = 1;
inline void GetIpInfoReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetIpInfoReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetIpInfoReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void GetIpInfoReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetIpInfoReq.ip_addr)
}
#if LANG_CXX11
inline void GetIpInfoReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetIpInfoReq.ip_addr)
}
#endif
inline void GetIpInfoReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetIpInfoReq.ip_addr)
}
inline void GetIpInfoReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetIpInfoReq.ip_addr)
}
inline ::std::string* GetIpInfoReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetIpInfoReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetIpInfoReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:sysinfo.GetIpInfoReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetIpInfoReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetIpInfoReq.ip_addr)
}

// -------------------------------------------------------------------

// GetIpInfoRsp

// string ip_info = 1;
inline void GetIpInfoRsp::clear_ip_info() {
  ip_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetIpInfoRsp::ip_info() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetIpInfoRsp.ip_info)
  return ip_info_.GetNoArena();
}
inline void GetIpInfoRsp::set_ip_info(const ::std::string& value) {
  
  ip_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetIpInfoRsp.ip_info)
}
#if LANG_CXX11
inline void GetIpInfoRsp::set_ip_info(::std::string&& value) {
  
  ip_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetIpInfoRsp.ip_info)
}
#endif
inline void GetIpInfoRsp::set_ip_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetIpInfoRsp.ip_info)
}
inline void GetIpInfoRsp::set_ip_info(const char* value, size_t size) {
  
  ip_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetIpInfoRsp.ip_info)
}
inline ::std::string* GetIpInfoRsp::mutable_ip_info() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetIpInfoRsp.ip_info)
  return ip_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetIpInfoRsp::release_ip_info() {
  // @@protoc_insertion_point(field_release:sysinfo.GetIpInfoRsp.ip_info)
  
  return ip_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetIpInfoRsp::set_allocated_ip_info(::std::string* ip_info) {
  if (ip_info != NULL) {
    
  } else {
    
  }
  ip_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_info);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetIpInfoRsp.ip_info)
}

// -------------------------------------------------------------------

// GetCpuModelReq

// string ip_addr = 1;
inline void GetCpuModelReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetCpuModelReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetCpuModelReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void GetCpuModelReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetCpuModelReq.ip_addr)
}
#if LANG_CXX11
inline void GetCpuModelReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetCpuModelReq.ip_addr)
}
#endif
inline void GetCpuModelReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetCpuModelReq.ip_addr)
}
inline void GetCpuModelReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetCpuModelReq.ip_addr)
}
inline ::std::string* GetCpuModelReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetCpuModelReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetCpuModelReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:sysinfo.GetCpuModelReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetCpuModelReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetCpuModelReq.ip_addr)
}

// -------------------------------------------------------------------

// GetCpuModelRsp

// string cpu_model = 1;
inline void GetCpuModelRsp::clear_cpu_model() {
  cpu_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetCpuModelRsp::cpu_model() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetCpuModelRsp.cpu_model)
  return cpu_model_.GetNoArena();
}
inline void GetCpuModelRsp::set_cpu_model(const ::std::string& value) {
  
  cpu_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetCpuModelRsp.cpu_model)
}
#if LANG_CXX11
inline void GetCpuModelRsp::set_cpu_model(::std::string&& value) {
  
  cpu_model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetCpuModelRsp.cpu_model)
}
#endif
inline void GetCpuModelRsp::set_cpu_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cpu_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetCpuModelRsp.cpu_model)
}
inline void GetCpuModelRsp::set_cpu_model(const char* value, size_t size) {
  
  cpu_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetCpuModelRsp.cpu_model)
}
inline ::std::string* GetCpuModelRsp::mutable_cpu_model() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetCpuModelRsp.cpu_model)
  return cpu_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetCpuModelRsp::release_cpu_model() {
  // @@protoc_insertion_point(field_release:sysinfo.GetCpuModelRsp.cpu_model)
  
  return cpu_model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetCpuModelRsp::set_allocated_cpu_model(::std::string* cpu_model) {
  if (cpu_model != NULL) {
    
  } else {
    
  }
  cpu_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpu_model);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetCpuModelRsp.cpu_model)
}

// -------------------------------------------------------------------

// GetCpuCoresReq

// string ip_addr = 1;
inline void GetCpuCoresReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetCpuCoresReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetCpuCoresReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void GetCpuCoresReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetCpuCoresReq.ip_addr)
}
#if LANG_CXX11
inline void GetCpuCoresReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetCpuCoresReq.ip_addr)
}
#endif
inline void GetCpuCoresReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetCpuCoresReq.ip_addr)
}
inline void GetCpuCoresReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetCpuCoresReq.ip_addr)
}
inline ::std::string* GetCpuCoresReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetCpuCoresReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetCpuCoresReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:sysinfo.GetCpuCoresReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetCpuCoresReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetCpuCoresReq.ip_addr)
}

// -------------------------------------------------------------------

// GetCpuCoresRsp

// string cpu_cores = 1;
inline void GetCpuCoresRsp::clear_cpu_cores() {
  cpu_cores_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetCpuCoresRsp::cpu_cores() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetCpuCoresRsp.cpu_cores)
  return cpu_cores_.GetNoArena();
}
inline void GetCpuCoresRsp::set_cpu_cores(const ::std::string& value) {
  
  cpu_cores_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetCpuCoresRsp.cpu_cores)
}
#if LANG_CXX11
inline void GetCpuCoresRsp::set_cpu_cores(::std::string&& value) {
  
  cpu_cores_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetCpuCoresRsp.cpu_cores)
}
#endif
inline void GetCpuCoresRsp::set_cpu_cores(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cpu_cores_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetCpuCoresRsp.cpu_cores)
}
inline void GetCpuCoresRsp::set_cpu_cores(const char* value, size_t size) {
  
  cpu_cores_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetCpuCoresRsp.cpu_cores)
}
inline ::std::string* GetCpuCoresRsp::mutable_cpu_cores() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetCpuCoresRsp.cpu_cores)
  return cpu_cores_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetCpuCoresRsp::release_cpu_cores() {
  // @@protoc_insertion_point(field_release:sysinfo.GetCpuCoresRsp.cpu_cores)
  
  return cpu_cores_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetCpuCoresRsp::set_allocated_cpu_cores(::std::string* cpu_cores) {
  if (cpu_cores != NULL) {
    
  } else {
    
  }
  cpu_cores_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpu_cores);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetCpuCoresRsp.cpu_cores)
}

// -------------------------------------------------------------------

// GetMemTotalReq

// string ip_addr = 1;
inline void GetMemTotalReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMemTotalReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetMemTotalReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void GetMemTotalReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetMemTotalReq.ip_addr)
}
#if LANG_CXX11
inline void GetMemTotalReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetMemTotalReq.ip_addr)
}
#endif
inline void GetMemTotalReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetMemTotalReq.ip_addr)
}
inline void GetMemTotalReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetMemTotalReq.ip_addr)
}
inline ::std::string* GetMemTotalReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetMemTotalReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMemTotalReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:sysinfo.GetMemTotalReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMemTotalReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetMemTotalReq.ip_addr)
}

// -------------------------------------------------------------------

// GetMemTotalRsp

// string mem_total = 1;
inline void GetMemTotalRsp::clear_mem_total() {
  mem_total_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMemTotalRsp::mem_total() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetMemTotalRsp.mem_total)
  return mem_total_.GetNoArena();
}
inline void GetMemTotalRsp::set_mem_total(const ::std::string& value) {
  
  mem_total_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetMemTotalRsp.mem_total)
}
#if LANG_CXX11
inline void GetMemTotalRsp::set_mem_total(::std::string&& value) {
  
  mem_total_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetMemTotalRsp.mem_total)
}
#endif
inline void GetMemTotalRsp::set_mem_total(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mem_total_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetMemTotalRsp.mem_total)
}
inline void GetMemTotalRsp::set_mem_total(const char* value, size_t size) {
  
  mem_total_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetMemTotalRsp.mem_total)
}
inline ::std::string* GetMemTotalRsp::mutable_mem_total() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetMemTotalRsp.mem_total)
  return mem_total_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMemTotalRsp::release_mem_total() {
  // @@protoc_insertion_point(field_release:sysinfo.GetMemTotalRsp.mem_total)
  
  return mem_total_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMemTotalRsp::set_allocated_mem_total(::std::string* mem_total) {
  if (mem_total != NULL) {
    
  } else {
    
  }
  mem_total_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mem_total);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetMemTotalRsp.mem_total)
}

// -------------------------------------------------------------------

// GetEthCtrlInfoReq

// string ip_addr = 1;
inline void GetEthCtrlInfoReq::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetEthCtrlInfoReq::ip_addr() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetEthCtrlInfoReq.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void GetEthCtrlInfoReq::set_ip_addr(const ::std::string& value) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetEthCtrlInfoReq.ip_addr)
}
#if LANG_CXX11
inline void GetEthCtrlInfoReq::set_ip_addr(::std::string&& value) {
  
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetEthCtrlInfoReq.ip_addr)
}
#endif
inline void GetEthCtrlInfoReq::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetEthCtrlInfoReq.ip_addr)
}
inline void GetEthCtrlInfoReq::set_ip_addr(const char* value, size_t size) {
  
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetEthCtrlInfoReq.ip_addr)
}
inline ::std::string* GetEthCtrlInfoReq::mutable_ip_addr() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetEthCtrlInfoReq.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetEthCtrlInfoReq::release_ip_addr() {
  // @@protoc_insertion_point(field_release:sysinfo.GetEthCtrlInfoReq.ip_addr)
  
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetEthCtrlInfoReq::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    
  } else {
    
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetEthCtrlInfoReq.ip_addr)
}

// -------------------------------------------------------------------

// GetEthCtrlInfoRsp

// string eth_ctrl_info = 1;
inline void GetEthCtrlInfoRsp::clear_eth_ctrl_info() {
  eth_ctrl_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetEthCtrlInfoRsp::eth_ctrl_info() const {
  // @@protoc_insertion_point(field_get:sysinfo.GetEthCtrlInfoRsp.eth_ctrl_info)
  return eth_ctrl_info_.GetNoArena();
}
inline void GetEthCtrlInfoRsp::set_eth_ctrl_info(const ::std::string& value) {
  
  eth_ctrl_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sysinfo.GetEthCtrlInfoRsp.eth_ctrl_info)
}
#if LANG_CXX11
inline void GetEthCtrlInfoRsp::set_eth_ctrl_info(::std::string&& value) {
  
  eth_ctrl_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sysinfo.GetEthCtrlInfoRsp.eth_ctrl_info)
}
#endif
inline void GetEthCtrlInfoRsp::set_eth_ctrl_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  eth_ctrl_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sysinfo.GetEthCtrlInfoRsp.eth_ctrl_info)
}
inline void GetEthCtrlInfoRsp::set_eth_ctrl_info(const char* value, size_t size) {
  
  eth_ctrl_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sysinfo.GetEthCtrlInfoRsp.eth_ctrl_info)
}
inline ::std::string* GetEthCtrlInfoRsp::mutable_eth_ctrl_info() {
  
  // @@protoc_insertion_point(field_mutable:sysinfo.GetEthCtrlInfoRsp.eth_ctrl_info)
  return eth_ctrl_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetEthCtrlInfoRsp::release_eth_ctrl_info() {
  // @@protoc_insertion_point(field_release:sysinfo.GetEthCtrlInfoRsp.eth_ctrl_info)
  
  return eth_ctrl_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetEthCtrlInfoRsp::set_allocated_eth_ctrl_info(::std::string* eth_ctrl_info) {
  if (eth_ctrl_info != NULL) {
    
  } else {
    
  }
  eth_ctrl_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), eth_ctrl_info);
  // @@protoc_insertion_point(field_set_allocated:sysinfo.GetEthCtrlInfoRsp.eth_ctrl_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sysinfo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sys_2dinfo_2eproto__INCLUDED
