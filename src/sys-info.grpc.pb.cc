// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sys-info.proto

#include "sys-info.pb.h"
#include "sys-info.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace sysinfo {

static const char* SysInfo_method_names[] = {
  "/sysinfo.SysInfo/getNameAndIpInfo",
  "/sysinfo.SysInfo/getDeviceInfo",
  "/sysinfo.SysInfo/getCpuUsage",
  "/sysinfo.SysInfo/getCpuTemp",
  "/sysinfo.SysInfo/getMemUsage",
  "/sysinfo.SysInfo/getNicInfo",
  "/sysinfo.SysInfo/getHostName",
  "/sysinfo.SysInfo/getIpInfo",
  "/sysinfo.SysInfo/getCpuModel",
  "/sysinfo.SysInfo/getCpuCores",
  "/sysinfo.SysInfo/getMemTotal",
  "/sysinfo.SysInfo/getEthCtrlInfo",
};

std::unique_ptr< SysInfo::Stub> SysInfo::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< SysInfo::Stub> stub(new SysInfo::Stub(channel));
  return stub;
}

SysInfo::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_getNameAndIpInfo_(SysInfo_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getDeviceInfo_(SysInfo_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getCpuUsage_(SysInfo_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getCpuTemp_(SysInfo_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getMemUsage_(SysInfo_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getNicInfo_(SysInfo_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getHostName_(SysInfo_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getIpInfo_(SysInfo_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getCpuModel_(SysInfo_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getCpuCores_(SysInfo_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getMemTotal_(SysInfo_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getEthCtrlInfo_(SysInfo_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SysInfo::Stub::getNameAndIpInfo(::grpc::ClientContext* context, const ::sysinfo::GetNameAndIpInfoReq& request, ::sysinfo::GetNameAndIpInfoRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getNameAndIpInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::sysinfo::GetNameAndIpInfoRsp>* SysInfo::Stub::AsyncgetNameAndIpInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetNameAndIpInfoReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sysinfo::GetNameAndIpInfoRsp>::Create(channel_.get(), cq, rpcmethod_getNameAndIpInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sysinfo::GetNameAndIpInfoRsp>* SysInfo::Stub::PrepareAsyncgetNameAndIpInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetNameAndIpInfoReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sysinfo::GetNameAndIpInfoRsp>::Create(channel_.get(), cq, rpcmethod_getNameAndIpInfo_, context, request, false);
}

::grpc::Status SysInfo::Stub::getDeviceInfo(::grpc::ClientContext* context, const ::sysinfo::GetDeviceInfoReq& request, ::sysinfo::GetDeviceInfoRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getDeviceInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::sysinfo::GetDeviceInfoRsp>* SysInfo::Stub::AsyncgetDeviceInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetDeviceInfoReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sysinfo::GetDeviceInfoRsp>::Create(channel_.get(), cq, rpcmethod_getDeviceInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sysinfo::GetDeviceInfoRsp>* SysInfo::Stub::PrepareAsyncgetDeviceInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetDeviceInfoReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sysinfo::GetDeviceInfoRsp>::Create(channel_.get(), cq, rpcmethod_getDeviceInfo_, context, request, false);
}

::grpc::Status SysInfo::Stub::getCpuUsage(::grpc::ClientContext* context, const ::sysinfo::GetCpuUsageReq& request, ::sysinfo::GetCpuUsageRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getCpuUsage_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuUsageRsp>* SysInfo::Stub::AsyncgetCpuUsageRaw(::grpc::ClientContext* context, const ::sysinfo::GetCpuUsageReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sysinfo::GetCpuUsageRsp>::Create(channel_.get(), cq, rpcmethod_getCpuUsage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuUsageRsp>* SysInfo::Stub::PrepareAsyncgetCpuUsageRaw(::grpc::ClientContext* context, const ::sysinfo::GetCpuUsageReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sysinfo::GetCpuUsageRsp>::Create(channel_.get(), cq, rpcmethod_getCpuUsage_, context, request, false);
}

::grpc::Status SysInfo::Stub::getCpuTemp(::grpc::ClientContext* context, const ::sysinfo::GetCpuTempReq& request, ::sysinfo::GetCpuTempRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getCpuTemp_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuTempRsp>* SysInfo::Stub::AsyncgetCpuTempRaw(::grpc::ClientContext* context, const ::sysinfo::GetCpuTempReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sysinfo::GetCpuTempRsp>::Create(channel_.get(), cq, rpcmethod_getCpuTemp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuTempRsp>* SysInfo::Stub::PrepareAsyncgetCpuTempRaw(::grpc::ClientContext* context, const ::sysinfo::GetCpuTempReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sysinfo::GetCpuTempRsp>::Create(channel_.get(), cq, rpcmethod_getCpuTemp_, context, request, false);
}

::grpc::Status SysInfo::Stub::getMemUsage(::grpc::ClientContext* context, const ::sysinfo::GetMemUsageReq& request, ::sysinfo::GetMemUsageRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getMemUsage_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::sysinfo::GetMemUsageRsp>* SysInfo::Stub::AsyncgetMemUsageRaw(::grpc::ClientContext* context, const ::sysinfo::GetMemUsageReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sysinfo::GetMemUsageRsp>::Create(channel_.get(), cq, rpcmethod_getMemUsage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sysinfo::GetMemUsageRsp>* SysInfo::Stub::PrepareAsyncgetMemUsageRaw(::grpc::ClientContext* context, const ::sysinfo::GetMemUsageReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sysinfo::GetMemUsageRsp>::Create(channel_.get(), cq, rpcmethod_getMemUsage_, context, request, false);
}

::grpc::Status SysInfo::Stub::getNicInfo(::grpc::ClientContext* context, const ::sysinfo::GetNicInfoReq& request, ::sysinfo::GetNicInfoRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getNicInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::sysinfo::GetNicInfoRsp>* SysInfo::Stub::AsyncgetNicInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetNicInfoReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sysinfo::GetNicInfoRsp>::Create(channel_.get(), cq, rpcmethod_getNicInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sysinfo::GetNicInfoRsp>* SysInfo::Stub::PrepareAsyncgetNicInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetNicInfoReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sysinfo::GetNicInfoRsp>::Create(channel_.get(), cq, rpcmethod_getNicInfo_, context, request, false);
}

::grpc::Status SysInfo::Stub::getHostName(::grpc::ClientContext* context, const ::sysinfo::GetHostNameReq& request, ::sysinfo::GetHostNameRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getHostName_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::sysinfo::GetHostNameRsp>* SysInfo::Stub::AsyncgetHostNameRaw(::grpc::ClientContext* context, const ::sysinfo::GetHostNameReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sysinfo::GetHostNameRsp>::Create(channel_.get(), cq, rpcmethod_getHostName_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sysinfo::GetHostNameRsp>* SysInfo::Stub::PrepareAsyncgetHostNameRaw(::grpc::ClientContext* context, const ::sysinfo::GetHostNameReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sysinfo::GetHostNameRsp>::Create(channel_.get(), cq, rpcmethod_getHostName_, context, request, false);
}

::grpc::Status SysInfo::Stub::getIpInfo(::grpc::ClientContext* context, const ::sysinfo::GetIpInfoReq& request, ::sysinfo::GetIpInfoRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getIpInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::sysinfo::GetIpInfoRsp>* SysInfo::Stub::AsyncgetIpInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetIpInfoReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sysinfo::GetIpInfoRsp>::Create(channel_.get(), cq, rpcmethod_getIpInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sysinfo::GetIpInfoRsp>* SysInfo::Stub::PrepareAsyncgetIpInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetIpInfoReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sysinfo::GetIpInfoRsp>::Create(channel_.get(), cq, rpcmethod_getIpInfo_, context, request, false);
}

::grpc::Status SysInfo::Stub::getCpuModel(::grpc::ClientContext* context, const ::sysinfo::GetCpuModelReq& request, ::sysinfo::GetCpuModelRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getCpuModel_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuModelRsp>* SysInfo::Stub::AsyncgetCpuModelRaw(::grpc::ClientContext* context, const ::sysinfo::GetCpuModelReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sysinfo::GetCpuModelRsp>::Create(channel_.get(), cq, rpcmethod_getCpuModel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuModelRsp>* SysInfo::Stub::PrepareAsyncgetCpuModelRaw(::grpc::ClientContext* context, const ::sysinfo::GetCpuModelReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sysinfo::GetCpuModelRsp>::Create(channel_.get(), cq, rpcmethod_getCpuModel_, context, request, false);
}

::grpc::Status SysInfo::Stub::getCpuCores(::grpc::ClientContext* context, const ::sysinfo::GetCpuCoresReq& request, ::sysinfo::GetCpuCoresRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getCpuCores_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuCoresRsp>* SysInfo::Stub::AsyncgetCpuCoresRaw(::grpc::ClientContext* context, const ::sysinfo::GetCpuCoresReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sysinfo::GetCpuCoresRsp>::Create(channel_.get(), cq, rpcmethod_getCpuCores_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sysinfo::GetCpuCoresRsp>* SysInfo::Stub::PrepareAsyncgetCpuCoresRaw(::grpc::ClientContext* context, const ::sysinfo::GetCpuCoresReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sysinfo::GetCpuCoresRsp>::Create(channel_.get(), cq, rpcmethod_getCpuCores_, context, request, false);
}

::grpc::Status SysInfo::Stub::getMemTotal(::grpc::ClientContext* context, const ::sysinfo::GetMemTotalReq& request, ::sysinfo::GetMemTotalRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getMemTotal_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::sysinfo::GetMemTotalRsp>* SysInfo::Stub::AsyncgetMemTotalRaw(::grpc::ClientContext* context, const ::sysinfo::GetMemTotalReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sysinfo::GetMemTotalRsp>::Create(channel_.get(), cq, rpcmethod_getMemTotal_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sysinfo::GetMemTotalRsp>* SysInfo::Stub::PrepareAsyncgetMemTotalRaw(::grpc::ClientContext* context, const ::sysinfo::GetMemTotalReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sysinfo::GetMemTotalRsp>::Create(channel_.get(), cq, rpcmethod_getMemTotal_, context, request, false);
}

::grpc::Status SysInfo::Stub::getEthCtrlInfo(::grpc::ClientContext* context, const ::sysinfo::GetEthCtrlInfoReq& request, ::sysinfo::GetEthCtrlInfoRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getEthCtrlInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::sysinfo::GetEthCtrlInfoRsp>* SysInfo::Stub::AsyncgetEthCtrlInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetEthCtrlInfoReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sysinfo::GetEthCtrlInfoRsp>::Create(channel_.get(), cq, rpcmethod_getEthCtrlInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sysinfo::GetEthCtrlInfoRsp>* SysInfo::Stub::PrepareAsyncgetEthCtrlInfoRaw(::grpc::ClientContext* context, const ::sysinfo::GetEthCtrlInfoReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::sysinfo::GetEthCtrlInfoRsp>::Create(channel_.get(), cq, rpcmethod_getEthCtrlInfo_, context, request, false);
}

SysInfo::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SysInfo_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SysInfo::Service, ::sysinfo::GetNameAndIpInfoReq, ::sysinfo::GetNameAndIpInfoRsp>(
          std::mem_fn(&SysInfo::Service::getNameAndIpInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SysInfo_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SysInfo::Service, ::sysinfo::GetDeviceInfoReq, ::sysinfo::GetDeviceInfoRsp>(
          std::mem_fn(&SysInfo::Service::getDeviceInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SysInfo_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SysInfo::Service, ::sysinfo::GetCpuUsageReq, ::sysinfo::GetCpuUsageRsp>(
          std::mem_fn(&SysInfo::Service::getCpuUsage), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SysInfo_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SysInfo::Service, ::sysinfo::GetCpuTempReq, ::sysinfo::GetCpuTempRsp>(
          std::mem_fn(&SysInfo::Service::getCpuTemp), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SysInfo_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SysInfo::Service, ::sysinfo::GetMemUsageReq, ::sysinfo::GetMemUsageRsp>(
          std::mem_fn(&SysInfo::Service::getMemUsage), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SysInfo_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SysInfo::Service, ::sysinfo::GetNicInfoReq, ::sysinfo::GetNicInfoRsp>(
          std::mem_fn(&SysInfo::Service::getNicInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SysInfo_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SysInfo::Service, ::sysinfo::GetHostNameReq, ::sysinfo::GetHostNameRsp>(
          std::mem_fn(&SysInfo::Service::getHostName), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SysInfo_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SysInfo::Service, ::sysinfo::GetIpInfoReq, ::sysinfo::GetIpInfoRsp>(
          std::mem_fn(&SysInfo::Service::getIpInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SysInfo_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SysInfo::Service, ::sysinfo::GetCpuModelReq, ::sysinfo::GetCpuModelRsp>(
          std::mem_fn(&SysInfo::Service::getCpuModel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SysInfo_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SysInfo::Service, ::sysinfo::GetCpuCoresReq, ::sysinfo::GetCpuCoresRsp>(
          std::mem_fn(&SysInfo::Service::getCpuCores), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SysInfo_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SysInfo::Service, ::sysinfo::GetMemTotalReq, ::sysinfo::GetMemTotalRsp>(
          std::mem_fn(&SysInfo::Service::getMemTotal), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SysInfo_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SysInfo::Service, ::sysinfo::GetEthCtrlInfoReq, ::sysinfo::GetEthCtrlInfoRsp>(
          std::mem_fn(&SysInfo::Service::getEthCtrlInfo), this)));
}

SysInfo::Service::~Service() {
}

::grpc::Status SysInfo::Service::getNameAndIpInfo(::grpc::ServerContext* context, const ::sysinfo::GetNameAndIpInfoReq* request, ::sysinfo::GetNameAndIpInfoRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SysInfo::Service::getDeviceInfo(::grpc::ServerContext* context, const ::sysinfo::GetDeviceInfoReq* request, ::sysinfo::GetDeviceInfoRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SysInfo::Service::getCpuUsage(::grpc::ServerContext* context, const ::sysinfo::GetCpuUsageReq* request, ::sysinfo::GetCpuUsageRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SysInfo::Service::getCpuTemp(::grpc::ServerContext* context, const ::sysinfo::GetCpuTempReq* request, ::sysinfo::GetCpuTempRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SysInfo::Service::getMemUsage(::grpc::ServerContext* context, const ::sysinfo::GetMemUsageReq* request, ::sysinfo::GetMemUsageRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SysInfo::Service::getNicInfo(::grpc::ServerContext* context, const ::sysinfo::GetNicInfoReq* request, ::sysinfo::GetNicInfoRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SysInfo::Service::getHostName(::grpc::ServerContext* context, const ::sysinfo::GetHostNameReq* request, ::sysinfo::GetHostNameRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SysInfo::Service::getIpInfo(::grpc::ServerContext* context, const ::sysinfo::GetIpInfoReq* request, ::sysinfo::GetIpInfoRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SysInfo::Service::getCpuModel(::grpc::ServerContext* context, const ::sysinfo::GetCpuModelReq* request, ::sysinfo::GetCpuModelRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SysInfo::Service::getCpuCores(::grpc::ServerContext* context, const ::sysinfo::GetCpuCoresReq* request, ::sysinfo::GetCpuCoresRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SysInfo::Service::getMemTotal(::grpc::ServerContext* context, const ::sysinfo::GetMemTotalReq* request, ::sysinfo::GetMemTotalRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SysInfo::Service::getEthCtrlInfo(::grpc::ServerContext* context, const ::sysinfo::GetEthCtrlInfoReq* request, ::sysinfo::GetEthCtrlInfoRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sysinfo

