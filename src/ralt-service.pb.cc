// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ralt-service.proto

#include "ralt-service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace raltservice {
class StatsFieldNameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StatsFieldName>
      _instance;
} _StatsFieldName_default_instance_;
class StatsFieldValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StatsFieldValue>
      _instance;
} _StatsFieldValue_default_instance_;
class HomePageReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HomePageReq>
      _instance;
} _HomePageReq_default_instance_;
class HomePageRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HomePageRsp>
      _instance;
} _HomePageRsp_default_instance_;
class CacheLookUpReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CacheLookUpReq>
      _instance;
} _CacheLookUpReq_default_instance_;
class FlowStatLookUpReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlowStatLookUpReq>
      _instance;
} _FlowStatLookUpReq_default_instance_;
class LogInfoLookUpReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogInfoLookUpReq>
      _instance;
} _LogInfoLookUpReq_default_instance_;
class CacheResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CacheResult>
      _instance;
} _CacheResult_default_instance_;
class FlowResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlowResult>
      _instance;
} _FlowResult_default_instance_;
class LogResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogResult>
      _instance;
} _LogResult_default_instance_;
class GetRaltLogsReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRaltLogsReq>
      _instance;
} _GetRaltLogsReq_default_instance_;
class RaltLogsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RaltLogs>
      _instance;
} _RaltLogs_default_instance_;
class GetRecordCfgReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRecordCfgReq>
      _instance;
} _GetRecordCfgReq_default_instance_;
class GetRecordCfgRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRecordCfgRsp>
      _instance;
} _GetRecordCfgRsp_default_instance_;
class SetRecordCfgReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetRecordCfgReq>
      _instance;
} _SetRecordCfgReq_default_instance_;
class SetRecordCfgRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetRecordCfgRsp>
      _instance;
} _SetRecordCfgRsp_default_instance_;
class GetAllDomainReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetAllDomainReq>
      _instance;
} _GetAllDomainReq_default_instance_;
class DomainDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Domain>
      _instance;
} _Domain_default_instance_;
class UpdateDomainRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateDomainRsp>
      _instance;
} _UpdateDomainRsp_default_instance_;
class GetDomainReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetDomainReq>
      _instance;
} _GetDomainReq_default_instance_;
class AddDomainRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddDomainRsp>
      _instance;
} _AddDomainRsp_default_instance_;
class DeleteDomainReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteDomainReq>
      _instance;
} _DeleteDomainReq_default_instance_;
class DeleteDomainRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteDomainRsp>
      _instance;
} _DeleteDomainRsp_default_instance_;
class GetMiscReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetMiscReq>
      _instance;
} _GetMiscReq_default_instance_;
class GetMiscRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetMiscRsp>
      _instance;
} _GetMiscRsp_default_instance_;
class MiscDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Misc>
      _instance;
} _Misc_default_instance_;
class ModMiscOpRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModMiscOpRsp>
      _instance;
} _ModMiscOpRsp_default_instance_;
class RaltStatusReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RaltStatusReq>
      _instance;
} _RaltStatusReq_default_instance_;
class RaltStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RaltStatus>
      _instance;
} _RaltStatus_default_instance_;
class ExecCmdReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecCmdReq>
      _instance;
} _ExecCmdReq_default_instance_;
class ExecCmdRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecCmdRsp>
      _instance;
} _ExecCmdRsp_default_instance_;
}  // namespace raltservice
namespace protobuf_ralt_2dservice_2eproto {
void InitDefaultsStatsFieldNameImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_StatsFieldName_default_instance_;
    new (ptr) ::raltservice::StatsFieldName();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::StatsFieldName::InitAsDefaultInstance();
}

void InitDefaultsStatsFieldName() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStatsFieldNameImpl);
}

void InitDefaultsStatsFieldValueImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_StatsFieldValue_default_instance_;
    new (ptr) ::raltservice::StatsFieldValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::StatsFieldValue::InitAsDefaultInstance();
}

void InitDefaultsStatsFieldValue() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStatsFieldValueImpl);
}

void InitDefaultsHomePageReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_HomePageReq_default_instance_;
    new (ptr) ::raltservice::HomePageReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::HomePageReq::InitAsDefaultInstance();
}

void InitDefaultsHomePageReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHomePageReqImpl);
}

void InitDefaultsHomePageRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_HomePageRsp_default_instance_;
    new (ptr) ::raltservice::HomePageRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::HomePageRsp::InitAsDefaultInstance();
}

void InitDefaultsHomePageRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHomePageRspImpl);
}

void InitDefaultsCacheLookUpReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_CacheLookUpReq_default_instance_;
    new (ptr) ::raltservice::CacheLookUpReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::CacheLookUpReq::InitAsDefaultInstance();
}

void InitDefaultsCacheLookUpReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCacheLookUpReqImpl);
}

void InitDefaultsFlowStatLookUpReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_FlowStatLookUpReq_default_instance_;
    new (ptr) ::raltservice::FlowStatLookUpReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::FlowStatLookUpReq::InitAsDefaultInstance();
}

void InitDefaultsFlowStatLookUpReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFlowStatLookUpReqImpl);
}

void InitDefaultsLogInfoLookUpReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_LogInfoLookUpReq_default_instance_;
    new (ptr) ::raltservice::LogInfoLookUpReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::LogInfoLookUpReq::InitAsDefaultInstance();
}

void InitDefaultsLogInfoLookUpReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLogInfoLookUpReqImpl);
}

void InitDefaultsCacheResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_CacheResult_default_instance_;
    new (ptr) ::raltservice::CacheResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::CacheResult::InitAsDefaultInstance();
}

void InitDefaultsCacheResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCacheResultImpl);
}

void InitDefaultsFlowResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_FlowResult_default_instance_;
    new (ptr) ::raltservice::FlowResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::FlowResult::InitAsDefaultInstance();
}

void InitDefaultsFlowResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFlowResultImpl);
}

void InitDefaultsLogResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_LogResult_default_instance_;
    new (ptr) ::raltservice::LogResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::LogResult::InitAsDefaultInstance();
}

void InitDefaultsLogResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLogResultImpl);
}

void InitDefaultsGetRaltLogsReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_GetRaltLogsReq_default_instance_;
    new (ptr) ::raltservice::GetRaltLogsReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::GetRaltLogsReq::InitAsDefaultInstance();
}

void InitDefaultsGetRaltLogsReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetRaltLogsReqImpl);
}

void InitDefaultsRaltLogsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_RaltLogs_default_instance_;
    new (ptr) ::raltservice::RaltLogs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::RaltLogs::InitAsDefaultInstance();
}

void InitDefaultsRaltLogs() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRaltLogsImpl);
}

void InitDefaultsGetRecordCfgReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_GetRecordCfgReq_default_instance_;
    new (ptr) ::raltservice::GetRecordCfgReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::GetRecordCfgReq::InitAsDefaultInstance();
}

void InitDefaultsGetRecordCfgReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetRecordCfgReqImpl);
}

void InitDefaultsGetRecordCfgRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_GetRecordCfgRsp_default_instance_;
    new (ptr) ::raltservice::GetRecordCfgRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::GetRecordCfgRsp::InitAsDefaultInstance();
}

void InitDefaultsGetRecordCfgRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetRecordCfgRspImpl);
}

void InitDefaultsSetRecordCfgReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_SetRecordCfgReq_default_instance_;
    new (ptr) ::raltservice::SetRecordCfgReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::SetRecordCfgReq::InitAsDefaultInstance();
}

void InitDefaultsSetRecordCfgReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSetRecordCfgReqImpl);
}

void InitDefaultsSetRecordCfgRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_SetRecordCfgRsp_default_instance_;
    new (ptr) ::raltservice::SetRecordCfgRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::SetRecordCfgRsp::InitAsDefaultInstance();
}

void InitDefaultsSetRecordCfgRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSetRecordCfgRspImpl);
}

void InitDefaultsGetAllDomainReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_GetAllDomainReq_default_instance_;
    new (ptr) ::raltservice::GetAllDomainReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::GetAllDomainReq::InitAsDefaultInstance();
}

void InitDefaultsGetAllDomainReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetAllDomainReqImpl);
}

void InitDefaultsDomainImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_Domain_default_instance_;
    new (ptr) ::raltservice::Domain();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::Domain::InitAsDefaultInstance();
}

void InitDefaultsDomain() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDomainImpl);
}

void InitDefaultsUpdateDomainRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_UpdateDomainRsp_default_instance_;
    new (ptr) ::raltservice::UpdateDomainRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::UpdateDomainRsp::InitAsDefaultInstance();
}

void InitDefaultsUpdateDomainRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUpdateDomainRspImpl);
}

void InitDefaultsGetDomainReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_GetDomainReq_default_instance_;
    new (ptr) ::raltservice::GetDomainReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::GetDomainReq::InitAsDefaultInstance();
}

void InitDefaultsGetDomainReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetDomainReqImpl);
}

void InitDefaultsAddDomainRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_AddDomainRsp_default_instance_;
    new (ptr) ::raltservice::AddDomainRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::AddDomainRsp::InitAsDefaultInstance();
}

void InitDefaultsAddDomainRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddDomainRspImpl);
}

void InitDefaultsDeleteDomainReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_DeleteDomainReq_default_instance_;
    new (ptr) ::raltservice::DeleteDomainReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::DeleteDomainReq::InitAsDefaultInstance();
}

void InitDefaultsDeleteDomainReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeleteDomainReqImpl);
}

void InitDefaultsDeleteDomainRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_DeleteDomainRsp_default_instance_;
    new (ptr) ::raltservice::DeleteDomainRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::DeleteDomainRsp::InitAsDefaultInstance();
}

void InitDefaultsDeleteDomainRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeleteDomainRspImpl);
}

void InitDefaultsGetMiscReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_GetMiscReq_default_instance_;
    new (ptr) ::raltservice::GetMiscReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::GetMiscReq::InitAsDefaultInstance();
}

void InitDefaultsGetMiscReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetMiscReqImpl);
}

void InitDefaultsGetMiscRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_GetMiscRsp_default_instance_;
    new (ptr) ::raltservice::GetMiscRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::GetMiscRsp::InitAsDefaultInstance();
}

void InitDefaultsGetMiscRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetMiscRspImpl);
}

void InitDefaultsMiscImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_Misc_default_instance_;
    new (ptr) ::raltservice::Misc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::Misc::InitAsDefaultInstance();
}

void InitDefaultsMisc() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMiscImpl);
}

void InitDefaultsModMiscOpRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_ModMiscOpRsp_default_instance_;
    new (ptr) ::raltservice::ModMiscOpRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::ModMiscOpRsp::InitAsDefaultInstance();
}

void InitDefaultsModMiscOpRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsModMiscOpRspImpl);
}

void InitDefaultsRaltStatusReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_RaltStatusReq_default_instance_;
    new (ptr) ::raltservice::RaltStatusReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::RaltStatusReq::InitAsDefaultInstance();
}

void InitDefaultsRaltStatusReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRaltStatusReqImpl);
}

void InitDefaultsRaltStatusImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_RaltStatus_default_instance_;
    new (ptr) ::raltservice::RaltStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::RaltStatus::InitAsDefaultInstance();
}

void InitDefaultsRaltStatus() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRaltStatusImpl);
}

void InitDefaultsExecCmdReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_ExecCmdReq_default_instance_;
    new (ptr) ::raltservice::ExecCmdReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::ExecCmdReq::InitAsDefaultInstance();
}

void InitDefaultsExecCmdReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsExecCmdReqImpl);
}

void InitDefaultsExecCmdRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raltservice::_ExecCmdRsp_default_instance_;
    new (ptr) ::raltservice::ExecCmdRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raltservice::ExecCmdRsp::InitAsDefaultInstance();
}

void InitDefaultsExecCmdRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsExecCmdRspImpl);
}

::google::protobuf::Metadata file_level_metadata[31];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::StatsFieldName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::StatsFieldName, ip_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::StatsFieldName, field_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::StatsFieldValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::StatsFieldValue, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::HomePageReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::HomePageReq, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::HomePageRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::HomePageRsp, domain_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::HomePageRsp, cluster_device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::HomePageRsp, app_transfor_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::HomePageRsp, app_transfor_connections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::HomePageRsp, cache_total_hits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::HomePageRsp, cache_bytes_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::HomePageRsp, cache_bytes_used_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::HomePageRsp, cache_num_docs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::CacheLookUpReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::CacheLookUpReq, ip_addr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::FlowStatLookUpReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::FlowStatLookUpReq, ip_addr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::LogInfoLookUpReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::LogInfoLookUpReq, ip_addr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::CacheResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::CacheResult, cache_total_hits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::CacheResult, bytes_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::CacheResult, bytes_used_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::CacheResult, num_docs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::CacheResult, cache_hit_ratio_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::FlowResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::FlowResult, user_agent_current_connections_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::FlowResult, origin_server_current_connections_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::FlowResult, completed_requests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::FlowResult, total_incoming_connections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::FlowResult, incoming_requests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::FlowResult, outgoing_requests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::FlowResult, incoming_responses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::FlowResult, total_client_connections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::FlowResult, total_client_connections_ipv4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::FlowResult, total_client_connections_ipv6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::FlowResult, total_server_connections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::FlowResult, user_agent_total_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::FlowResult, origin_server_total_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::FlowResult, bandwidth_hit_ratio_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::LogResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::LogResult, log_files_space_mb_used_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::LogResult, max_space_mb_for_logs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::GetRaltLogsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::GetRaltLogsReq, ip_addr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::RaltLogs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::RaltLogs, logs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::GetRecordCfgReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::GetRecordCfgReq, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::GetRecordCfgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::GetRecordCfgRsp, logging_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::GetRecordCfgRsp, max_space_mb_for_logs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::GetRecordCfgRsp, rolling_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::GetRecordCfgRsp, server_ports_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::SetRecordCfgReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::SetRecordCfgReq, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::SetRecordCfgReq, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::SetRecordCfgRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::SetRecordCfgRsp, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::GetAllDomainReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::GetAllDomainReq, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::Domain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::Domain, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::Domain, domain_str_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::Domain, append_or_replace_str_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::Domain, port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::UpdateDomainRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::UpdateDomainRsp, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::GetDomainReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::GetDomainReq, domain_str_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::AddDomainRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::AddDomainRsp, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::DeleteDomainReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::DeleteDomainReq, domain_str_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::DeleteDomainRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::DeleteDomainRsp, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::GetMiscReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::GetMiscReq, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::GetMiscRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::GetMiscRsp, ralt_filter_type_default_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::Misc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::Misc, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::Misc, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::ModMiscOpRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::ModMiscOpRsp, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::RaltStatusReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::RaltStatusReq, ip_addr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::RaltStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::RaltStatus, ip_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::RaltStatus, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::ExecCmdReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::ExecCmdReq, ip_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::ExecCmdReq, cmd_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::ExecCmdRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raltservice::ExecCmdRsp, result_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::raltservice::StatsFieldName)},
  { 7, -1, sizeof(::raltservice::StatsFieldValue)},
  { 13, -1, sizeof(::raltservice::HomePageReq)},
  { 19, -1, sizeof(::raltservice::HomePageRsp)},
  { 32, -1, sizeof(::raltservice::CacheLookUpReq)},
  { 38, -1, sizeof(::raltservice::FlowStatLookUpReq)},
  { 44, -1, sizeof(::raltservice::LogInfoLookUpReq)},
  { 50, -1, sizeof(::raltservice::CacheResult)},
  { 60, -1, sizeof(::raltservice::FlowResult)},
  { 79, -1, sizeof(::raltservice::LogResult)},
  { 86, -1, sizeof(::raltservice::GetRaltLogsReq)},
  { 92, -1, sizeof(::raltservice::RaltLogs)},
  { 98, -1, sizeof(::raltservice::GetRecordCfgReq)},
  { 104, -1, sizeof(::raltservice::GetRecordCfgRsp)},
  { 113, -1, sizeof(::raltservice::SetRecordCfgReq)},
  { 120, -1, sizeof(::raltservice::SetRecordCfgRsp)},
  { 126, -1, sizeof(::raltservice::GetAllDomainReq)},
  { 132, -1, sizeof(::raltservice::Domain)},
  { 141, -1, sizeof(::raltservice::UpdateDomainRsp)},
  { 147, -1, sizeof(::raltservice::GetDomainReq)},
  { 153, -1, sizeof(::raltservice::AddDomainRsp)},
  { 159, -1, sizeof(::raltservice::DeleteDomainReq)},
  { 165, -1, sizeof(::raltservice::DeleteDomainRsp)},
  { 171, -1, sizeof(::raltservice::GetMiscReq)},
  { 177, -1, sizeof(::raltservice::GetMiscRsp)},
  { 183, -1, sizeof(::raltservice::Misc)},
  { 190, -1, sizeof(::raltservice::ModMiscOpRsp)},
  { 196, -1, sizeof(::raltservice::RaltStatusReq)},
  { 202, -1, sizeof(::raltservice::RaltStatus)},
  { 209, -1, sizeof(::raltservice::ExecCmdReq)},
  { 216, -1, sizeof(::raltservice::ExecCmdRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_StatsFieldName_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_StatsFieldValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_HomePageReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_HomePageRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_CacheLookUpReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_FlowStatLookUpReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_LogInfoLookUpReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_CacheResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_FlowResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_LogResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_GetRaltLogsReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_RaltLogs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_GetRecordCfgReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_GetRecordCfgRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_SetRecordCfgReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_SetRecordCfgRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_GetAllDomainReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_Domain_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_UpdateDomainRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_GetDomainReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_AddDomainRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_DeleteDomainReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_DeleteDomainRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_GetMiscReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_GetMiscRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_Misc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_ModMiscOpRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_RaltStatusReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_RaltStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_ExecCmdReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raltservice::_ExecCmdRsp_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ralt-service.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 31);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022ralt-service.proto\022\013raltservice\"5\n\016Sta"
      "tsFieldName\022\017\n\007ip_addr\030\001 \001(\t\022\022\n\nfield_na"
      "me\030\002 \001(\t\" \n\017StatsFieldValue\022\r\n\005value\030\001 \001"
      "(\t\"\033\n\013HomePageReq\022\014\n\004type\030\001 \001(\r\"\336\001\n\013Home"
      "PageRsp\022\022\n\ndomain_num\030\001 \001(\r\022\026\n\016cluster_d"
      "evice\030\002 \001(\r\022\032\n\022app_transfor_bytes\030\003 \001(\004\022"
      " \n\030app_transfor_connections\030\004 \001(\r\022\030\n\020cac"
      "he_total_hits\030\005 \001(\r\022\031\n\021cache_bytes_total"
      "\030\006 \001(\004\022\030\n\020cache_bytes_used\030\007 \001(\004\022\026\n\016cach"
      "e_num_docs\030\010 \001(\r\"!\n\016CacheLookUpReq\022\017\n\007ip"
      "_addr\030\001 \001(\t\"$\n\021FlowStatLookUpReq\022\017\n\007ip_a"
      "ddr\030\001 \001(\t\"#\n\020LogInfoLookUpReq\022\017\n\007ip_addr"
      "\030\001 \001(\t\"{\n\013CacheResult\022\030\n\020cache_total_hit"
      "s\030\001 \001(\r\022\023\n\013bytes_total\030\002 \001(\004\022\022\n\nbytes_us"
      "ed\030\003 \001(\004\022\020\n\010num_docs\030\004 \001(\r\022\027\n\017cache_hit_"
      "ratio\030\005 \001(\002\"\357\003\n\nFlowResult\022,\n$user_agent"
      "_current_connections_count\030\001 \001(\r\022/\n\'orig"
      "in_server_current_connections_count\030\002 \001("
      "\r\022\032\n\022completed_requests\030\003 \001(\r\022\"\n\032total_i"
      "ncoming_connections\030\004 \001(\r\022\031\n\021incoming_re"
      "quests\030\005 \001(\r\022\031\n\021outgoing_requests\030\006 \001(\r\022"
      "\032\n\022incoming_responses\030\007 \001(\r\022 \n\030total_cli"
      "ent_connections\030\010 \001(\r\022%\n\035total_client_co"
      "nnections_ipv4\030\t \001(\r\022%\n\035total_client_con"
      "nections_ipv6\030\n \001(\r\022 \n\030total_server_conn"
      "ections\030\013 \001(\r\022\036\n\026user_agent_total_bytes\030"
      "\014 \001(\004\022!\n\031origin_server_total_bytes\030\r \001(\004"
      "\022\033\n\023bandwidth_hit_ratio\030\016 \001(\002\"K\n\tLogResu"
      "lt\022\037\n\027log_files_space_mb_used\030\001 \001(\r\022\035\n\025m"
      "ax_space_mb_for_logs\030\002 \001(\r\"!\n\016GetRaltLog"
      "sReq\022\017\n\007ip_addr\030\001 \001(\t\"\030\n\010RaltLogs\022\014\n\004log"
      "s\030\001 \001(\014\"\037\n\017GetRecordCfgReq\022\014\n\004type\030\001 \001(\r"
      "\"x\n\017GetRecordCfgRsp\022\027\n\017logging_enabled\030\001"
      " \001(\r\022\035\n\025max_space_mb_for_logs\030\002 \001(\r\022\027\n\017r"
      "olling_enabled\030\003 \001(\r\022\024\n\014server_ports\030\004 \001"
      "(\t\"I\n\017SetRecordCfgReq\022\'\n\003key\030\001 \001(\0162\032.ral"
      "tservice.RecordCfgType\022\r\n\005value\030\002 \001(\t\"!\n"
      "\017SetRecordCfgRsp\022\016\n\006result\030\001 \001(\r\"\037\n\017GetA"
      "llDomainReq\022\014\n\004type\030\001 \001(\r\"p\n\006Domain\022%\n\004t"
      "ype\030\001 \001(\0162\027.raltservice.DomainType\022\022\n\ndo"
      "main_str\030\002 \001(\t\022\035\n\025append_or_replace_str\030"
      "\003 \001(\t\022\014\n\004port\030\004 \001(\t\"!\n\017UpdateDomainRsp\022\016"
      "\n\006result\030\001 \001(\r\"\"\n\014GetDomainReq\022\022\n\ndomain"
      "_str\030\001 \001(\t\"\036\n\014AddDomainRsp\022\016\n\006result\030\001 \001"
      "(\r\"%\n\017DeleteDomainReq\022\022\n\ndomain_str\030\001 \001("
      "\t\"!\n\017DeleteDomainRsp\022\016\n\006result\030\001 \001(\r\"\032\n\n"
      "GetMiscReq\022\014\n\004type\030\001 \001(\r\"G\n\nGetMiscRsp\0229"
      "\n\030ralt_filter_type_default\030\001 \001(\0162\027.ralts"
      "ervice.MiscSwitch\"Q\n\004Misc\022!\n\003key\030\001 \001(\0162\024"
      ".raltservice.MiscKey\022&\n\005value\030\002 \001(\0162\027.ra"
      "ltservice.MiscSwitch\"\036\n\014ModMiscOpRsp\022\016\n\006"
      "result\030\001 \001(\r\" \n\rRaltStatusReq\022\017\n\007ip_addr"
      "\030\001 \001(\t\"-\n\nRaltStatus\022\017\n\007ip_addr\030\001 \001(\t\022\016\n"
      "\006status\030\002 \001(\r\"D\n\nExecCmdReq\022\017\n\007ip_addr\030\001"
      " \001(\t\022%\n\003cmd\030\002 \001(\0162\030.raltservice.CommandT"
      "ype\"\034\n\nExecCmdRsp\022\016\n\006result\030\001 \001(\r*z\n\rRec"
      "ordCfgType\022\030\n\024enum_logging_enabled\020\000\022\036\n\032"
      "enum_max_space_mb_for_logs\020\001\022\030\n\024enum_rol"
      "ling_enabled\020\002\022\025\n\021enum_server_ports\020\003*:\n"
      "\nDomainType\022\026\n\022enum_member_domain\020\000\022\024\n\020e"
      "num_subs_domain\020\001*,\n\007MiscKey\022!\n\035enum_ral"
      "t_filter_type_default\020\000*+\n\nMiscSwitch\022\016\n"
      "\nswitch_off\020\000\022\r\n\tswitch_on\020\001*b\n\013CommandT"
      "ype\022\016\n\nralt_start\020\000\022\r\n\tralt_stop\020\001\022\020\n\014ra"
      "lt_restart\020\002\022\017\n\013cache_clear\020\003\022\021\n\rreload_"
      "config\020\0042\324\t\n\013RaltService\022Q\n\022getStatsFiel"
      "dValue\022\033.raltservice.StatsFieldName\032\034.ra"
      "ltservice.StatsFieldValue\"\000\022G\n\017getHomePa"
      "geData\022\030.raltservice.HomePageReq\032\030.ralts"
      "ervice.HomePageRsp\"\000\022H\n\rshowCacheData\022\033."
      "raltservice.CacheLookUpReq\032\030.raltservice"
      ".CacheResult\"\000\022M\n\020showFlowStatData\022\036.ral"
      "tservice.FlowStatLookUpReq\032\027.raltservice"
      ".FlowResult\"\000\022J\n\017showLogInfoData\022\035.ralts"
      "ervice.LogInfoLookUpReq\032\026.raltservice.Lo"
      "gResult\"\000\022E\n\013getRaltLogs\022\033.raltservice.G"
      "etRaltLogsReq\032\025.raltservice.RaltLogs\"\0000\001"
      "\022O\n\017getRecordConfig\022\034.raltservice.GetRec"
      "ordCfgReq\032\034.raltservice.GetRecordCfgRsp\""
      "\000\022O\n\017setRecordConfig\022\034.raltservice.SetRe"
      "cordCfgReq\032\034.raltservice.SetRecordCfgRsp"
      "\"\000\022E\n\014getAllDomain\022\034.raltservice.GetAllD"
      "omainReq\032\023.raltservice.Domain\"\0000\001\022E\n\014upd"
      "ateDomain\022\023.raltservice.Domain\032\034.raltser"
      "vice.UpdateDomainRsp\"\000(\001\022=\n\tgetDomain\022\031."
      "raltservice.GetDomainReq\032\023.raltservice.D"
      "omain\"\000\022=\n\taddDomain\022\023.raltservice.Domai"
      "n\032\031.raltservice.AddDomainRsp\"\000\022L\n\014delete"
      "Domain\022\034.raltservice.DeleteDomainReq\032\034.r"
      "altservice.DeleteDomainRsp\"\000\022=\n\007getMisc\022"
      "\027.raltservice.GetMiscReq\032\027.raltservice.G"
      "etMiscRsp\"\000\0229\n\007modMisc\022\021.raltservice.Mis"
      "c\032\031.raltservice.ModMiscOpRsp\"\000\022H\n\rgetRal"
      "tStatus\022\032.raltservice.RaltStatusReq\032\027.ra"
      "ltservice.RaltStatus\"\0000\001\022=\n\007execCmd\022\027.ra"
      "ltservice.ExecCmdReq\032\027.raltservice.ExecC"
      "mdRsp\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3855);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ralt-service.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ralt_2dservice_2eproto
namespace raltservice {
const ::google::protobuf::EnumDescriptor* RecordCfgType_descriptor() {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ralt_2dservice_2eproto::file_level_enum_descriptors[0];
}
bool RecordCfgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DomainType_descriptor() {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ralt_2dservice_2eproto::file_level_enum_descriptors[1];
}
bool DomainType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MiscKey_descriptor() {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ralt_2dservice_2eproto::file_level_enum_descriptors[2];
}
bool MiscKey_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MiscSwitch_descriptor() {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ralt_2dservice_2eproto::file_level_enum_descriptors[3];
}
bool MiscSwitch_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CommandType_descriptor() {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ralt_2dservice_2eproto::file_level_enum_descriptors[4];
}
bool CommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void StatsFieldName::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatsFieldName::kIpAddrFieldNumber;
const int StatsFieldName::kFieldNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatsFieldName::StatsFieldName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsStatsFieldName();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.StatsFieldName)
}
StatsFieldName::StatsFieldName(const StatsFieldName& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip_addr().size() > 0) {
    ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_addr_);
  }
  field_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.field_name().size() > 0) {
    field_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
  // @@protoc_insertion_point(copy_constructor:raltservice.StatsFieldName)
}

void StatsFieldName::SharedCtor() {
  ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

StatsFieldName::~StatsFieldName() {
  // @@protoc_insertion_point(destructor:raltservice.StatsFieldName)
  SharedDtor();
}

void StatsFieldName::SharedDtor() {
  ip_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StatsFieldName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatsFieldName::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StatsFieldName& StatsFieldName::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsStatsFieldName();
  return *internal_default_instance();
}

StatsFieldName* StatsFieldName::New(::google::protobuf::Arena* arena) const {
  StatsFieldName* n = new StatsFieldName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatsFieldName::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.StatsFieldName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool StatsFieldName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.StatsFieldName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raltservice.StatsFieldName.ip_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string field_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->field_name().data(), static_cast<int>(this->field_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raltservice.StatsFieldName.field_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.StatsFieldName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.StatsFieldName)
  return false;
#undef DO_
}

void StatsFieldName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.StatsFieldName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.StatsFieldName.ip_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip_addr(), output);
  }

  // string field_name = 2;
  if (this->field_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field_name().data(), static_cast<int>(this->field_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.StatsFieldName.field_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->field_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.StatsFieldName)
}

::google::protobuf::uint8* StatsFieldName::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.StatsFieldName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.StatsFieldName.ip_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip_addr(), target);
  }

  // string field_name = 2;
  if (this->field_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field_name().data(), static_cast<int>(this->field_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.StatsFieldName.field_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->field_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.StatsFieldName)
  return target;
}

size_t StatsFieldName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.StatsFieldName)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip_addr());
  }

  // string field_name = 2;
  if (this->field_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatsFieldName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.StatsFieldName)
  GOOGLE_DCHECK_NE(&from, this);
  const StatsFieldName* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatsFieldName>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.StatsFieldName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.StatsFieldName)
    MergeFrom(*source);
  }
}

void StatsFieldName::MergeFrom(const StatsFieldName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.StatsFieldName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_addr().size() > 0) {

    ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_addr_);
  }
  if (from.field_name().size() > 0) {

    field_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
}

void StatsFieldName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.StatsFieldName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatsFieldName::CopyFrom(const StatsFieldName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.StatsFieldName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsFieldName::IsInitialized() const {
  return true;
}

void StatsFieldName::Swap(StatsFieldName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatsFieldName::InternalSwap(StatsFieldName* other) {
  using std::swap;
  ip_addr_.Swap(&other->ip_addr_);
  field_name_.Swap(&other->field_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatsFieldName::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StatsFieldValue::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatsFieldValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatsFieldValue::StatsFieldValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsStatsFieldValue();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.StatsFieldValue)
}
StatsFieldValue::StatsFieldValue(const StatsFieldValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:raltservice.StatsFieldValue)
}

void StatsFieldValue::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

StatsFieldValue::~StatsFieldValue() {
  // @@protoc_insertion_point(destructor:raltservice.StatsFieldValue)
  SharedDtor();
}

void StatsFieldValue::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StatsFieldValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatsFieldValue::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StatsFieldValue& StatsFieldValue::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsStatsFieldValue();
  return *internal_default_instance();
}

StatsFieldValue* StatsFieldValue::New(::google::protobuf::Arena* arena) const {
  StatsFieldValue* n = new StatsFieldValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatsFieldValue::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.StatsFieldValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool StatsFieldValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.StatsFieldValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raltservice.StatsFieldValue.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.StatsFieldValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.StatsFieldValue)
  return false;
#undef DO_
}

void StatsFieldValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.StatsFieldValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.StatsFieldValue.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.StatsFieldValue)
}

::google::protobuf::uint8* StatsFieldValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.StatsFieldValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.StatsFieldValue.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.StatsFieldValue)
  return target;
}

size_t StatsFieldValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.StatsFieldValue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatsFieldValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.StatsFieldValue)
  GOOGLE_DCHECK_NE(&from, this);
  const StatsFieldValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatsFieldValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.StatsFieldValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.StatsFieldValue)
    MergeFrom(*source);
  }
}

void StatsFieldValue::MergeFrom(const StatsFieldValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.StatsFieldValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void StatsFieldValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.StatsFieldValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatsFieldValue::CopyFrom(const StatsFieldValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.StatsFieldValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsFieldValue::IsInitialized() const {
  return true;
}

void StatsFieldValue::Swap(StatsFieldValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatsFieldValue::InternalSwap(StatsFieldValue* other) {
  using std::swap;
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatsFieldValue::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HomePageReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HomePageReq::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HomePageReq::HomePageReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsHomePageReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.HomePageReq)
}
HomePageReq::HomePageReq(const HomePageReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:raltservice.HomePageReq)
}

void HomePageReq::SharedCtor() {
  type_ = 0u;
  _cached_size_ = 0;
}

HomePageReq::~HomePageReq() {
  // @@protoc_insertion_point(destructor:raltservice.HomePageReq)
  SharedDtor();
}

void HomePageReq::SharedDtor() {
}

void HomePageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HomePageReq::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HomePageReq& HomePageReq::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsHomePageReq();
  return *internal_default_instance();
}

HomePageReq* HomePageReq::New(::google::protobuf::Arena* arena) const {
  HomePageReq* n = new HomePageReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HomePageReq::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.HomePageReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0u;
  _internal_metadata_.Clear();
}

bool HomePageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.HomePageReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.HomePageReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.HomePageReq)
  return false;
#undef DO_
}

void HomePageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.HomePageReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.HomePageReq)
}

::google::protobuf::uint8* HomePageReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.HomePageReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.HomePageReq)
  return target;
}

size_t HomePageReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.HomePageReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HomePageReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.HomePageReq)
  GOOGLE_DCHECK_NE(&from, this);
  const HomePageReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HomePageReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.HomePageReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.HomePageReq)
    MergeFrom(*source);
  }
}

void HomePageReq::MergeFrom(const HomePageReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.HomePageReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
}

void HomePageReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.HomePageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HomePageReq::CopyFrom(const HomePageReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.HomePageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HomePageReq::IsInitialized() const {
  return true;
}

void HomePageReq::Swap(HomePageReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HomePageReq::InternalSwap(HomePageReq* other) {
  using std::swap;
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HomePageReq::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HomePageRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HomePageRsp::kDomainNumFieldNumber;
const int HomePageRsp::kClusterDeviceFieldNumber;
const int HomePageRsp::kAppTransforBytesFieldNumber;
const int HomePageRsp::kAppTransforConnectionsFieldNumber;
const int HomePageRsp::kCacheTotalHitsFieldNumber;
const int HomePageRsp::kCacheBytesTotalFieldNumber;
const int HomePageRsp::kCacheBytesUsedFieldNumber;
const int HomePageRsp::kCacheNumDocsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HomePageRsp::HomePageRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsHomePageRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.HomePageRsp)
}
HomePageRsp::HomePageRsp(const HomePageRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&domain_num_, &from.domain_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&cache_num_docs_) -
    reinterpret_cast<char*>(&domain_num_)) + sizeof(cache_num_docs_));
  // @@protoc_insertion_point(copy_constructor:raltservice.HomePageRsp)
}

void HomePageRsp::SharedCtor() {
  ::memset(&domain_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cache_num_docs_) -
      reinterpret_cast<char*>(&domain_num_)) + sizeof(cache_num_docs_));
  _cached_size_ = 0;
}

HomePageRsp::~HomePageRsp() {
  // @@protoc_insertion_point(destructor:raltservice.HomePageRsp)
  SharedDtor();
}

void HomePageRsp::SharedDtor() {
}

void HomePageRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HomePageRsp::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HomePageRsp& HomePageRsp::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsHomePageRsp();
  return *internal_default_instance();
}

HomePageRsp* HomePageRsp::New(::google::protobuf::Arena* arena) const {
  HomePageRsp* n = new HomePageRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HomePageRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.HomePageRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&domain_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cache_num_docs_) -
      reinterpret_cast<char*>(&domain_num_)) + sizeof(cache_num_docs_));
  _internal_metadata_.Clear();
}

bool HomePageRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.HomePageRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 domain_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &domain_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cluster_device = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cluster_device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 app_transfor_bytes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &app_transfor_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 app_transfor_connections = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_transfor_connections_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cache_total_hits = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cache_total_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 cache_bytes_total = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cache_bytes_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 cache_bytes_used = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cache_bytes_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cache_num_docs = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cache_num_docs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.HomePageRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.HomePageRsp)
  return false;
#undef DO_
}

void HomePageRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.HomePageRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 domain_num = 1;
  if (this->domain_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->domain_num(), output);
  }

  // uint32 cluster_device = 2;
  if (this->cluster_device() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cluster_device(), output);
  }

  // uint64 app_transfor_bytes = 3;
  if (this->app_transfor_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->app_transfor_bytes(), output);
  }

  // uint32 app_transfor_connections = 4;
  if (this->app_transfor_connections() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->app_transfor_connections(), output);
  }

  // uint32 cache_total_hits = 5;
  if (this->cache_total_hits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cache_total_hits(), output);
  }

  // uint64 cache_bytes_total = 6;
  if (this->cache_bytes_total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->cache_bytes_total(), output);
  }

  // uint64 cache_bytes_used = 7;
  if (this->cache_bytes_used() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->cache_bytes_used(), output);
  }

  // uint32 cache_num_docs = 8;
  if (this->cache_num_docs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cache_num_docs(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.HomePageRsp)
}

::google::protobuf::uint8* HomePageRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.HomePageRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 domain_num = 1;
  if (this->domain_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->domain_num(), target);
  }

  // uint32 cluster_device = 2;
  if (this->cluster_device() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cluster_device(), target);
  }

  // uint64 app_transfor_bytes = 3;
  if (this->app_transfor_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->app_transfor_bytes(), target);
  }

  // uint32 app_transfor_connections = 4;
  if (this->app_transfor_connections() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->app_transfor_connections(), target);
  }

  // uint32 cache_total_hits = 5;
  if (this->cache_total_hits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cache_total_hits(), target);
  }

  // uint64 cache_bytes_total = 6;
  if (this->cache_bytes_total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->cache_bytes_total(), target);
  }

  // uint64 cache_bytes_used = 7;
  if (this->cache_bytes_used() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->cache_bytes_used(), target);
  }

  // uint32 cache_num_docs = 8;
  if (this->cache_num_docs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->cache_num_docs(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.HomePageRsp)
  return target;
}

size_t HomePageRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.HomePageRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 domain_num = 1;
  if (this->domain_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->domain_num());
  }

  // uint32 cluster_device = 2;
  if (this->cluster_device() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cluster_device());
  }

  // uint64 app_transfor_bytes = 3;
  if (this->app_transfor_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->app_transfor_bytes());
  }

  // uint32 app_transfor_connections = 4;
  if (this->app_transfor_connections() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->app_transfor_connections());
  }

  // uint32 cache_total_hits = 5;
  if (this->cache_total_hits() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cache_total_hits());
  }

  // uint64 cache_bytes_total = 6;
  if (this->cache_bytes_total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cache_bytes_total());
  }

  // uint64 cache_bytes_used = 7;
  if (this->cache_bytes_used() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cache_bytes_used());
  }

  // uint32 cache_num_docs = 8;
  if (this->cache_num_docs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cache_num_docs());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HomePageRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.HomePageRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const HomePageRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HomePageRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.HomePageRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.HomePageRsp)
    MergeFrom(*source);
  }
}

void HomePageRsp::MergeFrom(const HomePageRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.HomePageRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.domain_num() != 0) {
    set_domain_num(from.domain_num());
  }
  if (from.cluster_device() != 0) {
    set_cluster_device(from.cluster_device());
  }
  if (from.app_transfor_bytes() != 0) {
    set_app_transfor_bytes(from.app_transfor_bytes());
  }
  if (from.app_transfor_connections() != 0) {
    set_app_transfor_connections(from.app_transfor_connections());
  }
  if (from.cache_total_hits() != 0) {
    set_cache_total_hits(from.cache_total_hits());
  }
  if (from.cache_bytes_total() != 0) {
    set_cache_bytes_total(from.cache_bytes_total());
  }
  if (from.cache_bytes_used() != 0) {
    set_cache_bytes_used(from.cache_bytes_used());
  }
  if (from.cache_num_docs() != 0) {
    set_cache_num_docs(from.cache_num_docs());
  }
}

void HomePageRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.HomePageRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HomePageRsp::CopyFrom(const HomePageRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.HomePageRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HomePageRsp::IsInitialized() const {
  return true;
}

void HomePageRsp::Swap(HomePageRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HomePageRsp::InternalSwap(HomePageRsp* other) {
  using std::swap;
  swap(domain_num_, other->domain_num_);
  swap(cluster_device_, other->cluster_device_);
  swap(app_transfor_bytes_, other->app_transfor_bytes_);
  swap(app_transfor_connections_, other->app_transfor_connections_);
  swap(cache_total_hits_, other->cache_total_hits_);
  swap(cache_bytes_total_, other->cache_bytes_total_);
  swap(cache_bytes_used_, other->cache_bytes_used_);
  swap(cache_num_docs_, other->cache_num_docs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HomePageRsp::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CacheLookUpReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CacheLookUpReq::kIpAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CacheLookUpReq::CacheLookUpReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsCacheLookUpReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.CacheLookUpReq)
}
CacheLookUpReq::CacheLookUpReq(const CacheLookUpReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip_addr().size() > 0) {
    ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_addr_);
  }
  // @@protoc_insertion_point(copy_constructor:raltservice.CacheLookUpReq)
}

void CacheLookUpReq::SharedCtor() {
  ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CacheLookUpReq::~CacheLookUpReq() {
  // @@protoc_insertion_point(destructor:raltservice.CacheLookUpReq)
  SharedDtor();
}

void CacheLookUpReq::SharedDtor() {
  ip_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CacheLookUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CacheLookUpReq::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CacheLookUpReq& CacheLookUpReq::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsCacheLookUpReq();
  return *internal_default_instance();
}

CacheLookUpReq* CacheLookUpReq::New(::google::protobuf::Arena* arena) const {
  CacheLookUpReq* n = new CacheLookUpReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CacheLookUpReq::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.CacheLookUpReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool CacheLookUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.CacheLookUpReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raltservice.CacheLookUpReq.ip_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.CacheLookUpReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.CacheLookUpReq)
  return false;
#undef DO_
}

void CacheLookUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.CacheLookUpReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.CacheLookUpReq.ip_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip_addr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.CacheLookUpReq)
}

::google::protobuf::uint8* CacheLookUpReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.CacheLookUpReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.CacheLookUpReq.ip_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip_addr(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.CacheLookUpReq)
  return target;
}

size_t CacheLookUpReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.CacheLookUpReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip_addr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CacheLookUpReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.CacheLookUpReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CacheLookUpReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CacheLookUpReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.CacheLookUpReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.CacheLookUpReq)
    MergeFrom(*source);
  }
}

void CacheLookUpReq::MergeFrom(const CacheLookUpReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.CacheLookUpReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_addr().size() > 0) {

    ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_addr_);
  }
}

void CacheLookUpReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.CacheLookUpReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheLookUpReq::CopyFrom(const CacheLookUpReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.CacheLookUpReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheLookUpReq::IsInitialized() const {
  return true;
}

void CacheLookUpReq::Swap(CacheLookUpReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CacheLookUpReq::InternalSwap(CacheLookUpReq* other) {
  using std::swap;
  ip_addr_.Swap(&other->ip_addr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CacheLookUpReq::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FlowStatLookUpReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlowStatLookUpReq::kIpAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlowStatLookUpReq::FlowStatLookUpReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsFlowStatLookUpReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.FlowStatLookUpReq)
}
FlowStatLookUpReq::FlowStatLookUpReq(const FlowStatLookUpReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip_addr().size() > 0) {
    ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_addr_);
  }
  // @@protoc_insertion_point(copy_constructor:raltservice.FlowStatLookUpReq)
}

void FlowStatLookUpReq::SharedCtor() {
  ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FlowStatLookUpReq::~FlowStatLookUpReq() {
  // @@protoc_insertion_point(destructor:raltservice.FlowStatLookUpReq)
  SharedDtor();
}

void FlowStatLookUpReq::SharedDtor() {
  ip_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FlowStatLookUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlowStatLookUpReq::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlowStatLookUpReq& FlowStatLookUpReq::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsFlowStatLookUpReq();
  return *internal_default_instance();
}

FlowStatLookUpReq* FlowStatLookUpReq::New(::google::protobuf::Arena* arena) const {
  FlowStatLookUpReq* n = new FlowStatLookUpReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlowStatLookUpReq::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.FlowStatLookUpReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FlowStatLookUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.FlowStatLookUpReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raltservice.FlowStatLookUpReq.ip_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.FlowStatLookUpReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.FlowStatLookUpReq)
  return false;
#undef DO_
}

void FlowStatLookUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.FlowStatLookUpReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.FlowStatLookUpReq.ip_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip_addr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.FlowStatLookUpReq)
}

::google::protobuf::uint8* FlowStatLookUpReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.FlowStatLookUpReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.FlowStatLookUpReq.ip_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip_addr(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.FlowStatLookUpReq)
  return target;
}

size_t FlowStatLookUpReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.FlowStatLookUpReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip_addr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlowStatLookUpReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.FlowStatLookUpReq)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowStatLookUpReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlowStatLookUpReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.FlowStatLookUpReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.FlowStatLookUpReq)
    MergeFrom(*source);
  }
}

void FlowStatLookUpReq::MergeFrom(const FlowStatLookUpReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.FlowStatLookUpReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_addr().size() > 0) {

    ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_addr_);
  }
}

void FlowStatLookUpReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.FlowStatLookUpReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowStatLookUpReq::CopyFrom(const FlowStatLookUpReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.FlowStatLookUpReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowStatLookUpReq::IsInitialized() const {
  return true;
}

void FlowStatLookUpReq::Swap(FlowStatLookUpReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlowStatLookUpReq::InternalSwap(FlowStatLookUpReq* other) {
  using std::swap;
  ip_addr_.Swap(&other->ip_addr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FlowStatLookUpReq::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LogInfoLookUpReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogInfoLookUpReq::kIpAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogInfoLookUpReq::LogInfoLookUpReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsLogInfoLookUpReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.LogInfoLookUpReq)
}
LogInfoLookUpReq::LogInfoLookUpReq(const LogInfoLookUpReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip_addr().size() > 0) {
    ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_addr_);
  }
  // @@protoc_insertion_point(copy_constructor:raltservice.LogInfoLookUpReq)
}

void LogInfoLookUpReq::SharedCtor() {
  ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

LogInfoLookUpReq::~LogInfoLookUpReq() {
  // @@protoc_insertion_point(destructor:raltservice.LogInfoLookUpReq)
  SharedDtor();
}

void LogInfoLookUpReq::SharedDtor() {
  ip_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogInfoLookUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogInfoLookUpReq::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogInfoLookUpReq& LogInfoLookUpReq::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsLogInfoLookUpReq();
  return *internal_default_instance();
}

LogInfoLookUpReq* LogInfoLookUpReq::New(::google::protobuf::Arena* arena) const {
  LogInfoLookUpReq* n = new LogInfoLookUpReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogInfoLookUpReq::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.LogInfoLookUpReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool LogInfoLookUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.LogInfoLookUpReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raltservice.LogInfoLookUpReq.ip_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.LogInfoLookUpReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.LogInfoLookUpReq)
  return false;
#undef DO_
}

void LogInfoLookUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.LogInfoLookUpReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.LogInfoLookUpReq.ip_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip_addr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.LogInfoLookUpReq)
}

::google::protobuf::uint8* LogInfoLookUpReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.LogInfoLookUpReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.LogInfoLookUpReq.ip_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip_addr(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.LogInfoLookUpReq)
  return target;
}

size_t LogInfoLookUpReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.LogInfoLookUpReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip_addr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogInfoLookUpReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.LogInfoLookUpReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LogInfoLookUpReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogInfoLookUpReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.LogInfoLookUpReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.LogInfoLookUpReq)
    MergeFrom(*source);
  }
}

void LogInfoLookUpReq::MergeFrom(const LogInfoLookUpReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.LogInfoLookUpReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_addr().size() > 0) {

    ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_addr_);
  }
}

void LogInfoLookUpReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.LogInfoLookUpReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogInfoLookUpReq::CopyFrom(const LogInfoLookUpReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.LogInfoLookUpReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogInfoLookUpReq::IsInitialized() const {
  return true;
}

void LogInfoLookUpReq::Swap(LogInfoLookUpReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogInfoLookUpReq::InternalSwap(LogInfoLookUpReq* other) {
  using std::swap;
  ip_addr_.Swap(&other->ip_addr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogInfoLookUpReq::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CacheResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CacheResult::kCacheTotalHitsFieldNumber;
const int CacheResult::kBytesTotalFieldNumber;
const int CacheResult::kBytesUsedFieldNumber;
const int CacheResult::kNumDocsFieldNumber;
const int CacheResult::kCacheHitRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CacheResult::CacheResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsCacheResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.CacheResult)
}
CacheResult::CacheResult(const CacheResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bytes_total_, &from.bytes_total_,
    static_cast<size_t>(reinterpret_cast<char*>(&cache_hit_ratio_) -
    reinterpret_cast<char*>(&bytes_total_)) + sizeof(cache_hit_ratio_));
  // @@protoc_insertion_point(copy_constructor:raltservice.CacheResult)
}

void CacheResult::SharedCtor() {
  ::memset(&bytes_total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cache_hit_ratio_) -
      reinterpret_cast<char*>(&bytes_total_)) + sizeof(cache_hit_ratio_));
  _cached_size_ = 0;
}

CacheResult::~CacheResult() {
  // @@protoc_insertion_point(destructor:raltservice.CacheResult)
  SharedDtor();
}

void CacheResult::SharedDtor() {
}

void CacheResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CacheResult::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CacheResult& CacheResult::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsCacheResult();
  return *internal_default_instance();
}

CacheResult* CacheResult::New(::google::protobuf::Arena* arena) const {
  CacheResult* n = new CacheResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CacheResult::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.CacheResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bytes_total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cache_hit_ratio_) -
      reinterpret_cast<char*>(&bytes_total_)) + sizeof(cache_hit_ratio_));
  _internal_metadata_.Clear();
}

bool CacheResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.CacheResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 cache_total_hits = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cache_total_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 bytes_total = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 bytes_used = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_docs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_docs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cache_hit_ratio = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cache_hit_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.CacheResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.CacheResult)
  return false;
#undef DO_
}

void CacheResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.CacheResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cache_total_hits = 1;
  if (this->cache_total_hits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cache_total_hits(), output);
  }

  // uint64 bytes_total = 2;
  if (this->bytes_total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->bytes_total(), output);
  }

  // uint64 bytes_used = 3;
  if (this->bytes_used() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->bytes_used(), output);
  }

  // uint32 num_docs = 4;
  if (this->num_docs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_docs(), output);
  }

  // float cache_hit_ratio = 5;
  if (this->cache_hit_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->cache_hit_ratio(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.CacheResult)
}

::google::protobuf::uint8* CacheResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.CacheResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cache_total_hits = 1;
  if (this->cache_total_hits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cache_total_hits(), target);
  }

  // uint64 bytes_total = 2;
  if (this->bytes_total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->bytes_total(), target);
  }

  // uint64 bytes_used = 3;
  if (this->bytes_used() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->bytes_used(), target);
  }

  // uint32 num_docs = 4;
  if (this->num_docs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_docs(), target);
  }

  // float cache_hit_ratio = 5;
  if (this->cache_hit_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->cache_hit_ratio(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.CacheResult)
  return target;
}

size_t CacheResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.CacheResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 bytes_total = 2;
  if (this->bytes_total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bytes_total());
  }

  // uint32 cache_total_hits = 1;
  if (this->cache_total_hits() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cache_total_hits());
  }

  // uint32 num_docs = 4;
  if (this->num_docs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_docs());
  }

  // uint64 bytes_used = 3;
  if (this->bytes_used() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bytes_used());
  }

  // float cache_hit_ratio = 5;
  if (this->cache_hit_ratio() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CacheResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.CacheResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CacheResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CacheResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.CacheResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.CacheResult)
    MergeFrom(*source);
  }
}

void CacheResult::MergeFrom(const CacheResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.CacheResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bytes_total() != 0) {
    set_bytes_total(from.bytes_total());
  }
  if (from.cache_total_hits() != 0) {
    set_cache_total_hits(from.cache_total_hits());
  }
  if (from.num_docs() != 0) {
    set_num_docs(from.num_docs());
  }
  if (from.bytes_used() != 0) {
    set_bytes_used(from.bytes_used());
  }
  if (from.cache_hit_ratio() != 0) {
    set_cache_hit_ratio(from.cache_hit_ratio());
  }
}

void CacheResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.CacheResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheResult::CopyFrom(const CacheResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.CacheResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheResult::IsInitialized() const {
  return true;
}

void CacheResult::Swap(CacheResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CacheResult::InternalSwap(CacheResult* other) {
  using std::swap;
  swap(bytes_total_, other->bytes_total_);
  swap(cache_total_hits_, other->cache_total_hits_);
  swap(num_docs_, other->num_docs_);
  swap(bytes_used_, other->bytes_used_);
  swap(cache_hit_ratio_, other->cache_hit_ratio_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CacheResult::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FlowResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlowResult::kUserAgentCurrentConnectionsCountFieldNumber;
const int FlowResult::kOriginServerCurrentConnectionsCountFieldNumber;
const int FlowResult::kCompletedRequestsFieldNumber;
const int FlowResult::kTotalIncomingConnectionsFieldNumber;
const int FlowResult::kIncomingRequestsFieldNumber;
const int FlowResult::kOutgoingRequestsFieldNumber;
const int FlowResult::kIncomingResponsesFieldNumber;
const int FlowResult::kTotalClientConnectionsFieldNumber;
const int FlowResult::kTotalClientConnectionsIpv4FieldNumber;
const int FlowResult::kTotalClientConnectionsIpv6FieldNumber;
const int FlowResult::kTotalServerConnectionsFieldNumber;
const int FlowResult::kUserAgentTotalBytesFieldNumber;
const int FlowResult::kOriginServerTotalBytesFieldNumber;
const int FlowResult::kBandwidthHitRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlowResult::FlowResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsFlowResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.FlowResult)
}
FlowResult::FlowResult(const FlowResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_agent_current_connections_count_, &from.user_agent_current_connections_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&origin_server_total_bytes_) -
    reinterpret_cast<char*>(&user_agent_current_connections_count_)) + sizeof(origin_server_total_bytes_));
  // @@protoc_insertion_point(copy_constructor:raltservice.FlowResult)
}

void FlowResult::SharedCtor() {
  ::memset(&user_agent_current_connections_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&origin_server_total_bytes_) -
      reinterpret_cast<char*>(&user_agent_current_connections_count_)) + sizeof(origin_server_total_bytes_));
  _cached_size_ = 0;
}

FlowResult::~FlowResult() {
  // @@protoc_insertion_point(destructor:raltservice.FlowResult)
  SharedDtor();
}

void FlowResult::SharedDtor() {
}

void FlowResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlowResult::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlowResult& FlowResult::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsFlowResult();
  return *internal_default_instance();
}

FlowResult* FlowResult::New(::google::protobuf::Arena* arena) const {
  FlowResult* n = new FlowResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlowResult::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.FlowResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_agent_current_connections_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&origin_server_total_bytes_) -
      reinterpret_cast<char*>(&user_agent_current_connections_count_)) + sizeof(origin_server_total_bytes_));
  _internal_metadata_.Clear();
}

bool FlowResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.FlowResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_agent_current_connections_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_agent_current_connections_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 origin_server_current_connections_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origin_server_current_connections_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 completed_requests = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &completed_requests_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_incoming_connections = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_incoming_connections_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 incoming_requests = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &incoming_requests_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 outgoing_requests = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &outgoing_requests_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 incoming_responses = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &incoming_responses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_client_connections = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_client_connections_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_client_connections_ipv4 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_client_connections_ipv4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_client_connections_ipv6 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_client_connections_ipv6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_server_connections = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_server_connections_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 user_agent_total_bytes = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_agent_total_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 origin_server_total_bytes = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &origin_server_total_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float bandwidth_hit_ratio = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bandwidth_hit_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.FlowResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.FlowResult)
  return false;
#undef DO_
}

void FlowResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.FlowResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_agent_current_connections_count = 1;
  if (this->user_agent_current_connections_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_agent_current_connections_count(), output);
  }

  // uint32 origin_server_current_connections_count = 2;
  if (this->origin_server_current_connections_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->origin_server_current_connections_count(), output);
  }

  // uint32 completed_requests = 3;
  if (this->completed_requests() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->completed_requests(), output);
  }

  // uint32 total_incoming_connections = 4;
  if (this->total_incoming_connections() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_incoming_connections(), output);
  }

  // uint32 incoming_requests = 5;
  if (this->incoming_requests() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->incoming_requests(), output);
  }

  // uint32 outgoing_requests = 6;
  if (this->outgoing_requests() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->outgoing_requests(), output);
  }

  // uint32 incoming_responses = 7;
  if (this->incoming_responses() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->incoming_responses(), output);
  }

  // uint32 total_client_connections = 8;
  if (this->total_client_connections() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->total_client_connections(), output);
  }

  // uint32 total_client_connections_ipv4 = 9;
  if (this->total_client_connections_ipv4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->total_client_connections_ipv4(), output);
  }

  // uint32 total_client_connections_ipv6 = 10;
  if (this->total_client_connections_ipv6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->total_client_connections_ipv6(), output);
  }

  // uint32 total_server_connections = 11;
  if (this->total_server_connections() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->total_server_connections(), output);
  }

  // uint64 user_agent_total_bytes = 12;
  if (this->user_agent_total_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->user_agent_total_bytes(), output);
  }

  // uint64 origin_server_total_bytes = 13;
  if (this->origin_server_total_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->origin_server_total_bytes(), output);
  }

  // float bandwidth_hit_ratio = 14;
  if (this->bandwidth_hit_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->bandwidth_hit_ratio(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.FlowResult)
}

::google::protobuf::uint8* FlowResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.FlowResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_agent_current_connections_count = 1;
  if (this->user_agent_current_connections_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_agent_current_connections_count(), target);
  }

  // uint32 origin_server_current_connections_count = 2;
  if (this->origin_server_current_connections_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->origin_server_current_connections_count(), target);
  }

  // uint32 completed_requests = 3;
  if (this->completed_requests() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->completed_requests(), target);
  }

  // uint32 total_incoming_connections = 4;
  if (this->total_incoming_connections() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_incoming_connections(), target);
  }

  // uint32 incoming_requests = 5;
  if (this->incoming_requests() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->incoming_requests(), target);
  }

  // uint32 outgoing_requests = 6;
  if (this->outgoing_requests() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->outgoing_requests(), target);
  }

  // uint32 incoming_responses = 7;
  if (this->incoming_responses() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->incoming_responses(), target);
  }

  // uint32 total_client_connections = 8;
  if (this->total_client_connections() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->total_client_connections(), target);
  }

  // uint32 total_client_connections_ipv4 = 9;
  if (this->total_client_connections_ipv4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->total_client_connections_ipv4(), target);
  }

  // uint32 total_client_connections_ipv6 = 10;
  if (this->total_client_connections_ipv6() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->total_client_connections_ipv6(), target);
  }

  // uint32 total_server_connections = 11;
  if (this->total_server_connections() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->total_server_connections(), target);
  }

  // uint64 user_agent_total_bytes = 12;
  if (this->user_agent_total_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->user_agent_total_bytes(), target);
  }

  // uint64 origin_server_total_bytes = 13;
  if (this->origin_server_total_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->origin_server_total_bytes(), target);
  }

  // float bandwidth_hit_ratio = 14;
  if (this->bandwidth_hit_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->bandwidth_hit_ratio(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.FlowResult)
  return target;
}

size_t FlowResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.FlowResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 user_agent_current_connections_count = 1;
  if (this->user_agent_current_connections_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_agent_current_connections_count());
  }

  // uint32 origin_server_current_connections_count = 2;
  if (this->origin_server_current_connections_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->origin_server_current_connections_count());
  }

  // uint32 completed_requests = 3;
  if (this->completed_requests() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->completed_requests());
  }

  // uint32 total_incoming_connections = 4;
  if (this->total_incoming_connections() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_incoming_connections());
  }

  // uint32 incoming_requests = 5;
  if (this->incoming_requests() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->incoming_requests());
  }

  // uint32 outgoing_requests = 6;
  if (this->outgoing_requests() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->outgoing_requests());
  }

  // uint32 incoming_responses = 7;
  if (this->incoming_responses() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->incoming_responses());
  }

  // uint32 total_client_connections = 8;
  if (this->total_client_connections() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_client_connections());
  }

  // uint32 total_client_connections_ipv4 = 9;
  if (this->total_client_connections_ipv4() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_client_connections_ipv4());
  }

  // uint32 total_client_connections_ipv6 = 10;
  if (this->total_client_connections_ipv6() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_client_connections_ipv6());
  }

  // uint64 user_agent_total_bytes = 12;
  if (this->user_agent_total_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_agent_total_bytes());
  }

  // uint32 total_server_connections = 11;
  if (this->total_server_connections() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_server_connections());
  }

  // float bandwidth_hit_ratio = 14;
  if (this->bandwidth_hit_ratio() != 0) {
    total_size += 1 + 4;
  }

  // uint64 origin_server_total_bytes = 13;
  if (this->origin_server_total_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->origin_server_total_bytes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlowResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.FlowResult)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlowResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.FlowResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.FlowResult)
    MergeFrom(*source);
  }
}

void FlowResult::MergeFrom(const FlowResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.FlowResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_agent_current_connections_count() != 0) {
    set_user_agent_current_connections_count(from.user_agent_current_connections_count());
  }
  if (from.origin_server_current_connections_count() != 0) {
    set_origin_server_current_connections_count(from.origin_server_current_connections_count());
  }
  if (from.completed_requests() != 0) {
    set_completed_requests(from.completed_requests());
  }
  if (from.total_incoming_connections() != 0) {
    set_total_incoming_connections(from.total_incoming_connections());
  }
  if (from.incoming_requests() != 0) {
    set_incoming_requests(from.incoming_requests());
  }
  if (from.outgoing_requests() != 0) {
    set_outgoing_requests(from.outgoing_requests());
  }
  if (from.incoming_responses() != 0) {
    set_incoming_responses(from.incoming_responses());
  }
  if (from.total_client_connections() != 0) {
    set_total_client_connections(from.total_client_connections());
  }
  if (from.total_client_connections_ipv4() != 0) {
    set_total_client_connections_ipv4(from.total_client_connections_ipv4());
  }
  if (from.total_client_connections_ipv6() != 0) {
    set_total_client_connections_ipv6(from.total_client_connections_ipv6());
  }
  if (from.user_agent_total_bytes() != 0) {
    set_user_agent_total_bytes(from.user_agent_total_bytes());
  }
  if (from.total_server_connections() != 0) {
    set_total_server_connections(from.total_server_connections());
  }
  if (from.bandwidth_hit_ratio() != 0) {
    set_bandwidth_hit_ratio(from.bandwidth_hit_ratio());
  }
  if (from.origin_server_total_bytes() != 0) {
    set_origin_server_total_bytes(from.origin_server_total_bytes());
  }
}

void FlowResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.FlowResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowResult::CopyFrom(const FlowResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.FlowResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowResult::IsInitialized() const {
  return true;
}

void FlowResult::Swap(FlowResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlowResult::InternalSwap(FlowResult* other) {
  using std::swap;
  swap(user_agent_current_connections_count_, other->user_agent_current_connections_count_);
  swap(origin_server_current_connections_count_, other->origin_server_current_connections_count_);
  swap(completed_requests_, other->completed_requests_);
  swap(total_incoming_connections_, other->total_incoming_connections_);
  swap(incoming_requests_, other->incoming_requests_);
  swap(outgoing_requests_, other->outgoing_requests_);
  swap(incoming_responses_, other->incoming_responses_);
  swap(total_client_connections_, other->total_client_connections_);
  swap(total_client_connections_ipv4_, other->total_client_connections_ipv4_);
  swap(total_client_connections_ipv6_, other->total_client_connections_ipv6_);
  swap(user_agent_total_bytes_, other->user_agent_total_bytes_);
  swap(total_server_connections_, other->total_server_connections_);
  swap(bandwidth_hit_ratio_, other->bandwidth_hit_ratio_);
  swap(origin_server_total_bytes_, other->origin_server_total_bytes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FlowResult::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LogResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogResult::kLogFilesSpaceMbUsedFieldNumber;
const int LogResult::kMaxSpaceMbForLogsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogResult::LogResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsLogResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.LogResult)
}
LogResult::LogResult(const LogResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&log_files_space_mb_used_, &from.log_files_space_mb_used_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_space_mb_for_logs_) -
    reinterpret_cast<char*>(&log_files_space_mb_used_)) + sizeof(max_space_mb_for_logs_));
  // @@protoc_insertion_point(copy_constructor:raltservice.LogResult)
}

void LogResult::SharedCtor() {
  ::memset(&log_files_space_mb_used_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_space_mb_for_logs_) -
      reinterpret_cast<char*>(&log_files_space_mb_used_)) + sizeof(max_space_mb_for_logs_));
  _cached_size_ = 0;
}

LogResult::~LogResult() {
  // @@protoc_insertion_point(destructor:raltservice.LogResult)
  SharedDtor();
}

void LogResult::SharedDtor() {
}

void LogResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogResult::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogResult& LogResult::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsLogResult();
  return *internal_default_instance();
}

LogResult* LogResult::New(::google::protobuf::Arena* arena) const {
  LogResult* n = new LogResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogResult::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.LogResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&log_files_space_mb_used_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_space_mb_for_logs_) -
      reinterpret_cast<char*>(&log_files_space_mb_used_)) + sizeof(max_space_mb_for_logs_));
  _internal_metadata_.Clear();
}

bool LogResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.LogResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 log_files_space_mb_used = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_files_space_mb_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_space_mb_for_logs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_space_mb_for_logs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.LogResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.LogResult)
  return false;
#undef DO_
}

void LogResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.LogResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 log_files_space_mb_used = 1;
  if (this->log_files_space_mb_used() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->log_files_space_mb_used(), output);
  }

  // uint32 max_space_mb_for_logs = 2;
  if (this->max_space_mb_for_logs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_space_mb_for_logs(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.LogResult)
}

::google::protobuf::uint8* LogResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.LogResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 log_files_space_mb_used = 1;
  if (this->log_files_space_mb_used() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->log_files_space_mb_used(), target);
  }

  // uint32 max_space_mb_for_logs = 2;
  if (this->max_space_mb_for_logs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_space_mb_for_logs(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.LogResult)
  return target;
}

size_t LogResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.LogResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 log_files_space_mb_used = 1;
  if (this->log_files_space_mb_used() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->log_files_space_mb_used());
  }

  // uint32 max_space_mb_for_logs = 2;
  if (this->max_space_mb_for_logs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_space_mb_for_logs());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.LogResult)
  GOOGLE_DCHECK_NE(&from, this);
  const LogResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.LogResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.LogResult)
    MergeFrom(*source);
  }
}

void LogResult::MergeFrom(const LogResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.LogResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.log_files_space_mb_used() != 0) {
    set_log_files_space_mb_used(from.log_files_space_mb_used());
  }
  if (from.max_space_mb_for_logs() != 0) {
    set_max_space_mb_for_logs(from.max_space_mb_for_logs());
  }
}

void LogResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.LogResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogResult::CopyFrom(const LogResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.LogResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogResult::IsInitialized() const {
  return true;
}

void LogResult::Swap(LogResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogResult::InternalSwap(LogResult* other) {
  using std::swap;
  swap(log_files_space_mb_used_, other->log_files_space_mb_used_);
  swap(max_space_mb_for_logs_, other->max_space_mb_for_logs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogResult::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetRaltLogsReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRaltLogsReq::kIpAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRaltLogsReq::GetRaltLogsReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsGetRaltLogsReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.GetRaltLogsReq)
}
GetRaltLogsReq::GetRaltLogsReq(const GetRaltLogsReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip_addr().size() > 0) {
    ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_addr_);
  }
  // @@protoc_insertion_point(copy_constructor:raltservice.GetRaltLogsReq)
}

void GetRaltLogsReq::SharedCtor() {
  ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetRaltLogsReq::~GetRaltLogsReq() {
  // @@protoc_insertion_point(destructor:raltservice.GetRaltLogsReq)
  SharedDtor();
}

void GetRaltLogsReq::SharedDtor() {
  ip_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetRaltLogsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRaltLogsReq::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRaltLogsReq& GetRaltLogsReq::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsGetRaltLogsReq();
  return *internal_default_instance();
}

GetRaltLogsReq* GetRaltLogsReq::New(::google::protobuf::Arena* arena) const {
  GetRaltLogsReq* n = new GetRaltLogsReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRaltLogsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.GetRaltLogsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GetRaltLogsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.GetRaltLogsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raltservice.GetRaltLogsReq.ip_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.GetRaltLogsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.GetRaltLogsReq)
  return false;
#undef DO_
}

void GetRaltLogsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.GetRaltLogsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.GetRaltLogsReq.ip_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip_addr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.GetRaltLogsReq)
}

::google::protobuf::uint8* GetRaltLogsReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.GetRaltLogsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.GetRaltLogsReq.ip_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip_addr(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.GetRaltLogsReq)
  return target;
}

size_t GetRaltLogsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.GetRaltLogsReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip_addr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRaltLogsReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.GetRaltLogsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRaltLogsReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRaltLogsReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.GetRaltLogsReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.GetRaltLogsReq)
    MergeFrom(*source);
  }
}

void GetRaltLogsReq::MergeFrom(const GetRaltLogsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.GetRaltLogsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_addr().size() > 0) {

    ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_addr_);
  }
}

void GetRaltLogsReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.GetRaltLogsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRaltLogsReq::CopyFrom(const GetRaltLogsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.GetRaltLogsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRaltLogsReq::IsInitialized() const {
  return true;
}

void GetRaltLogsReq::Swap(GetRaltLogsReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRaltLogsReq::InternalSwap(GetRaltLogsReq* other) {
  using std::swap;
  ip_addr_.Swap(&other->ip_addr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRaltLogsReq::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RaltLogs::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaltLogs::kLogsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaltLogs::RaltLogs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsRaltLogs();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.RaltLogs)
}
RaltLogs::RaltLogs(const RaltLogs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  logs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.logs().size() > 0) {
    logs_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logs_);
  }
  // @@protoc_insertion_point(copy_constructor:raltservice.RaltLogs)
}

void RaltLogs::SharedCtor() {
  logs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RaltLogs::~RaltLogs() {
  // @@protoc_insertion_point(destructor:raltservice.RaltLogs)
  SharedDtor();
}

void RaltLogs::SharedDtor() {
  logs_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RaltLogs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaltLogs::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RaltLogs& RaltLogs::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsRaltLogs();
  return *internal_default_instance();
}

RaltLogs* RaltLogs::New(::google::protobuf::Arena* arena) const {
  RaltLogs* n = new RaltLogs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaltLogs::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.RaltLogs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RaltLogs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.RaltLogs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes logs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.RaltLogs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.RaltLogs)
  return false;
#undef DO_
}

void RaltLogs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.RaltLogs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes logs = 1;
  if (this->logs().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->logs(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.RaltLogs)
}

::google::protobuf::uint8* RaltLogs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.RaltLogs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes logs = 1;
  if (this->logs().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->logs(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.RaltLogs)
  return target;
}

size_t RaltLogs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.RaltLogs)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes logs = 1;
  if (this->logs().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->logs());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaltLogs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.RaltLogs)
  GOOGLE_DCHECK_NE(&from, this);
  const RaltLogs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaltLogs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.RaltLogs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.RaltLogs)
    MergeFrom(*source);
  }
}

void RaltLogs::MergeFrom(const RaltLogs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.RaltLogs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.logs().size() > 0) {

    logs_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logs_);
  }
}

void RaltLogs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.RaltLogs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaltLogs::CopyFrom(const RaltLogs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.RaltLogs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaltLogs::IsInitialized() const {
  return true;
}

void RaltLogs::Swap(RaltLogs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaltLogs::InternalSwap(RaltLogs* other) {
  using std::swap;
  logs_.Swap(&other->logs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaltLogs::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetRecordCfgReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRecordCfgReq::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRecordCfgReq::GetRecordCfgReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsGetRecordCfgReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.GetRecordCfgReq)
}
GetRecordCfgReq::GetRecordCfgReq(const GetRecordCfgReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:raltservice.GetRecordCfgReq)
}

void GetRecordCfgReq::SharedCtor() {
  type_ = 0u;
  _cached_size_ = 0;
}

GetRecordCfgReq::~GetRecordCfgReq() {
  // @@protoc_insertion_point(destructor:raltservice.GetRecordCfgReq)
  SharedDtor();
}

void GetRecordCfgReq::SharedDtor() {
}

void GetRecordCfgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRecordCfgReq::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRecordCfgReq& GetRecordCfgReq::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsGetRecordCfgReq();
  return *internal_default_instance();
}

GetRecordCfgReq* GetRecordCfgReq::New(::google::protobuf::Arena* arena) const {
  GetRecordCfgReq* n = new GetRecordCfgReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRecordCfgReq::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.GetRecordCfgReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0u;
  _internal_metadata_.Clear();
}

bool GetRecordCfgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.GetRecordCfgReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.GetRecordCfgReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.GetRecordCfgReq)
  return false;
#undef DO_
}

void GetRecordCfgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.GetRecordCfgReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.GetRecordCfgReq)
}

::google::protobuf::uint8* GetRecordCfgReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.GetRecordCfgReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.GetRecordCfgReq)
  return target;
}

size_t GetRecordCfgReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.GetRecordCfgReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRecordCfgReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.GetRecordCfgReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRecordCfgReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRecordCfgReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.GetRecordCfgReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.GetRecordCfgReq)
    MergeFrom(*source);
  }
}

void GetRecordCfgReq::MergeFrom(const GetRecordCfgReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.GetRecordCfgReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
}

void GetRecordCfgReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.GetRecordCfgReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRecordCfgReq::CopyFrom(const GetRecordCfgReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.GetRecordCfgReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRecordCfgReq::IsInitialized() const {
  return true;
}

void GetRecordCfgReq::Swap(GetRecordCfgReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRecordCfgReq::InternalSwap(GetRecordCfgReq* other) {
  using std::swap;
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRecordCfgReq::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetRecordCfgRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRecordCfgRsp::kLoggingEnabledFieldNumber;
const int GetRecordCfgRsp::kMaxSpaceMbForLogsFieldNumber;
const int GetRecordCfgRsp::kRollingEnabledFieldNumber;
const int GetRecordCfgRsp::kServerPortsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRecordCfgRsp::GetRecordCfgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsGetRecordCfgRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.GetRecordCfgRsp)
}
GetRecordCfgRsp::GetRecordCfgRsp(const GetRecordCfgRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_ports_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_ports().size() > 0) {
    server_ports_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_ports_);
  }
  ::memcpy(&logging_enabled_, &from.logging_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&rolling_enabled_) -
    reinterpret_cast<char*>(&logging_enabled_)) + sizeof(rolling_enabled_));
  // @@protoc_insertion_point(copy_constructor:raltservice.GetRecordCfgRsp)
}

void GetRecordCfgRsp::SharedCtor() {
  server_ports_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logging_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rolling_enabled_) -
      reinterpret_cast<char*>(&logging_enabled_)) + sizeof(rolling_enabled_));
  _cached_size_ = 0;
}

GetRecordCfgRsp::~GetRecordCfgRsp() {
  // @@protoc_insertion_point(destructor:raltservice.GetRecordCfgRsp)
  SharedDtor();
}

void GetRecordCfgRsp::SharedDtor() {
  server_ports_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetRecordCfgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRecordCfgRsp::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRecordCfgRsp& GetRecordCfgRsp::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsGetRecordCfgRsp();
  return *internal_default_instance();
}

GetRecordCfgRsp* GetRecordCfgRsp::New(::google::protobuf::Arena* arena) const {
  GetRecordCfgRsp* n = new GetRecordCfgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRecordCfgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.GetRecordCfgRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_ports_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logging_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rolling_enabled_) -
      reinterpret_cast<char*>(&logging_enabled_)) + sizeof(rolling_enabled_));
  _internal_metadata_.Clear();
}

bool GetRecordCfgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.GetRecordCfgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 logging_enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logging_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_space_mb_for_logs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_space_mb_for_logs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rolling_enabled = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rolling_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_ports = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_ports()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_ports().data(), static_cast<int>(this->server_ports().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raltservice.GetRecordCfgRsp.server_ports"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.GetRecordCfgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.GetRecordCfgRsp)
  return false;
#undef DO_
}

void GetRecordCfgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.GetRecordCfgRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 logging_enabled = 1;
  if (this->logging_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logging_enabled(), output);
  }

  // uint32 max_space_mb_for_logs = 2;
  if (this->max_space_mb_for_logs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_space_mb_for_logs(), output);
  }

  // uint32 rolling_enabled = 3;
  if (this->rolling_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rolling_enabled(), output);
  }

  // string server_ports = 4;
  if (this->server_ports().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_ports().data(), static_cast<int>(this->server_ports().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.GetRecordCfgRsp.server_ports");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->server_ports(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.GetRecordCfgRsp)
}

::google::protobuf::uint8* GetRecordCfgRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.GetRecordCfgRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 logging_enabled = 1;
  if (this->logging_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logging_enabled(), target);
  }

  // uint32 max_space_mb_for_logs = 2;
  if (this->max_space_mb_for_logs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_space_mb_for_logs(), target);
  }

  // uint32 rolling_enabled = 3;
  if (this->rolling_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rolling_enabled(), target);
  }

  // string server_ports = 4;
  if (this->server_ports().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_ports().data(), static_cast<int>(this->server_ports().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.GetRecordCfgRsp.server_ports");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->server_ports(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.GetRecordCfgRsp)
  return target;
}

size_t GetRecordCfgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.GetRecordCfgRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string server_ports = 4;
  if (this->server_ports().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_ports());
  }

  // uint32 logging_enabled = 1;
  if (this->logging_enabled() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logging_enabled());
  }

  // uint32 max_space_mb_for_logs = 2;
  if (this->max_space_mb_for_logs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_space_mb_for_logs());
  }

  // uint32 rolling_enabled = 3;
  if (this->rolling_enabled() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rolling_enabled());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRecordCfgRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.GetRecordCfgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRecordCfgRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRecordCfgRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.GetRecordCfgRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.GetRecordCfgRsp)
    MergeFrom(*source);
  }
}

void GetRecordCfgRsp::MergeFrom(const GetRecordCfgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.GetRecordCfgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_ports().size() > 0) {

    server_ports_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_ports_);
  }
  if (from.logging_enabled() != 0) {
    set_logging_enabled(from.logging_enabled());
  }
  if (from.max_space_mb_for_logs() != 0) {
    set_max_space_mb_for_logs(from.max_space_mb_for_logs());
  }
  if (from.rolling_enabled() != 0) {
    set_rolling_enabled(from.rolling_enabled());
  }
}

void GetRecordCfgRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.GetRecordCfgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRecordCfgRsp::CopyFrom(const GetRecordCfgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.GetRecordCfgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRecordCfgRsp::IsInitialized() const {
  return true;
}

void GetRecordCfgRsp::Swap(GetRecordCfgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRecordCfgRsp::InternalSwap(GetRecordCfgRsp* other) {
  using std::swap;
  server_ports_.Swap(&other->server_ports_);
  swap(logging_enabled_, other->logging_enabled_);
  swap(max_space_mb_for_logs_, other->max_space_mb_for_logs_);
  swap(rolling_enabled_, other->rolling_enabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRecordCfgRsp::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetRecordCfgReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetRecordCfgReq::kKeyFieldNumber;
const int SetRecordCfgReq::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetRecordCfgReq::SetRecordCfgReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsSetRecordCfgReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.SetRecordCfgReq)
}
SetRecordCfgReq::SetRecordCfgReq(const SetRecordCfgReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:raltservice.SetRecordCfgReq)
}

void SetRecordCfgReq::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = 0;
  _cached_size_ = 0;
}

SetRecordCfgReq::~SetRecordCfgReq() {
  // @@protoc_insertion_point(destructor:raltservice.SetRecordCfgReq)
  SharedDtor();
}

void SetRecordCfgReq::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SetRecordCfgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetRecordCfgReq::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetRecordCfgReq& SetRecordCfgReq::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsSetRecordCfgReq();
  return *internal_default_instance();
}

SetRecordCfgReq* SetRecordCfgReq::New(::google::protobuf::Arena* arena) const {
  SetRecordCfgReq* n = new SetRecordCfgReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetRecordCfgReq::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.SetRecordCfgReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = 0;
  _internal_metadata_.Clear();
}

bool SetRecordCfgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.SetRecordCfgReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .raltservice.RecordCfgType key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_key(static_cast< ::raltservice::RecordCfgType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raltservice.SetRecordCfgReq.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.SetRecordCfgReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.SetRecordCfgReq)
  return false;
#undef DO_
}

void SetRecordCfgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.SetRecordCfgReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raltservice.RecordCfgType key = 1;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.SetRecordCfgReq.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.SetRecordCfgReq)
}

::google::protobuf::uint8* SetRecordCfgReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.SetRecordCfgReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raltservice.RecordCfgType key = 1;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.SetRecordCfgReq.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.SetRecordCfgReq)
  return target;
}

size_t SetRecordCfgReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.SetRecordCfgReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // .raltservice.RecordCfgType key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetRecordCfgReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.SetRecordCfgReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRecordCfgReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetRecordCfgReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.SetRecordCfgReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.SetRecordCfgReq)
    MergeFrom(*source);
  }
}

void SetRecordCfgReq::MergeFrom(const SetRecordCfgReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.SetRecordCfgReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.key() != 0) {
    set_key(from.key());
  }
}

void SetRecordCfgReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.SetRecordCfgReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRecordCfgReq::CopyFrom(const SetRecordCfgReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.SetRecordCfgReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRecordCfgReq::IsInitialized() const {
  return true;
}

void SetRecordCfgReq::Swap(SetRecordCfgReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetRecordCfgReq::InternalSwap(SetRecordCfgReq* other) {
  using std::swap;
  value_.Swap(&other->value_);
  swap(key_, other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetRecordCfgReq::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetRecordCfgRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetRecordCfgRsp::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetRecordCfgRsp::SetRecordCfgRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsSetRecordCfgRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.SetRecordCfgRsp)
}
SetRecordCfgRsp::SetRecordCfgRsp(const SetRecordCfgRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:raltservice.SetRecordCfgRsp)
}

void SetRecordCfgRsp::SharedCtor() {
  result_ = 0u;
  _cached_size_ = 0;
}

SetRecordCfgRsp::~SetRecordCfgRsp() {
  // @@protoc_insertion_point(destructor:raltservice.SetRecordCfgRsp)
  SharedDtor();
}

void SetRecordCfgRsp::SharedDtor() {
}

void SetRecordCfgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetRecordCfgRsp::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetRecordCfgRsp& SetRecordCfgRsp::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsSetRecordCfgRsp();
  return *internal_default_instance();
}

SetRecordCfgRsp* SetRecordCfgRsp::New(::google::protobuf::Arena* arena) const {
  SetRecordCfgRsp* n = new SetRecordCfgRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetRecordCfgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.SetRecordCfgRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear();
}

bool SetRecordCfgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.SetRecordCfgRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.SetRecordCfgRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.SetRecordCfgRsp)
  return false;
#undef DO_
}

void SetRecordCfgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.SetRecordCfgRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.SetRecordCfgRsp)
}

::google::protobuf::uint8* SetRecordCfgRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.SetRecordCfgRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.SetRecordCfgRsp)
  return target;
}

size_t SetRecordCfgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.SetRecordCfgRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetRecordCfgRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.SetRecordCfgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRecordCfgRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetRecordCfgRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.SetRecordCfgRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.SetRecordCfgRsp)
    MergeFrom(*source);
  }
}

void SetRecordCfgRsp::MergeFrom(const SetRecordCfgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.SetRecordCfgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
}

void SetRecordCfgRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.SetRecordCfgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRecordCfgRsp::CopyFrom(const SetRecordCfgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.SetRecordCfgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRecordCfgRsp::IsInitialized() const {
  return true;
}

void SetRecordCfgRsp::Swap(SetRecordCfgRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetRecordCfgRsp::InternalSwap(SetRecordCfgRsp* other) {
  using std::swap;
  swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetRecordCfgRsp::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetAllDomainReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAllDomainReq::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAllDomainReq::GetAllDomainReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsGetAllDomainReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.GetAllDomainReq)
}
GetAllDomainReq::GetAllDomainReq(const GetAllDomainReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:raltservice.GetAllDomainReq)
}

void GetAllDomainReq::SharedCtor() {
  type_ = 0u;
  _cached_size_ = 0;
}

GetAllDomainReq::~GetAllDomainReq() {
  // @@protoc_insertion_point(destructor:raltservice.GetAllDomainReq)
  SharedDtor();
}

void GetAllDomainReq::SharedDtor() {
}

void GetAllDomainReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllDomainReq::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetAllDomainReq& GetAllDomainReq::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsGetAllDomainReq();
  return *internal_default_instance();
}

GetAllDomainReq* GetAllDomainReq::New(::google::protobuf::Arena* arena) const {
  GetAllDomainReq* n = new GetAllDomainReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetAllDomainReq::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.GetAllDomainReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0u;
  _internal_metadata_.Clear();
}

bool GetAllDomainReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.GetAllDomainReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.GetAllDomainReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.GetAllDomainReq)
  return false;
#undef DO_
}

void GetAllDomainReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.GetAllDomainReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.GetAllDomainReq)
}

::google::protobuf::uint8* GetAllDomainReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.GetAllDomainReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.GetAllDomainReq)
  return target;
}

size_t GetAllDomainReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.GetAllDomainReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllDomainReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.GetAllDomainReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAllDomainReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAllDomainReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.GetAllDomainReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.GetAllDomainReq)
    MergeFrom(*source);
  }
}

void GetAllDomainReq::MergeFrom(const GetAllDomainReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.GetAllDomainReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
}

void GetAllDomainReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.GetAllDomainReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllDomainReq::CopyFrom(const GetAllDomainReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.GetAllDomainReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllDomainReq::IsInitialized() const {
  return true;
}

void GetAllDomainReq::Swap(GetAllDomainReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAllDomainReq::InternalSwap(GetAllDomainReq* other) {
  using std::swap;
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetAllDomainReq::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Domain::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Domain::kTypeFieldNumber;
const int Domain::kDomainStrFieldNumber;
const int Domain::kAppendOrReplaceStrFieldNumber;
const int Domain::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Domain::Domain()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsDomain();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.Domain)
}
Domain::Domain(const Domain& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  domain_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain_str().size() > 0) {
    domain_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_str_);
  }
  append_or_replace_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.append_or_replace_str().size() > 0) {
    append_or_replace_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.append_or_replace_str_);
  }
  port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.port().size() > 0) {
    port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:raltservice.Domain)
}

void Domain::SharedCtor() {
  domain_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  append_or_replace_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

Domain::~Domain() {
  // @@protoc_insertion_point(destructor:raltservice.Domain)
  SharedDtor();
}

void Domain::SharedDtor() {
  domain_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  append_or_replace_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Domain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Domain::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Domain& Domain::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsDomain();
  return *internal_default_instance();
}

Domain* Domain::New(::google::protobuf::Arena* arena) const {
  Domain* n = new Domain;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Domain::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.Domain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  domain_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  append_or_replace_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

bool Domain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.Domain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .raltservice.DomainType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::raltservice::DomainType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain_str = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain_str().data(), static_cast<int>(this->domain_str().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raltservice.Domain.domain_str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string append_or_replace_str = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_append_or_replace_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->append_or_replace_str().data(), static_cast<int>(this->append_or_replace_str().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raltservice.Domain.append_or_replace_str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->port().data(), static_cast<int>(this->port().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raltservice.Domain.port"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.Domain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.Domain)
  return false;
#undef DO_
}

void Domain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.Domain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raltservice.DomainType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string domain_str = 2;
  if (this->domain_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain_str().data(), static_cast<int>(this->domain_str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.Domain.domain_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain_str(), output);
  }

  // string append_or_replace_str = 3;
  if (this->append_or_replace_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->append_or_replace_str().data(), static_cast<int>(this->append_or_replace_str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.Domain.append_or_replace_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->append_or_replace_str(), output);
  }

  // string port = 4;
  if (this->port().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port().data(), static_cast<int>(this->port().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.Domain.port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.Domain)
}

::google::protobuf::uint8* Domain::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.Domain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raltservice.DomainType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string domain_str = 2;
  if (this->domain_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain_str().data(), static_cast<int>(this->domain_str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.Domain.domain_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->domain_str(), target);
  }

  // string append_or_replace_str = 3;
  if (this->append_or_replace_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->append_or_replace_str().data(), static_cast<int>(this->append_or_replace_str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.Domain.append_or_replace_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->append_or_replace_str(), target);
  }

  // string port = 4;
  if (this->port().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port().data(), static_cast<int>(this->port().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.Domain.port");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.Domain)
  return target;
}

size_t Domain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.Domain)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string domain_str = 2;
  if (this->domain_str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain_str());
  }

  // string append_or_replace_str = 3;
  if (this->append_or_replace_str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->append_or_replace_str());
  }

  // string port = 4;
  if (this->port().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->port());
  }

  // .raltservice.DomainType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Domain::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.Domain)
  GOOGLE_DCHECK_NE(&from, this);
  const Domain* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Domain>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.Domain)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.Domain)
    MergeFrom(*source);
  }
}

void Domain::MergeFrom(const Domain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.Domain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.domain_str().size() > 0) {

    domain_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_str_);
  }
  if (from.append_or_replace_str().size() > 0) {

    append_or_replace_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.append_or_replace_str_);
  }
  if (from.port().size() > 0) {

    port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Domain::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.Domain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Domain::CopyFrom(const Domain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.Domain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Domain::IsInitialized() const {
  return true;
}

void Domain::Swap(Domain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Domain::InternalSwap(Domain* other) {
  using std::swap;
  domain_str_.Swap(&other->domain_str_);
  append_or_replace_str_.Swap(&other->append_or_replace_str_);
  port_.Swap(&other->port_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Domain::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateDomainRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateDomainRsp::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateDomainRsp::UpdateDomainRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsUpdateDomainRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.UpdateDomainRsp)
}
UpdateDomainRsp::UpdateDomainRsp(const UpdateDomainRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:raltservice.UpdateDomainRsp)
}

void UpdateDomainRsp::SharedCtor() {
  result_ = 0u;
  _cached_size_ = 0;
}

UpdateDomainRsp::~UpdateDomainRsp() {
  // @@protoc_insertion_point(destructor:raltservice.UpdateDomainRsp)
  SharedDtor();
}

void UpdateDomainRsp::SharedDtor() {
}

void UpdateDomainRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDomainRsp::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateDomainRsp& UpdateDomainRsp::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsUpdateDomainRsp();
  return *internal_default_instance();
}

UpdateDomainRsp* UpdateDomainRsp::New(::google::protobuf::Arena* arena) const {
  UpdateDomainRsp* n = new UpdateDomainRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateDomainRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.UpdateDomainRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear();
}

bool UpdateDomainRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.UpdateDomainRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.UpdateDomainRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.UpdateDomainRsp)
  return false;
#undef DO_
}

void UpdateDomainRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.UpdateDomainRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.UpdateDomainRsp)
}

::google::protobuf::uint8* UpdateDomainRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.UpdateDomainRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.UpdateDomainRsp)
  return target;
}

size_t UpdateDomainRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.UpdateDomainRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDomainRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.UpdateDomainRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateDomainRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateDomainRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.UpdateDomainRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.UpdateDomainRsp)
    MergeFrom(*source);
  }
}

void UpdateDomainRsp::MergeFrom(const UpdateDomainRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.UpdateDomainRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
}

void UpdateDomainRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.UpdateDomainRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDomainRsp::CopyFrom(const UpdateDomainRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.UpdateDomainRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDomainRsp::IsInitialized() const {
  return true;
}

void UpdateDomainRsp::Swap(UpdateDomainRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateDomainRsp::InternalSwap(UpdateDomainRsp* other) {
  using std::swap;
  swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateDomainRsp::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetDomainReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDomainReq::kDomainStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDomainReq::GetDomainReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsGetDomainReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.GetDomainReq)
}
GetDomainReq::GetDomainReq(const GetDomainReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  domain_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain_str().size() > 0) {
    domain_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_str_);
  }
  // @@protoc_insertion_point(copy_constructor:raltservice.GetDomainReq)
}

void GetDomainReq::SharedCtor() {
  domain_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetDomainReq::~GetDomainReq() {
  // @@protoc_insertion_point(destructor:raltservice.GetDomainReq)
  SharedDtor();
}

void GetDomainReq::SharedDtor() {
  domain_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetDomainReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDomainReq::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetDomainReq& GetDomainReq::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsGetDomainReq();
  return *internal_default_instance();
}

GetDomainReq* GetDomainReq::New(::google::protobuf::Arena* arena) const {
  GetDomainReq* n = new GetDomainReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDomainReq::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.GetDomainReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  domain_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GetDomainReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.GetDomainReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string domain_str = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain_str().data(), static_cast<int>(this->domain_str().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raltservice.GetDomainReq.domain_str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.GetDomainReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.GetDomainReq)
  return false;
#undef DO_
}

void GetDomainReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.GetDomainReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string domain_str = 1;
  if (this->domain_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain_str().data(), static_cast<int>(this->domain_str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.GetDomainReq.domain_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->domain_str(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.GetDomainReq)
}

::google::protobuf::uint8* GetDomainReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.GetDomainReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string domain_str = 1;
  if (this->domain_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain_str().data(), static_cast<int>(this->domain_str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.GetDomainReq.domain_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain_str(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.GetDomainReq)
  return target;
}

size_t GetDomainReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.GetDomainReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string domain_str = 1;
  if (this->domain_str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain_str());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDomainReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.GetDomainReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDomainReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDomainReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.GetDomainReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.GetDomainReq)
    MergeFrom(*source);
  }
}

void GetDomainReq::MergeFrom(const GetDomainReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.GetDomainReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.domain_str().size() > 0) {

    domain_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_str_);
  }
}

void GetDomainReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.GetDomainReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDomainReq::CopyFrom(const GetDomainReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.GetDomainReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDomainReq::IsInitialized() const {
  return true;
}

void GetDomainReq::Swap(GetDomainReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDomainReq::InternalSwap(GetDomainReq* other) {
  using std::swap;
  domain_str_.Swap(&other->domain_str_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDomainReq::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddDomainRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddDomainRsp::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddDomainRsp::AddDomainRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsAddDomainRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.AddDomainRsp)
}
AddDomainRsp::AddDomainRsp(const AddDomainRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:raltservice.AddDomainRsp)
}

void AddDomainRsp::SharedCtor() {
  result_ = 0u;
  _cached_size_ = 0;
}

AddDomainRsp::~AddDomainRsp() {
  // @@protoc_insertion_point(destructor:raltservice.AddDomainRsp)
  SharedDtor();
}

void AddDomainRsp::SharedDtor() {
}

void AddDomainRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddDomainRsp::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddDomainRsp& AddDomainRsp::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsAddDomainRsp();
  return *internal_default_instance();
}

AddDomainRsp* AddDomainRsp::New(::google::protobuf::Arena* arena) const {
  AddDomainRsp* n = new AddDomainRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddDomainRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.AddDomainRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear();
}

bool AddDomainRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.AddDomainRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.AddDomainRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.AddDomainRsp)
  return false;
#undef DO_
}

void AddDomainRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.AddDomainRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.AddDomainRsp)
}

::google::protobuf::uint8* AddDomainRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.AddDomainRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.AddDomainRsp)
  return target;
}

size_t AddDomainRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.AddDomainRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddDomainRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.AddDomainRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AddDomainRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddDomainRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.AddDomainRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.AddDomainRsp)
    MergeFrom(*source);
  }
}

void AddDomainRsp::MergeFrom(const AddDomainRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.AddDomainRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
}

void AddDomainRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.AddDomainRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddDomainRsp::CopyFrom(const AddDomainRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.AddDomainRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDomainRsp::IsInitialized() const {
  return true;
}

void AddDomainRsp::Swap(AddDomainRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddDomainRsp::InternalSwap(AddDomainRsp* other) {
  using std::swap;
  swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddDomainRsp::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteDomainReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteDomainReq::kDomainStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteDomainReq::DeleteDomainReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsDeleteDomainReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.DeleteDomainReq)
}
DeleteDomainReq::DeleteDomainReq(const DeleteDomainReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  domain_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain_str().size() > 0) {
    domain_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_str_);
  }
  // @@protoc_insertion_point(copy_constructor:raltservice.DeleteDomainReq)
}

void DeleteDomainReq::SharedCtor() {
  domain_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteDomainReq::~DeleteDomainReq() {
  // @@protoc_insertion_point(destructor:raltservice.DeleteDomainReq)
  SharedDtor();
}

void DeleteDomainReq::SharedDtor() {
  domain_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteDomainReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteDomainReq::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteDomainReq& DeleteDomainReq::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsDeleteDomainReq();
  return *internal_default_instance();
}

DeleteDomainReq* DeleteDomainReq::New(::google::protobuf::Arena* arena) const {
  DeleteDomainReq* n = new DeleteDomainReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteDomainReq::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.DeleteDomainReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  domain_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DeleteDomainReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.DeleteDomainReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string domain_str = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain_str().data(), static_cast<int>(this->domain_str().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raltservice.DeleteDomainReq.domain_str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.DeleteDomainReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.DeleteDomainReq)
  return false;
#undef DO_
}

void DeleteDomainReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.DeleteDomainReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string domain_str = 1;
  if (this->domain_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain_str().data(), static_cast<int>(this->domain_str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.DeleteDomainReq.domain_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->domain_str(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.DeleteDomainReq)
}

::google::protobuf::uint8* DeleteDomainReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.DeleteDomainReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string domain_str = 1;
  if (this->domain_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain_str().data(), static_cast<int>(this->domain_str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.DeleteDomainReq.domain_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain_str(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.DeleteDomainReq)
  return target;
}

size_t DeleteDomainReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.DeleteDomainReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string domain_str = 1;
  if (this->domain_str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain_str());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteDomainReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.DeleteDomainReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteDomainReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteDomainReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.DeleteDomainReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.DeleteDomainReq)
    MergeFrom(*source);
  }
}

void DeleteDomainReq::MergeFrom(const DeleteDomainReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.DeleteDomainReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.domain_str().size() > 0) {

    domain_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_str_);
  }
}

void DeleteDomainReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.DeleteDomainReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDomainReq::CopyFrom(const DeleteDomainReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.DeleteDomainReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDomainReq::IsInitialized() const {
  return true;
}

void DeleteDomainReq::Swap(DeleteDomainReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteDomainReq::InternalSwap(DeleteDomainReq* other) {
  using std::swap;
  domain_str_.Swap(&other->domain_str_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteDomainReq::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteDomainRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteDomainRsp::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteDomainRsp::DeleteDomainRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsDeleteDomainRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.DeleteDomainRsp)
}
DeleteDomainRsp::DeleteDomainRsp(const DeleteDomainRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:raltservice.DeleteDomainRsp)
}

void DeleteDomainRsp::SharedCtor() {
  result_ = 0u;
  _cached_size_ = 0;
}

DeleteDomainRsp::~DeleteDomainRsp() {
  // @@protoc_insertion_point(destructor:raltservice.DeleteDomainRsp)
  SharedDtor();
}

void DeleteDomainRsp::SharedDtor() {
}

void DeleteDomainRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteDomainRsp::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteDomainRsp& DeleteDomainRsp::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsDeleteDomainRsp();
  return *internal_default_instance();
}

DeleteDomainRsp* DeleteDomainRsp::New(::google::protobuf::Arena* arena) const {
  DeleteDomainRsp* n = new DeleteDomainRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteDomainRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.DeleteDomainRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear();
}

bool DeleteDomainRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.DeleteDomainRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.DeleteDomainRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.DeleteDomainRsp)
  return false;
#undef DO_
}

void DeleteDomainRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.DeleteDomainRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.DeleteDomainRsp)
}

::google::protobuf::uint8* DeleteDomainRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.DeleteDomainRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.DeleteDomainRsp)
  return target;
}

size_t DeleteDomainRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.DeleteDomainRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteDomainRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.DeleteDomainRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteDomainRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteDomainRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.DeleteDomainRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.DeleteDomainRsp)
    MergeFrom(*source);
  }
}

void DeleteDomainRsp::MergeFrom(const DeleteDomainRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.DeleteDomainRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
}

void DeleteDomainRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.DeleteDomainRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDomainRsp::CopyFrom(const DeleteDomainRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.DeleteDomainRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDomainRsp::IsInitialized() const {
  return true;
}

void DeleteDomainRsp::Swap(DeleteDomainRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteDomainRsp::InternalSwap(DeleteDomainRsp* other) {
  using std::swap;
  swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteDomainRsp::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetMiscReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMiscReq::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMiscReq::GetMiscReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsGetMiscReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.GetMiscReq)
}
GetMiscReq::GetMiscReq(const GetMiscReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:raltservice.GetMiscReq)
}

void GetMiscReq::SharedCtor() {
  type_ = 0u;
  _cached_size_ = 0;
}

GetMiscReq::~GetMiscReq() {
  // @@protoc_insertion_point(destructor:raltservice.GetMiscReq)
  SharedDtor();
}

void GetMiscReq::SharedDtor() {
}

void GetMiscReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMiscReq::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetMiscReq& GetMiscReq::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsGetMiscReq();
  return *internal_default_instance();
}

GetMiscReq* GetMiscReq::New(::google::protobuf::Arena* arena) const {
  GetMiscReq* n = new GetMiscReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetMiscReq::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.GetMiscReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0u;
  _internal_metadata_.Clear();
}

bool GetMiscReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.GetMiscReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.GetMiscReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.GetMiscReq)
  return false;
#undef DO_
}

void GetMiscReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.GetMiscReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.GetMiscReq)
}

::google::protobuf::uint8* GetMiscReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.GetMiscReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.GetMiscReq)
  return target;
}

size_t GetMiscReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.GetMiscReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMiscReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.GetMiscReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMiscReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMiscReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.GetMiscReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.GetMiscReq)
    MergeFrom(*source);
  }
}

void GetMiscReq::MergeFrom(const GetMiscReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.GetMiscReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
}

void GetMiscReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.GetMiscReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMiscReq::CopyFrom(const GetMiscReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.GetMiscReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMiscReq::IsInitialized() const {
  return true;
}

void GetMiscReq::Swap(GetMiscReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMiscReq::InternalSwap(GetMiscReq* other) {
  using std::swap;
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetMiscReq::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetMiscRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMiscRsp::kRaltFilterTypeDefaultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMiscRsp::GetMiscRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsGetMiscRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.GetMiscRsp)
}
GetMiscRsp::GetMiscRsp(const GetMiscRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ralt_filter_type_default_ = from.ralt_filter_type_default_;
  // @@protoc_insertion_point(copy_constructor:raltservice.GetMiscRsp)
}

void GetMiscRsp::SharedCtor() {
  ralt_filter_type_default_ = 0;
  _cached_size_ = 0;
}

GetMiscRsp::~GetMiscRsp() {
  // @@protoc_insertion_point(destructor:raltservice.GetMiscRsp)
  SharedDtor();
}

void GetMiscRsp::SharedDtor() {
}

void GetMiscRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMiscRsp::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetMiscRsp& GetMiscRsp::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsGetMiscRsp();
  return *internal_default_instance();
}

GetMiscRsp* GetMiscRsp::New(::google::protobuf::Arena* arena) const {
  GetMiscRsp* n = new GetMiscRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetMiscRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.GetMiscRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ralt_filter_type_default_ = 0;
  _internal_metadata_.Clear();
}

bool GetMiscRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.GetMiscRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .raltservice.MiscSwitch ralt_filter_type_default = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ralt_filter_type_default(static_cast< ::raltservice::MiscSwitch >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.GetMiscRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.GetMiscRsp)
  return false;
#undef DO_
}

void GetMiscRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.GetMiscRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raltservice.MiscSwitch ralt_filter_type_default = 1;
  if (this->ralt_filter_type_default() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ralt_filter_type_default(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.GetMiscRsp)
}

::google::protobuf::uint8* GetMiscRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.GetMiscRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raltservice.MiscSwitch ralt_filter_type_default = 1;
  if (this->ralt_filter_type_default() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ralt_filter_type_default(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.GetMiscRsp)
  return target;
}

size_t GetMiscRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.GetMiscRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .raltservice.MiscSwitch ralt_filter_type_default = 1;
  if (this->ralt_filter_type_default() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ralt_filter_type_default());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMiscRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.GetMiscRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMiscRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMiscRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.GetMiscRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.GetMiscRsp)
    MergeFrom(*source);
  }
}

void GetMiscRsp::MergeFrom(const GetMiscRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.GetMiscRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ralt_filter_type_default() != 0) {
    set_ralt_filter_type_default(from.ralt_filter_type_default());
  }
}

void GetMiscRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.GetMiscRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMiscRsp::CopyFrom(const GetMiscRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.GetMiscRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMiscRsp::IsInitialized() const {
  return true;
}

void GetMiscRsp::Swap(GetMiscRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMiscRsp::InternalSwap(GetMiscRsp* other) {
  using std::swap;
  swap(ralt_filter_type_default_, other->ralt_filter_type_default_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetMiscRsp::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Misc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Misc::kKeyFieldNumber;
const int Misc::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Misc::Misc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsMisc();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.Misc)
}
Misc::Misc(const Misc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:raltservice.Misc)
}

void Misc::SharedCtor() {
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
  _cached_size_ = 0;
}

Misc::~Misc() {
  // @@protoc_insertion_point(destructor:raltservice.Misc)
  SharedDtor();
}

void Misc::SharedDtor() {
}

void Misc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Misc::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Misc& Misc::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsMisc();
  return *internal_default_instance();
}

Misc* Misc::New(::google::protobuf::Arena* arena) const {
  Misc* n = new Misc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Misc::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.Misc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

bool Misc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.Misc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .raltservice.MiscKey key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_key(static_cast< ::raltservice::MiscKey >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raltservice.MiscSwitch value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_value(static_cast< ::raltservice::MiscSwitch >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.Misc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.Misc)
  return false;
#undef DO_
}

void Misc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.Misc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raltservice.MiscKey key = 1;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->key(), output);
  }

  // .raltservice.MiscSwitch value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.Misc)
}

::google::protobuf::uint8* Misc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.Misc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raltservice.MiscKey key = 1;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->key(), target);
  }

  // .raltservice.MiscSwitch value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.Misc)
  return target;
}

size_t Misc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.Misc)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .raltservice.MiscKey key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->key());
  }

  // .raltservice.MiscSwitch value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Misc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.Misc)
  GOOGLE_DCHECK_NE(&from, this);
  const Misc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Misc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.Misc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.Misc)
    MergeFrom(*source);
  }
}

void Misc::MergeFrom(const Misc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.Misc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key() != 0) {
    set_key(from.key());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Misc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.Misc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Misc::CopyFrom(const Misc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.Misc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Misc::IsInitialized() const {
  return true;
}

void Misc::Swap(Misc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Misc::InternalSwap(Misc* other) {
  using std::swap;
  swap(key_, other->key_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Misc::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ModMiscOpRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModMiscOpRsp::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModMiscOpRsp::ModMiscOpRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsModMiscOpRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.ModMiscOpRsp)
}
ModMiscOpRsp::ModMiscOpRsp(const ModMiscOpRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:raltservice.ModMiscOpRsp)
}

void ModMiscOpRsp::SharedCtor() {
  result_ = 0u;
  _cached_size_ = 0;
}

ModMiscOpRsp::~ModMiscOpRsp() {
  // @@protoc_insertion_point(destructor:raltservice.ModMiscOpRsp)
  SharedDtor();
}

void ModMiscOpRsp::SharedDtor() {
}

void ModMiscOpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModMiscOpRsp::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModMiscOpRsp& ModMiscOpRsp::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsModMiscOpRsp();
  return *internal_default_instance();
}

ModMiscOpRsp* ModMiscOpRsp::New(::google::protobuf::Arena* arena) const {
  ModMiscOpRsp* n = new ModMiscOpRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModMiscOpRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.ModMiscOpRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear();
}

bool ModMiscOpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.ModMiscOpRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.ModMiscOpRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.ModMiscOpRsp)
  return false;
#undef DO_
}

void ModMiscOpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.ModMiscOpRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.ModMiscOpRsp)
}

::google::protobuf::uint8* ModMiscOpRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.ModMiscOpRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.ModMiscOpRsp)
  return target;
}

size_t ModMiscOpRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.ModMiscOpRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModMiscOpRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.ModMiscOpRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ModMiscOpRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModMiscOpRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.ModMiscOpRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.ModMiscOpRsp)
    MergeFrom(*source);
  }
}

void ModMiscOpRsp::MergeFrom(const ModMiscOpRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.ModMiscOpRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
}

void ModMiscOpRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.ModMiscOpRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModMiscOpRsp::CopyFrom(const ModMiscOpRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.ModMiscOpRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModMiscOpRsp::IsInitialized() const {
  return true;
}

void ModMiscOpRsp::Swap(ModMiscOpRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModMiscOpRsp::InternalSwap(ModMiscOpRsp* other) {
  using std::swap;
  swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModMiscOpRsp::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RaltStatusReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaltStatusReq::kIpAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaltStatusReq::RaltStatusReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsRaltStatusReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.RaltStatusReq)
}
RaltStatusReq::RaltStatusReq(const RaltStatusReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip_addr().size() > 0) {
    ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_addr_);
  }
  // @@protoc_insertion_point(copy_constructor:raltservice.RaltStatusReq)
}

void RaltStatusReq::SharedCtor() {
  ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RaltStatusReq::~RaltStatusReq() {
  // @@protoc_insertion_point(destructor:raltservice.RaltStatusReq)
  SharedDtor();
}

void RaltStatusReq::SharedDtor() {
  ip_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RaltStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaltStatusReq::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RaltStatusReq& RaltStatusReq::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsRaltStatusReq();
  return *internal_default_instance();
}

RaltStatusReq* RaltStatusReq::New(::google::protobuf::Arena* arena) const {
  RaltStatusReq* n = new RaltStatusReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaltStatusReq::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.RaltStatusReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RaltStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.RaltStatusReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raltservice.RaltStatusReq.ip_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.RaltStatusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.RaltStatusReq)
  return false;
#undef DO_
}

void RaltStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.RaltStatusReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.RaltStatusReq.ip_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip_addr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.RaltStatusReq)
}

::google::protobuf::uint8* RaltStatusReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.RaltStatusReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.RaltStatusReq.ip_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip_addr(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.RaltStatusReq)
  return target;
}

size_t RaltStatusReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.RaltStatusReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip_addr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaltStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.RaltStatusReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RaltStatusReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaltStatusReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.RaltStatusReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.RaltStatusReq)
    MergeFrom(*source);
  }
}

void RaltStatusReq::MergeFrom(const RaltStatusReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.RaltStatusReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_addr().size() > 0) {

    ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_addr_);
  }
}

void RaltStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.RaltStatusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaltStatusReq::CopyFrom(const RaltStatusReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.RaltStatusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaltStatusReq::IsInitialized() const {
  return true;
}

void RaltStatusReq::Swap(RaltStatusReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaltStatusReq::InternalSwap(RaltStatusReq* other) {
  using std::swap;
  ip_addr_.Swap(&other->ip_addr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaltStatusReq::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RaltStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaltStatus::kIpAddrFieldNumber;
const int RaltStatus::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaltStatus::RaltStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsRaltStatus();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.RaltStatus)
}
RaltStatus::RaltStatus(const RaltStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip_addr().size() > 0) {
    ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_addr_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:raltservice.RaltStatus)
}

void RaltStatus::SharedCtor() {
  ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0u;
  _cached_size_ = 0;
}

RaltStatus::~RaltStatus() {
  // @@protoc_insertion_point(destructor:raltservice.RaltStatus)
  SharedDtor();
}

void RaltStatus::SharedDtor() {
  ip_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RaltStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaltStatus::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RaltStatus& RaltStatus::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsRaltStatus();
  return *internal_default_instance();
}

RaltStatus* RaltStatus::New(::google::protobuf::Arena* arena) const {
  RaltStatus* n = new RaltStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaltStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.RaltStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0u;
  _internal_metadata_.Clear();
}

bool RaltStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.RaltStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raltservice.RaltStatus.ip_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.RaltStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.RaltStatus)
  return false;
#undef DO_
}

void RaltStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.RaltStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.RaltStatus.ip_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip_addr(), output);
  }

  // uint32 status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.RaltStatus)
}

::google::protobuf::uint8* RaltStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.RaltStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.RaltStatus.ip_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip_addr(), target);
  }

  // uint32 status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.RaltStatus)
  return target;
}

size_t RaltStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.RaltStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip_addr());
  }

  // uint32 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaltStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.RaltStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const RaltStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaltStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.RaltStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.RaltStatus)
    MergeFrom(*source);
  }
}

void RaltStatus::MergeFrom(const RaltStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.RaltStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_addr().size() > 0) {

    ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_addr_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void RaltStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.RaltStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaltStatus::CopyFrom(const RaltStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.RaltStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaltStatus::IsInitialized() const {
  return true;
}

void RaltStatus::Swap(RaltStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaltStatus::InternalSwap(RaltStatus* other) {
  using std::swap;
  ip_addr_.Swap(&other->ip_addr_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaltStatus::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExecCmdReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecCmdReq::kIpAddrFieldNumber;
const int ExecCmdReq::kCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecCmdReq::ExecCmdReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsExecCmdReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.ExecCmdReq)
}
ExecCmdReq::ExecCmdReq(const ExecCmdReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip_addr().size() > 0) {
    ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_addr_);
  }
  cmd_ = from.cmd_;
  // @@protoc_insertion_point(copy_constructor:raltservice.ExecCmdReq)
}

void ExecCmdReq::SharedCtor() {
  ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_ = 0;
  _cached_size_ = 0;
}

ExecCmdReq::~ExecCmdReq() {
  // @@protoc_insertion_point(destructor:raltservice.ExecCmdReq)
  SharedDtor();
}

void ExecCmdReq::SharedDtor() {
  ip_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExecCmdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecCmdReq::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExecCmdReq& ExecCmdReq::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsExecCmdReq();
  return *internal_default_instance();
}

ExecCmdReq* ExecCmdReq::New(::google::protobuf::Arena* arena) const {
  ExecCmdReq* n = new ExecCmdReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExecCmdReq::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.ExecCmdReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_ = 0;
  _internal_metadata_.Clear();
}

bool ExecCmdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.ExecCmdReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raltservice.ExecCmdReq.ip_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raltservice.CommandType cmd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd(static_cast< ::raltservice::CommandType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.ExecCmdReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.ExecCmdReq)
  return false;
#undef DO_
}

void ExecCmdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.ExecCmdReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.ExecCmdReq.ip_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip_addr(), output);
  }

  // .raltservice.CommandType cmd = 2;
  if (this->cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmd(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.ExecCmdReq)
}

::google::protobuf::uint8* ExecCmdReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.ExecCmdReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raltservice.ExecCmdReq.ip_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip_addr(), target);
  }

  // .raltservice.CommandType cmd = 2;
  if (this->cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmd(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.ExecCmdReq)
  return target;
}

size_t ExecCmdReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.ExecCmdReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip_addr());
  }

  // .raltservice.CommandType cmd = 2;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecCmdReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.ExecCmdReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecCmdReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecCmdReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.ExecCmdReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.ExecCmdReq)
    MergeFrom(*source);
  }
}

void ExecCmdReq::MergeFrom(const ExecCmdReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.ExecCmdReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_addr().size() > 0) {

    ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_addr_);
  }
  if (from.cmd() != 0) {
    set_cmd(from.cmd());
  }
}

void ExecCmdReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.ExecCmdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecCmdReq::CopyFrom(const ExecCmdReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.ExecCmdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecCmdReq::IsInitialized() const {
  return true;
}

void ExecCmdReq::Swap(ExecCmdReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecCmdReq::InternalSwap(ExecCmdReq* other) {
  using std::swap;
  ip_addr_.Swap(&other->ip_addr_);
  swap(cmd_, other->cmd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecCmdReq::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExecCmdRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecCmdRsp::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecCmdRsp::ExecCmdRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ralt_2dservice_2eproto::InitDefaultsExecCmdRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raltservice.ExecCmdRsp)
}
ExecCmdRsp::ExecCmdRsp(const ExecCmdRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:raltservice.ExecCmdRsp)
}

void ExecCmdRsp::SharedCtor() {
  result_ = 0u;
  _cached_size_ = 0;
}

ExecCmdRsp::~ExecCmdRsp() {
  // @@protoc_insertion_point(destructor:raltservice.ExecCmdRsp)
  SharedDtor();
}

void ExecCmdRsp::SharedDtor() {
}

void ExecCmdRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecCmdRsp::descriptor() {
  ::protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExecCmdRsp& ExecCmdRsp::default_instance() {
  ::protobuf_ralt_2dservice_2eproto::InitDefaultsExecCmdRsp();
  return *internal_default_instance();
}

ExecCmdRsp* ExecCmdRsp::New(::google::protobuf::Arena* arena) const {
  ExecCmdRsp* n = new ExecCmdRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExecCmdRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:raltservice.ExecCmdRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear();
}

bool ExecCmdRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raltservice.ExecCmdRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raltservice.ExecCmdRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raltservice.ExecCmdRsp)
  return false;
#undef DO_
}

void ExecCmdRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raltservice.ExecCmdRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raltservice.ExecCmdRsp)
}

::google::protobuf::uint8* ExecCmdRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raltservice.ExecCmdRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raltservice.ExecCmdRsp)
  return target;
}

size_t ExecCmdRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raltservice.ExecCmdRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecCmdRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raltservice.ExecCmdRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecCmdRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecCmdRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raltservice.ExecCmdRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raltservice.ExecCmdRsp)
    MergeFrom(*source);
  }
}

void ExecCmdRsp::MergeFrom(const ExecCmdRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raltservice.ExecCmdRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
}

void ExecCmdRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raltservice.ExecCmdRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecCmdRsp::CopyFrom(const ExecCmdRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raltservice.ExecCmdRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecCmdRsp::IsInitialized() const {
  return true;
}

void ExecCmdRsp::Swap(ExecCmdRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecCmdRsp::InternalSwap(ExecCmdRsp* other) {
  using std::swap;
  swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecCmdRsp::GetMetadata() const {
  protobuf_ralt_2dservice_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ralt_2dservice_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace raltservice

// @@protoc_insertion_point(global_scope)
